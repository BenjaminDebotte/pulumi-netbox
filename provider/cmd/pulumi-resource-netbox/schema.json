{
    "name": "netbox",
    "displayName": "Netbox",
    "description": "A Pulumi package for creating and managing Netbox resources",
    "keywords": [
        "pulumi",
        "netbox",
        "category/network"
    ],
    "homepage": "https://github.com/BenjaminDebotte/pulumi-netbox",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`netbox` Terraform Provider](https://github.com/e-breuninger/terraform-provider-netbox).",
    "repository": "https://github.com/BenjaminDebotte/pulumi-netbox",
    "logoUrl": "https://raw.githubusercontent.com/BenjaminDebotte/pulumi-netbox/main/docs/netbox.png",
    "pluginDownloadURL": "github://api.github.com/BenjaminDebotte/pulumi-netbox",
    "publisher": "BenjaminDebotte",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "packageReferences": {
                "Pulumi": "3.*"
            },
            "compatibility": "tfbridge20",
            "rootNamespace": "Pulumiverse"
        },
        "go": {
            "importBasePath": "github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox",
            "generateResourceContainerTypes": true,
            "generateExtraInputTypes": true
        },
        "java": {
            "basePackage": "com.BenjaminDebotte",
            "buildFiles": "",
            "gradleNexusPublishPluginVersion": "",
            "gradleTest": ""
        },
        "nodejs": {
            "packageName": "@pulumiverse/netbox",
            "packageDescription": "A Pulumi package for creating and managing Netbox resources. Based on terraform-provider-netbox: version v43c2dc48a2a3fee3ff3eed4a3d89db16c6dbe0b6",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/e-breuninger/terraform-provider-netbox)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-netbox` repo](https://github.com/BenjaminDebotte/pulumi-netbox/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-netbox` repo](https://github.com/e-breuninger/terraform-provider-netbox/issues).",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "compatibility": "tfbridge20",
            "disableUnionOutputTypes": true
        },
        "python": {
            "packageName": "pulumi_netbox",
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            },
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/e-breuninger/terraform-provider-netbox)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-netbox` repo](https://github.com/BenjaminDebotte/pulumi-netbox/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-netbox` repo](https://github.com/e-breuninger/terraform-provider-netbox/issues).",
            "compatibility": "tfbridge20",
            "pyproject": {}
        }
    },
    "config": {
        "variables": {
            "allowInsecureHttps": {
                "type": "boolean",
                "description": "Flag to set whether to allow https with invalid certificates. Can be set via the `NETBOX_ALLOW_INSECURE_HTTPS`\nenvironment variable. Defaults to `false`.\n"
            },
            "apiToken": {
                "type": "string",
                "description": "Netbox API authentication token. Can be set via the `NETBOX_API_TOKEN` environment variable.\n"
            },
            "headers": {
                "type": "object",
                "additionalProperties": {
                    "$ref": "pulumi.json#/Any"
                },
                "description": "Set these header on all requests to Netbox. Can be set via the `NETBOX_HEADERS` environment variable.\n"
            },
            "requestTimeout": {
                "type": "integer",
                "description": "Netbox API HTTP request timeout in seconds. Can be set via the `NETBOX_REQUEST_TIMEOUT` environment variable.\n"
            },
            "serverUrl": {
                "type": "string",
                "description": "Location of Netbox server including scheme (http or https) and optional port. Can be set via the `NETBOX_SERVER_URL`\nenvironment variable.\n"
            },
            "skipVersionCheck": {
                "type": "boolean"
            },
            "stripTrailingSlashesFromUrl": {
                "type": "boolean",
                "description": "If true, strip trailing slashes from the `server_url` parameter and print a warning when doing so. Note that using\ntrailing slashes in the `server_url` parameter will usually lead to errors. Can be set via the\n`NETBOX_STRIP_TRAILING_SLASHES_FROM_URL` environment variable. Defaults to `true`.\n"
            }
        },
        "defaults": [
            "apiToken",
            "serverUrl"
        ]
    },
    "types": {
        "netbox:available/getPrefixPrefixesAvailable:getPrefixPrefixesAvailable": {
            "properties": {
                "family": {
                    "type": "integer"
                },
                "prefix": {
                    "type": "string"
                },
                "vrfId": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "family",
                "prefix",
                "vrfId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "netbox:device/getInterfacesFilter:getInterfacesFilter": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ]
        },
        "netbox:device/getInterfacesInterface:getInterfacesInterface": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "deviceId": {
                    "type": "integer"
                },
                "enabled": {
                    "type": "boolean"
                },
                "id": {
                    "type": "integer"
                },
                "macAddress": {
                    "type": "string"
                },
                "mode": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "mtu": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "tagIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "taggedVlans": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/netbox:device/getInterfacesInterfaceTaggedVlan:getInterfacesInterfaceTaggedVlan"
                    }
                },
                "untaggedVlans": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/netbox:device/getInterfacesInterfaceUntaggedVlan:getInterfacesInterfaceUntaggedVlan"
                    }
                }
            },
            "type": "object",
            "required": [
                "description",
                "deviceId",
                "enabled",
                "id",
                "macAddress",
                "mode",
                "mtu",
                "name",
                "tagIds",
                "taggedVlans",
                "untaggedVlans"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "netbox:device/getInterfacesInterfaceTaggedVlan:getInterfacesInterfaceTaggedVlan": {
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "vid": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name",
                "vid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "netbox:device/getInterfacesInterfaceUntaggedVlan:getInterfacesInterfaceUntaggedVlan": {
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "vid": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name",
                "vid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "netbox:index/CableATermination:CableATermination": {
            "properties": {
                "objectId": {
                    "type": "integer"
                },
                "objectType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "objectId",
                "objectType"
            ]
        },
        "netbox:index/CableBTermination:CableBTermination": {
            "properties": {
                "objectId": {
                    "type": "integer"
                },
                "objectType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "objectId",
                "objectType"
            ]
        },
        "netbox:index/getAsnsAsn:getAsnsAsn": {
            "properties": {
                "asn": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "rirId": {
                    "type": "integer"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "asn",
                "id",
                "rirId",
                "tags"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "netbox:index/getAsnsFilter:getAsnsFilter": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ]
        },
        "netbox:index/getDevicesDevice:getDevicesDevice": {
            "properties": {
                "assetTag": {
                    "type": "string"
                },
                "clusterId": {
                    "type": "integer"
                },
                "comments": {
                    "type": "string"
                },
                "configContext": {
                    "type": "string"
                },
                "customFields": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    }
                },
                "description": {
                    "type": "string"
                },
                "deviceId": {
                    "type": "integer"
                },
                "deviceTypeId": {
                    "type": "integer"
                },
                "localContextData": {
                    "type": "string"
                },
                "locationId": {
                    "type": "integer"
                },
                "manufacturerId": {
                    "type": "integer"
                },
                "model": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "platformId": {
                    "type": "integer"
                },
                "primaryIpv4": {
                    "type": "string"
                },
                "primaryIpv6": {
                    "type": "string"
                },
                "rackFace": {
                    "type": "string"
                },
                "rackId": {
                    "type": "integer"
                },
                "rackPosition": {
                    "type": "number"
                },
                "roleId": {
                    "type": "integer"
                },
                "serial": {
                    "type": "string"
                },
                "siteId": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tenantId": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "assetTag",
                "clusterId",
                "comments",
                "configContext",
                "customFields",
                "description",
                "deviceId",
                "deviceTypeId",
                "localContextData",
                "locationId",
                "manufacturerId",
                "model",
                "name",
                "platformId",
                "primaryIpv4",
                "primaryIpv6",
                "rackFace",
                "rackId",
                "rackPosition",
                "roleId",
                "serial",
                "siteId",
                "status",
                "tags",
                "tenantId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "netbox:index/getDevicesFilter:getDevicesFilter": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ]
        },
        "netbox:index/getInterfacesFilter:getInterfacesFilter": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ]
        },
        "netbox:index/getInterfacesInterface:getInterfacesInterface": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "id": {
                    "type": "integer"
                },
                "macAddress": {
                    "type": "string"
                },
                "mode": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "mtu": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "tagIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "taggedVlans": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/netbox:index/getInterfacesInterfaceTaggedVlan:getInterfacesInterfaceTaggedVlan"
                    }
                },
                "untaggedVlans": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/netbox:index/getInterfacesInterfaceUntaggedVlan:getInterfacesInterfaceUntaggedVlan"
                    }
                },
                "vmId": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "description",
                "enabled",
                "id",
                "macAddress",
                "mode",
                "mtu",
                "name",
                "tagIds",
                "taggedVlans",
                "untaggedVlans",
                "vmId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "netbox:index/getInterfacesInterfaceTaggedVlan:getInterfacesInterfaceTaggedVlan": {
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "vid": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name",
                "vid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "netbox:index/getInterfacesInterfaceUntaggedVlan:getInterfacesInterfaceUntaggedVlan": {
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "vid": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name",
                "vid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "netbox:index/getLocationsFilter:getLocationsFilter": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the field to filter on. Supported fields are: .\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value to pass to the specified filter.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ]
        },
        "netbox:index/getLocationsLocation:getLocationsLocation": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "parentId": {
                    "type": "integer"
                },
                "siteId": {
                    "type": "integer"
                },
                "slug": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "tenantId": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "description",
                "id",
                "parentId",
                "siteId",
                "status",
                "tenantId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "netbox:index/getPrefixesFilter:getPrefixesFilter": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the field to filter on. Supported fields are: `prefix`, `contains`, `vlan_vid`, `vrf_id`, `vlan_id`, `status`, `site_id`, \u0026 `tag`.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value to pass to the specified filter.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ]
        },
        "netbox:index/getPrefixesPrefix:getPrefixesPrefix": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "prefix": {
                    "type": "string"
                },
                "siteId": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "vlanId": {
                    "type": "integer"
                },
                "vlanVid": {
                    "type": "number"
                },
                "vrfId": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "description",
                "id",
                "prefix",
                "siteId",
                "status",
                "tags",
                "vlanId",
                "vlanVid",
                "vrfId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "netbox:index/getRacksFilter:getRacksFilter": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ]
        },
        "netbox:index/getRacksRack:getRacksRack": {
            "properties": {
                "assetTag": {
                    "type": "string"
                },
                "comments": {
                    "type": "string"
                },
                "customFields": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    }
                },
                "descUnits": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "facilityId": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "locationId": {
                    "type": "integer"
                },
                "maxWeight": {
                    "type": "integer"
                },
                "mountingDepth": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "outerDepth": {
                    "type": "integer"
                },
                "outerUnit": {
                    "type": "string"
                },
                "outerWidth": {
                    "type": "integer"
                },
                "roleId": {
                    "type": "integer"
                },
                "serial": {
                    "type": "string"
                },
                "siteId": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tenantId": {
                    "type": "integer"
                },
                "type": {
                    "type": "string"
                },
                "uHeight": {
                    "type": "integer"
                },
                "weight": {
                    "type": "number"
                },
                "weightUnit": {
                    "type": "string"
                },
                "width": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "assetTag",
                "comments",
                "customFields",
                "descUnits",
                "description",
                "facilityId",
                "id",
                "locationId",
                "maxWeight",
                "mountingDepth",
                "name",
                "outerDepth",
                "outerUnit",
                "outerWidth",
                "roleId",
                "serial",
                "siteId",
                "status",
                "tags",
                "tenantId",
                "type",
                "uHeight",
                "weight",
                "weightUnit",
                "width"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "netbox:index/getRegionFilter:getRegionFilter": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "The ID of this resource.\n"
                },
                "name": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "netbox:index/getTagsFilter:getTagsFilter": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ]
        },
        "netbox:index/getTagsTag:getTagsTag": {
            "properties": {
                "color": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                },
                "tagId": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "name",
                "slug",
                "tagId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "netbox:index/getTenantsFilter:getTenantsFilter": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ]
        },
        "netbox:index/getTenantsTenant:getTenantsTenant": {
            "properties": {
                "circuitCount": {
                    "type": "integer"
                },
                "clusterCount": {
                    "type": "integer"
                },
                "comments": {
                    "type": "string"
                },
                "created": {
                    "type": "string"
                },
                "customFields": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    }
                },
                "description": {
                    "type": "string"
                },
                "deviceCount": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "ipAddressCount": {
                    "type": "integer"
                },
                "lastUpdated": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "prefixCount": {
                    "type": "integer"
                },
                "rackCount": {
                    "type": "integer"
                },
                "siteCount": {
                    "type": "integer"
                },
                "slug": {
                    "type": "string"
                },
                "tenantGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/netbox:index/getTenantsTenantTenantGroup:getTenantsTenantTenantGroup"
                    }
                },
                "vlanCount": {
                    "type": "integer"
                },
                "vmCount": {
                    "type": "integer"
                },
                "vrfCount": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "circuitCount",
                "clusterCount",
                "comments",
                "created",
                "customFields",
                "description",
                "deviceCount",
                "id",
                "ipAddressCount",
                "lastUpdated",
                "name",
                "prefixCount",
                "rackCount",
                "siteCount",
                "slug",
                "tenantGroups",
                "vlanCount",
                "vmCount",
                "vrfCount"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "netbox:index/getTenantsTenantTenantGroup:getTenantsTenantTenantGroup": {
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                },
                "tenantCount": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name",
                "slug",
                "tenantCount"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "netbox:index/getVlansFilter:getVlansFilter": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ]
        },
        "netbox:index/getVlansVlan:getVlansVlan": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "groupId": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "role": {
                    "type": "integer"
                },
                "site": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                },
                "tagIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "tenant": {
                    "type": "integer"
                },
                "vid": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "description",
                "groupId",
                "name",
                "role",
                "site",
                "status",
                "tagIds",
                "tenant",
                "vid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "netbox:index/getVrfsFilter:getVrfsFilter": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ]
        },
        "netbox:index/getVrfsVrf:getVrfsVrf": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "rd": {
                    "type": "string"
                },
                "tenant": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "description",
                "id",
                "name",
                "rd",
                "tenant"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "netbox:ip/AddressNatOutsideAddress:AddressNatOutsideAddress": {
            "properties": {
                "addressFamily": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "ipAddress": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "addressFamily",
                        "id",
                        "ipAddress"
                    ]
                }
            }
        },
        "netbox:ip/getAddressesFilter:getAddressesFilter": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ]
        },
        "netbox:ip/getAddressesIpAddress:getAddressesIpAddress": {
            "properties": {
                "addressFamily": {
                    "type": "string"
                },
                "created": {
                    "type": "string"
                },
                "customFields": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    }
                },
                "description": {
                    "type": "string"
                },
                "dnsName": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "ipAddress": {
                    "type": "string"
                },
                "lastUpdated": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/netbox:ip/getAddressesIpAddressTag:getAddressesIpAddressTag"
                    }
                },
                "tenants": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/netbox:ip/getAddressesIpAddressTenant:getAddressesIpAddressTenant"
                    }
                }
            },
            "type": "object",
            "required": [
                "addressFamily",
                "created",
                "customFields",
                "description",
                "dnsName",
                "id",
                "ipAddress",
                "lastUpdated",
                "role",
                "status",
                "tags",
                "tenants"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "netbox:ip/getAddressesIpAddressTag:getAddressesIpAddressTag": {
            "properties": {
                "display": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "display",
                "id",
                "name",
                "slug"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "netbox:ip/getAddressesIpAddressTenant:getAddressesIpAddressTenant": {
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name",
                "slug"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "netbox:virtual/getMachinesFilter:getMachinesFilter": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ]
        },
        "netbox:virtual/getMachinesVm:getMachinesVm": {
            "properties": {
                "clusterId": {
                    "type": "integer"
                },
                "comments": {
                    "type": "string"
                },
                "configContext": {
                    "type": "string"
                },
                "customFields": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    }
                },
                "description": {
                    "type": "string"
                },
                "deviceId": {
                    "type": "integer"
                },
                "deviceName": {
                    "type": "string"
                },
                "diskSizeGb": {
                    "type": "integer"
                },
                "localContextData": {
                    "type": "string"
                },
                "memoryMb": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "platformId": {
                    "type": "integer"
                },
                "platformSlug": {
                    "type": "string"
                },
                "primaryIp": {
                    "type": "string"
                },
                "primaryIp4": {
                    "type": "string"
                },
                "primaryIp6": {
                    "type": "string"
                },
                "roleId": {
                    "type": "integer"
                },
                "siteId": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                },
                "tagIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "tenantId": {
                    "type": "integer"
                },
                "vcpus": {
                    "type": "number"
                },
                "vmId": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "clusterId",
                "comments",
                "configContext",
                "customFields",
                "description",
                "deviceId",
                "deviceName",
                "diskSizeGb",
                "localContextData",
                "memoryMb",
                "name",
                "platformId",
                "platformSlug",
                "primaryIp",
                "primaryIp4",
                "primaryIp6",
                "roleId",
                "siteId",
                "status",
                "tagIds",
                "tenantId",
                "vcpus",
                "vmId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        }
    },
    "provider": {
        "description": "The provider type for the netbox package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "allowInsecureHttps": {
                "type": "boolean",
                "description": "Flag to set whether to allow https with invalid certificates. Can be set via the `NETBOX_ALLOW_INSECURE_HTTPS`\nenvironment variable. Defaults to `false`.\n"
            },
            "apiToken": {
                "type": "string",
                "description": "Netbox API authentication token. Can be set via the `NETBOX_API_TOKEN` environment variable.\n"
            },
            "headers": {
                "type": "object",
                "additionalProperties": {
                    "$ref": "pulumi.json#/Any"
                },
                "description": "Set these header on all requests to Netbox. Can be set via the `NETBOX_HEADERS` environment variable.\n"
            },
            "requestTimeout": {
                "type": "integer",
                "description": "Netbox API HTTP request timeout in seconds. Can be set via the `NETBOX_REQUEST_TIMEOUT` environment variable.\n"
            },
            "serverUrl": {
                "type": "string",
                "description": "Location of Netbox server including scheme (http or https) and optional port. Can be set via the `NETBOX_SERVER_URL`\nenvironment variable.\n"
            },
            "skipVersionCheck": {
                "type": "boolean"
            },
            "stripTrailingSlashesFromUrl": {
                "type": "boolean",
                "description": "If true, strip trailing slashes from the `server_url` parameter and print a warning when doing so. Note that using\ntrailing slashes in the `server_url` parameter will usually lead to errors. Can be set via the\n`NETBOX_STRIP_TRAILING_SLASHES_FROM_URL` environment variable. Defaults to `true`.\n"
            }
        },
        "required": [
            "apiToken",
            "serverUrl"
        ],
        "inputProperties": {
            "allowInsecureHttps": {
                "type": "boolean",
                "description": "Flag to set whether to allow https with invalid certificates. Can be set via the `NETBOX_ALLOW_INSECURE_HTTPS`\nenvironment variable. Defaults to `false`.\n"
            },
            "apiToken": {
                "type": "string",
                "description": "Netbox API authentication token. Can be set via the `NETBOX_API_TOKEN` environment variable.\n"
            },
            "headers": {
                "type": "object",
                "additionalProperties": {
                    "$ref": "pulumi.json#/Any"
                },
                "description": "Set these header on all requests to Netbox. Can be set via the `NETBOX_HEADERS` environment variable.\n"
            },
            "requestTimeout": {
                "type": "integer",
                "description": "Netbox API HTTP request timeout in seconds. Can be set via the `NETBOX_REQUEST_TIMEOUT` environment variable.\n"
            },
            "serverUrl": {
                "type": "string",
                "description": "Location of Netbox server including scheme (http or https) and optional port. Can be set via the `NETBOX_SERVER_URL`\nenvironment variable.\n"
            },
            "skipVersionCheck": {
                "type": "boolean"
            },
            "stripTrailingSlashesFromUrl": {
                "type": "boolean",
                "description": "If true, strip trailing slashes from the `server_url` parameter and print a warning when doing so. Note that using\ntrailing slashes in the `server_url` parameter will usually lead to errors. Can be set via the\n`NETBOX_STRIP_TRAILING_SLASHES_FROM_URL` environment variable. Defaults to `true`.\n"
            }
        },
        "requiredInputs": [
            "apiToken",
            "serverUrl"
        ]
    },
    "resources": {
        "netbox:available/ip/address:Address": {
            "description": "Per [the docs](https://netbox.readthedocs.io/en/stable/models/ipam/ipaddress/):\n\n\u003e An IP address comprises a single host address (either IPv4 or IPv6) and its subnet mask. Its mask should match exactly how the IP address is configured on an interface in the real world.\n\u003e Like a prefix, an IP address can optionally be assigned to a VRF (otherwise, it will appear in the \"global\" table). IP addresses are automatically arranged under parent prefixes within their respective VRFs according to the IP hierarchya.\n\u003e\n\u003e Each IP address can also be assigned an operational status and a functional role. Statuses are hard-coded in NetBox and include the following:\n\u003e * Active\n\u003e * Reserved\n\u003e * Deprecated\n\u003e * DHCP\n\u003e * SLAAC (IPv6 Stateless Address Autoconfiguration)\n\nThis resource will retrieve the next available IP address from a given prefix or IP range (specified by ID)\n\n## Example Usage\n\n### Creating an IP in a prefix\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumi/netbox\";\nimport * as netbox from \"@pulumiverse/netbox\";\n\nconst testPrefix = netbox.getPrefix({\n    cidr: \"10.0.0.0/24\",\n});\nconst testAddress = new netbox.available.ip.Address(\"testAddress\", {prefixId: testPrefix.then(testPrefix =\u003e testPrefix.id)});\n```\n```python\nimport pulumi\nimport pulumi_netbox as netbox\n\ntest_prefix = netbox.get_prefix(cidr=\"10.0.0.0/24\")\ntest_address = netbox.available.ip.Address(\"testAddress\", prefix_id=test_prefix.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Netbox = Pulumi.Netbox;\nusing Netbox = Pulumiverse.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var testPrefix = Netbox.GetPrefix.Invoke(new()\n    {\n        Cidr = \"10.0.0.0/24\",\n    });\n\n    var testAddress = new Netbox.Available.Ip.Address(\"testAddress\", new()\n    {\n        PrefixId = testPrefix.Apply(getPrefixResult =\u003e getPrefixResult.Id),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox\"\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox/available\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttestPrefix, err := netbox.LookupPrefix(ctx, \u0026netbox.LookupPrefixArgs{\n\t\t\tCidr: pulumi.StringRef(\"10.0.0.0/24\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = available.NewAddress(ctx, \"testAddress\", \u0026available.AddressArgs{\n\t\t\tPrefixId: pulumi.Int(testPrefix.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.NetboxFunctions;\nimport com.pulumi.netbox.inputs.GetPrefixArgs;\nimport com.pulumi.netbox.available.Address;\nimport com.pulumi.netbox.available.AddressArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var testPrefix = NetboxFunctions.getPrefix(GetPrefixArgs.builder()\n            .cidr(\"10.0.0.0/24\")\n            .build());\n\n        var testAddress = new Address(\"testAddress\", AddressArgs.builder()\n            .prefixId(testPrefix.applyValue(getPrefixResult -\u003e getPrefixResult.id()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  testAddress:\n    type: netbox:available/ip:Address\n    properties:\n      prefixId: ${testPrefix.id}\nvariables:\n  testPrefix:\n    fn::invoke:\n      Function: netbox:getPrefix\n      Arguments:\n        cidr: 10.0.0.0/24\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Creating an IP in an IP range\n\u003c!--Start PulumiCodeChooser --\u003e\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.ip.IpFunctions;\nimport com.pulumi.netbox.ip.inputs.GetRangeArgs;\nimport com.pulumi.netbox.available.Address;\nimport com.pulumi.netbox.available.AddressArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var testRange = IpFunctions.getRange(GetRangeArgs.builder()\n            .startAddress(\"10.0.0.1/24\")\n            .endAddress(\"10.0.0.50/24\")\n            .build());\n\n        var testAddress = new Address(\"testAddress\", AddressArgs.builder()\n            .ipRangeId(testRange.applyValue(getRangeResult -\u003e getRangeResult.id()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  testAddress:\n    type: netbox:available/ip:Address\n    properties:\n      ipRangeId: ${testRange.id}\nvariables:\n  testRange:\n    fn::invoke:\n      Function: netbox:ip:getRange\n      Arguments:\n        startAddress: 10.0.0.1/24\n        endAddress: 10.0.0.50/24\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n",
            "properties": {
                "description": {
                    "type": "string"
                },
                "deviceInterfaceId": {
                    "type": "integer",
                    "description": "Conflicts with `interface_id` and `virtual_machine_interface_id`.\n"
                },
                "dnsName": {
                    "type": "string"
                },
                "interfaceId": {
                    "type": "integer",
                    "description": "Required when `object_type` is set.\n"
                },
                "ipAddress": {
                    "type": "string"
                },
                "ipRangeId": {
                    "type": "integer",
                    "description": "Exactly one of `prefix_id` or `ip_range_id` must be given.\n"
                },
                "objectType": {
                    "type": "string",
                    "description": "Valid values are `virtualization.vminterface` and `dcim.interface`. Required when `interface_id` is set.\n"
                },
                "prefixId": {
                    "type": "integer",
                    "description": "Exactly one of `prefix_id` or `ip_range_id` must be given.\n"
                },
                "role": {
                    "type": "string",
                    "description": "Valid values are `loopback`, `secondary`, `anycast`, `vip`, `vrrp`, `hsrp`, `glbp` and `carp`.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Valid values are `active`, `reserved`, `deprecated`, `dhcp` and `slaac`. Defaults to `active`.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tenantId": {
                    "type": "integer"
                },
                "virtualMachineInterfaceId": {
                    "type": "integer",
                    "description": "Conflicts with `interface_id` and `device_interface_id`.\n"
                },
                "vrfId": {
                    "type": "integer"
                }
            },
            "required": [
                "ipAddress"
            ],
            "inputProperties": {
                "description": {
                    "type": "string"
                },
                "deviceInterfaceId": {
                    "type": "integer",
                    "description": "Conflicts with `interface_id` and `virtual_machine_interface_id`.\n"
                },
                "dnsName": {
                    "type": "string"
                },
                "interfaceId": {
                    "type": "integer",
                    "description": "Required when `object_type` is set.\n"
                },
                "ipRangeId": {
                    "type": "integer",
                    "description": "Exactly one of `prefix_id` or `ip_range_id` must be given.\n"
                },
                "objectType": {
                    "type": "string",
                    "description": "Valid values are `virtualization.vminterface` and `dcim.interface`. Required when `interface_id` is set.\n"
                },
                "prefixId": {
                    "type": "integer",
                    "description": "Exactly one of `prefix_id` or `ip_range_id` must be given.\n"
                },
                "role": {
                    "type": "string",
                    "description": "Valid values are `loopback`, `secondary`, `anycast`, `vip`, `vrrp`, `hsrp`, `glbp` and `carp`.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Valid values are `active`, `reserved`, `deprecated`, `dhcp` and `slaac`. Defaults to `active`.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tenantId": {
                    "type": "integer"
                },
                "virtualMachineInterfaceId": {
                    "type": "integer",
                    "description": "Conflicts with `interface_id` and `device_interface_id`.\n"
                },
                "vrfId": {
                    "type": "integer"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Address resources.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "deviceInterfaceId": {
                        "type": "integer",
                        "description": "Conflicts with `interface_id` and `virtual_machine_interface_id`.\n"
                    },
                    "dnsName": {
                        "type": "string"
                    },
                    "interfaceId": {
                        "type": "integer",
                        "description": "Required when `object_type` is set.\n"
                    },
                    "ipAddress": {
                        "type": "string"
                    },
                    "ipRangeId": {
                        "type": "integer",
                        "description": "Exactly one of `prefix_id` or `ip_range_id` must be given.\n"
                    },
                    "objectType": {
                        "type": "string",
                        "description": "Valid values are `virtualization.vminterface` and `dcim.interface`. Required when `interface_id` is set.\n"
                    },
                    "prefixId": {
                        "type": "integer",
                        "description": "Exactly one of `prefix_id` or `ip_range_id` must be given.\n"
                    },
                    "role": {
                        "type": "string",
                        "description": "Valid values are `loopback`, `secondary`, `anycast`, `vip`, `vrrp`, `hsrp`, `glbp` and `carp`.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Valid values are `active`, `reserved`, `deprecated`, `dhcp` and `slaac`. Defaults to `active`.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "tenantId": {
                        "type": "integer"
                    },
                    "virtualMachineInterfaceId": {
                        "type": "integer",
                        "description": "Conflicts with `interface_id` and `device_interface_id`.\n"
                    },
                    "vrfId": {
                        "type": "integer"
                    }
                },
                "type": "object"
            }
        },
        "netbox:available/prefix:Prefix": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumi/netbox\";\nimport * as netbox from \"@pulumiverse/netbox\";\n\nconst testPrefix = netbox.getPrefix({\n    cidr: \"10.0.0.0/24\",\n});\nconst testAvailable_prefixPrefix = new netbox.available.Prefix(\"testAvailable/prefixPrefix\", {\n    parentPrefixId: testPrefix.then(testPrefix =\u003e testPrefix.id),\n    prefixLength: 25,\n    status: \"active\",\n});\n```\n```python\nimport pulumi\nimport pulumi_netbox as netbox\n\ntest_prefix = netbox.get_prefix(cidr=\"10.0.0.0/24\")\ntest_available_prefix_prefix = netbox.available.Prefix(\"testAvailable/prefixPrefix\",\n    parent_prefix_id=test_prefix.id,\n    prefix_length=25,\n    status=\"active\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Netbox = Pulumi.Netbox;\nusing Netbox = Pulumiverse.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var testPrefix = Netbox.GetPrefix.Invoke(new()\n    {\n        Cidr = \"10.0.0.0/24\",\n    });\n\n    var testAvailable_prefixPrefix = new Netbox.Available.Prefix(\"testAvailable/prefixPrefix\", new()\n    {\n        ParentPrefixId = testPrefix.Apply(getPrefixResult =\u003e getPrefixResult.Id),\n        PrefixLength = 25,\n        Status = \"active\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox\"\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox/available\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttestPrefix, err := netbox.LookupPrefix(ctx, \u0026netbox.LookupPrefixArgs{\n\t\t\tCidr: pulumi.StringRef(\"10.0.0.0/24\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = available.NewPrefix(ctx, \"testAvailable/prefixPrefix\", \u0026available.PrefixArgs{\n\t\t\tParentPrefixId: pulumi.Int(testPrefix.Id),\n\t\t\tPrefixLength:   pulumi.Int(25),\n\t\t\tStatus:         pulumi.String(\"active\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.NetboxFunctions;\nimport com.pulumi.netbox.inputs.GetPrefixArgs;\nimport com.pulumi.netbox.available.Prefix;\nimport com.pulumi.netbox.available.PrefixArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var testPrefix = NetboxFunctions.getPrefix(GetPrefixArgs.builder()\n            .cidr(\"10.0.0.0/24\")\n            .build());\n\n        var testAvailable_prefixPrefix = new Prefix(\"testAvailable/prefixPrefix\", PrefixArgs.builder()\n            .parentPrefixId(testPrefix.applyValue(getPrefixResult -\u003e getPrefixResult.id()))\n            .prefixLength(25)\n            .status(\"active\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  testAvailable/prefixPrefix:\n    type: netbox:available:Prefix\n    properties:\n      parentPrefixId: ${testPrefix.id}\n      prefixLength: 25\n      status: active\nvariables:\n  testPrefix:\n    fn::invoke:\n      Function: netbox:getPrefix\n      Arguments:\n        cidr: 10.0.0.0/24\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "description": {
                    "type": "string"
                },
                "isPool": {
                    "type": "boolean"
                },
                "markUtilized": {
                    "type": "boolean"
                },
                "parentPrefixId": {
                    "type": "integer"
                },
                "prefix": {
                    "type": "string"
                },
                "prefixLength": {
                    "type": "integer"
                },
                "roleId": {
                    "type": "integer"
                },
                "siteId": {
                    "type": "integer"
                },
                "status": {
                    "type": "string",
                    "description": "Valid values are `active`, `container`, `reserved` and `deprecated`.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tenantId": {
                    "type": "integer"
                },
                "vlanId": {
                    "type": "integer"
                },
                "vrfId": {
                    "type": "integer"
                }
            },
            "required": [
                "parentPrefixId",
                "prefix",
                "prefixLength",
                "status"
            ],
            "inputProperties": {
                "description": {
                    "type": "string"
                },
                "isPool": {
                    "type": "boolean"
                },
                "markUtilized": {
                    "type": "boolean"
                },
                "parentPrefixId": {
                    "type": "integer",
                    "willReplaceOnChanges": true
                },
                "prefixLength": {
                    "type": "integer",
                    "willReplaceOnChanges": true
                },
                "roleId": {
                    "type": "integer"
                },
                "siteId": {
                    "type": "integer"
                },
                "status": {
                    "type": "string",
                    "description": "Valid values are `active`, `container`, `reserved` and `deprecated`.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tenantId": {
                    "type": "integer"
                },
                "vlanId": {
                    "type": "integer"
                },
                "vrfId": {
                    "type": "integer"
                }
            },
            "requiredInputs": [
                "parentPrefixId",
                "prefixLength",
                "status"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Prefix resources.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "isPool": {
                        "type": "boolean"
                    },
                    "markUtilized": {
                        "type": "boolean"
                    },
                    "parentPrefixId": {
                        "type": "integer",
                        "willReplaceOnChanges": true
                    },
                    "prefix": {
                        "type": "string"
                    },
                    "prefixLength": {
                        "type": "integer",
                        "willReplaceOnChanges": true
                    },
                    "roleId": {
                        "type": "integer"
                    },
                    "siteId": {
                        "type": "integer"
                    },
                    "status": {
                        "type": "string",
                        "description": "Valid values are `active`, `container`, `reserved` and `deprecated`.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "tenantId": {
                        "type": "integer"
                    },
                    "vlanId": {
                        "type": "integer"
                    },
                    "vrfId": {
                        "type": "integer"
                    }
                },
                "type": "object"
            }
        },
        "netbox:circuit/provider:Provider": {
            "description": "From the [official documentation](https://docs.netbox.dev/en/stable/features/circuits/#providers):\n\n\u003e A circuit provider is any entity which provides some form of connectivity of among sites or organizations within a site. While this obviously includes carriers which offer Internet and private transit service, it might also include Internet exchange (IX) points and even organizations with whom you peer directly. Each circuit within NetBox must be assigned a provider and a circuit ID which is unique to that provider.\n\u003e\n\u003e Each provider may be assigned an autonomous system number (ASN), an account number, and contact information.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumiverse/netbox\";\n\nconst test = new netbox.circuit.Provider(\"test\", {});\n```\n```python\nimport pulumi\nimport pulumi_netbox as netbox\n\ntest = netbox.circuit.Provider(\"test\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Netbox = Pulumiverse.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = new Netbox.Circuit.Provider(\"test\");\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox/circuit\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := circuit.NewProvider(ctx, \"test\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.circuit.Provider;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new Provider(\"test\");\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: netbox:circuit:Provider\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "name": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                }
            },
            "required": [
                "name",
                "slug"
            ],
            "inputProperties": {
                "name": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Provider resources.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "netbox:circuit/termination:Termination": {
            "description": "From the [official documentation](https://docs.netbox.dev/en/stable/features/circuits/#circuit-terminations):\n\n\u003e The association of a circuit with a particular site and/or device is modeled separately as a circuit termination. A circuit may have up to two terminations, labeled A and Z. A single-termination circuit can be used when you don't know (or care) about the far end of a circuit (for example, an Internet access circuit which connects to a transit provider). A dual-termination circuit is useful for tracking circuits which connect two sites.\n\u003e\n\u003e Each circuit termination is attached to either a site or to a provider network. Site terminations may optionally be connected via a cable to a specific device interface or port within that site. Each termination must be assigned a port speed, and can optionally be assigned an upstream speed if it differs from the downstream speed (a common scenario with e.g. DOCSIS cable modems). Fields are also available to track cross-connect and patch panel details.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumiverse/netbox\";\n\nconst testSite = new netbox.Site(\"testSite\", {status: \"active\"});\nconst testProvider = new netbox.circuit.Provider(\"testProvider\", {});\nconst testType = new netbox.circuit.Type(\"testType\", {});\nconst testCircuit = new netbox.Circuit(\"testCircuit\", {\n    cid: \"%[1]s\",\n    status: \"active\",\n    providerId: testProvider.id,\n    typeId: testType.id,\n});\nconst testTermination = new netbox.circuit.Termination(\"testTermination\", {\n    circuitId: testCircuit.id,\n    termSide: \"A\",\n    siteId: testSite.id,\n    portSpeed: 100000,\n    upstreamSpeed: 50000,\n});\n```\n```python\nimport pulumi\nimport pulumi_netbox as netbox\n\ntest_site = netbox.Site(\"testSite\", status=\"active\")\ntest_provider = netbox.circuit.Provider(\"testProvider\")\ntest_type = netbox.circuit.Type(\"testType\")\ntest_circuit = netbox.Circuit(\"testCircuit\",\n    cid=\"%[1]s\",\n    status=\"active\",\n    provider_id=test_provider.id,\n    type_id=test_type.id)\ntest_termination = netbox.circuit.Termination(\"testTermination\",\n    circuit_id=test_circuit.id,\n    term_side=\"A\",\n    site_id=test_site.id,\n    port_speed=100000,\n    upstream_speed=50000)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Netbox = Pulumiverse.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var testSite = new Netbox.Site(\"testSite\", new()\n    {\n        Status = \"active\",\n    });\n\n    var testProvider = new Netbox.Circuit.Provider(\"testProvider\");\n\n    var testType = new Netbox.Circuit.Type(\"testType\");\n\n    var testCircuit = new Netbox.Circuit(\"testCircuit\", new()\n    {\n        Cid = \"%[1]s\",\n        Status = \"active\",\n        ProviderId = testProvider.Id,\n        TypeId = testType.Id,\n    });\n\n    var testTermination = new Netbox.Circuit.Termination(\"testTermination\", new()\n    {\n        CircuitId = testCircuit.Id,\n        TermSide = \"A\",\n        SiteId = testSite.Id,\n        PortSpeed = 100000,\n        UpstreamSpeed = 50000,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox\"\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox/circuit\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttestSite, err := netbox.NewSite(ctx, \"testSite\", \u0026netbox.SiteArgs{\n\t\t\tStatus: pulumi.String(\"active\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttestProvider, err := circuit.NewProvider(ctx, \"testProvider\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttestType, err := circuit.NewType(ctx, \"testType\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttestCircuit, err := netbox.NewCircuit(ctx, \"testCircuit\", \u0026netbox.CircuitArgs{\n\t\t\tCid:        pulumi.String(\"%[1]s\"),\n\t\t\tStatus:     pulumi.String(\"active\"),\n\t\t\tProviderId: testProvider.ID(),\n\t\t\tTypeId:     testType.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = circuit.NewTermination(ctx, \"testTermination\", \u0026circuit.TerminationArgs{\n\t\t\tCircuitId:     testCircuit.ID(),\n\t\t\tTermSide:      pulumi.String(\"A\"),\n\t\t\tSiteId:        testSite.ID(),\n\t\t\tPortSpeed:     pulumi.Int(100000),\n\t\t\tUpstreamSpeed: pulumi.Int(50000),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.Site;\nimport com.pulumi.netbox.SiteArgs;\nimport com.pulumi.netbox.circuit.Provider;\nimport com.pulumi.netbox.circuit.Type;\nimport com.pulumi.netbox.Circuit;\nimport com.pulumi.netbox.CircuitArgs;\nimport com.pulumi.netbox.circuit.Termination;\nimport com.pulumi.netbox.circuit.TerminationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var testSite = new Site(\"testSite\", SiteArgs.builder()\n            .status(\"active\")\n            .build());\n\n        var testProvider = new Provider(\"testProvider\");\n\n        var testType = new Type(\"testType\");\n\n        var testCircuit = new Circuit(\"testCircuit\", CircuitArgs.builder()\n            .cid(\"%[1]s\")\n            .status(\"active\")\n            .providerId(testProvider.id())\n            .typeId(testType.id())\n            .build());\n\n        var testTermination = new Termination(\"testTermination\", TerminationArgs.builder()\n            .circuitId(testCircuit.id())\n            .termSide(\"A\")\n            .siteId(testSite.id())\n            .portSpeed(100000)\n            .upstreamSpeed(50000)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  testSite:\n    type: netbox:Site\n    properties:\n      status: active\n  testProvider:\n    type: netbox:circuit:Provider\n  testType:\n    type: netbox:circuit:Type\n  testCircuit:\n    type: netbox:Circuit\n    properties:\n      cid: '%[1]s'\n      status: active\n      providerId: ${testProvider.id}\n      typeId: ${testType.id}\n  testTermination:\n    type: netbox:circuit:Termination\n    properties:\n      circuitId: ${testCircuit.id}\n      termSide: A\n      siteId: ${testSite.id}\n      portSpeed: 100000\n      upstreamSpeed: 50000\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "circuitId": {
                    "type": "integer"
                },
                "customFields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "portSpeed": {
                    "type": "integer"
                },
                "siteId": {
                    "type": "integer"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "termSide": {
                    "type": "string",
                    "description": "Valid values are `A` and `Z`.\n"
                },
                "upstreamSpeed": {
                    "type": "integer"
                }
            },
            "required": [
                "circuitId",
                "siteId",
                "termSide"
            ],
            "inputProperties": {
                "circuitId": {
                    "type": "integer"
                },
                "customFields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "portSpeed": {
                    "type": "integer"
                },
                "siteId": {
                    "type": "integer"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "termSide": {
                    "type": "string",
                    "description": "Valid values are `A` and `Z`.\n"
                },
                "upstreamSpeed": {
                    "type": "integer"
                }
            },
            "requiredInputs": [
                "circuitId",
                "siteId",
                "termSide"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Termination resources.\n",
                "properties": {
                    "circuitId": {
                        "type": "integer"
                    },
                    "customFields": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "portSpeed": {
                        "type": "integer"
                    },
                    "siteId": {
                        "type": "integer"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "termSide": {
                        "type": "string",
                        "description": "Valid values are `A` and `Z`.\n"
                    },
                    "upstreamSpeed": {
                        "type": "integer"
                    }
                },
                "type": "object"
            }
        },
        "netbox:circuit/type:Type": {
            "description": "From the [official documentation](https://docs.netbox.dev/en/stable/features/circuits/#circuit-types):\n\n\u003e Circuits are classified by functional type. These types are completely customizable, and are typically used to convey the type of service being delivered over a circuit.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumiverse/netbox\";\n\nconst test = new netbox.circuit.Type(\"test\", {});\n```\n```python\nimport pulumi\nimport pulumi_netbox as netbox\n\ntest = netbox.circuit.Type(\"test\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Netbox = Pulumiverse.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = new Netbox.Circuit.Type(\"test\");\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox/circuit\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := circuit.NewType(ctx, \"test\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.circuit.Type;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new Type(\"test\");\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: netbox:circuit:Type\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "name": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                }
            },
            "required": [
                "name",
                "slug"
            ],
            "inputProperties": {
                "name": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Type resources.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "netbox:cluster/group:Group": {
            "description": "From the [official documentation](https://docs.netbox.dev/en/stable/features/virtualization/#cluster-groups):\n\n\u003e Cluster groups may be created for the purpose of organizing clusters. The arrangement of clusters into groups is optional.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumiverse/netbox\";\n\nconst dcWest = new netbox.cluster.Group(\"dcWest\", {description: \"West Datacenter Cluster\"});\n```\n```python\nimport pulumi\nimport pulumi_netbox as netbox\n\ndc_west = netbox.cluster.Group(\"dcWest\", description=\"West Datacenter Cluster\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Netbox = Pulumiverse.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var dcWest = new Netbox.Cluster.Group(\"dcWest\", new()\n    {\n        Description = \"West Datacenter Cluster\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox/cluster\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := cluster.NewGroup(ctx, \"dcWest\", \u0026cluster.GroupArgs{\n\t\t\tDescription: pulumi.String(\"West Datacenter Cluster\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.cluster.Group;\nimport com.pulumi.netbox.cluster.GroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var dcWest = new Group(\"dcWest\", GroupArgs.builder()\n            .description(\"West Datacenter Cluster\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  dcWest:\n    type: netbox:cluster:Group\n    properties:\n      description: West Datacenter Cluster\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                }
            },
            "required": [
                "name",
                "slug"
            ],
            "inputProperties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Group resources.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "netbox:cluster/type:Type": {
            "description": "From the [official documentation](https://docs.netbox.dev/en/stable/features/virtualization/#cluster-types):\n\n\u003e A cluster type represents a technology or mechanism by which a cluster is formed. For example, you might create a cluster type named \"VMware vSphere\" for a locally hosted cluster or \"DigitalOcean NYC3\" for one hosted by a cloud provider.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumiverse/netbox\";\n\nconst vmwVsphere = new netbox.cluster.Type(\"vmwVsphere\", {});\n```\n```python\nimport pulumi\nimport pulumi_netbox as netbox\n\nvmw_vsphere = netbox.cluster.Type(\"vmwVsphere\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Netbox = Pulumiverse.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var vmwVsphere = new Netbox.Cluster.Type(\"vmwVsphere\");\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox/cluster\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := cluster.NewType(ctx, \"vmwVsphere\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.cluster.Type;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var vmwVsphere = new Type(\"vmwVsphere\");\n\n    }\n}\n```\n```yaml\nresources:\n  vmwVsphere:\n    type: netbox:cluster:Type\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "name": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                }
            },
            "required": [
                "name",
                "slug"
            ],
            "inputProperties": {
                "name": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Type resources.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "netbox:config/context:Context": {
            "description": "From the [official documentation](https://docs.netbox.dev/en/stable/models/extras/configcontext/):\n\n\u003e Context data is made available to devices and/or virtual machines based on their relationships to other objects in NetBox. For example, context data can be associated only with devices assigned to a particular site, or only to virtual machines in a certain cluster.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumiverse/netbox\";\n\nconst test = new netbox.config.Context(\"test\", {data: JSON.stringify({\n    testkey: \"testval\",\n})});\n```\n```python\nimport pulumi\nimport json\nimport pulumi_netbox as netbox\n\ntest = netbox.config.Context(\"test\", data=json.dumps({\n    \"testkey\": \"testval\",\n}))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.Json;\nusing Pulumi;\nusing Netbox = Pulumiverse.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = new Netbox.Config.Context(\"test\", new()\n    {\n        Data = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n        {\n            [\"testkey\"] = \"testval\",\n        }),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox/config\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttmpJSON0, err := json.Marshal(map[string]interface{}{\n\t\t\t\"testkey\": \"testval\",\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson0 := string(tmpJSON0)\n\t\t_, err = config.NewContext(ctx, \"test\", \u0026config.ContextArgs{\n\t\t\tData: pulumi.String(json0),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.config.Context;\nimport com.pulumi.netbox.config.ContextArgs;\nimport static com.pulumi.codegen.internal.Serialization.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new Context(\"test\", ContextArgs.builder()\n            .data(serializeJson(\n                jsonObject(\n                    jsonProperty(\"testkey\", \"testval\")\n                )))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: netbox:config:Context\n    properties:\n      data:\n        fn::toJSON:\n          testkey: testval\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "clusterGroups": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "clusterTypes": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "clusters": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "data": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "deviceTypes": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "locations": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "name": {
                    "type": "string"
                },
                "platforms": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "regions": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "siteGroups": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "sites": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tenantGroups": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "tenants": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "weight": {
                    "type": "integer",
                    "description": "Defaults to `1000`.\n"
                }
            },
            "required": [
                "data",
                "name"
            ],
            "inputProperties": {
                "clusterGroups": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "clusterTypes": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "clusters": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "data": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "deviceTypes": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "locations": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "name": {
                    "type": "string"
                },
                "platforms": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "regions": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "siteGroups": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "sites": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tenantGroups": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "tenants": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "weight": {
                    "type": "integer",
                    "description": "Defaults to `1000`.\n"
                }
            },
            "requiredInputs": [
                "data"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Context resources.\n",
                "properties": {
                    "clusterGroups": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    },
                    "clusterTypes": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    },
                    "clusters": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    },
                    "data": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "deviceTypes": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    },
                    "locations": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "platforms": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    },
                    "regions": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    },
                    "roles": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    },
                    "siteGroups": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    },
                    "sites": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "tenantGroups": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    },
                    "tenants": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    },
                    "weight": {
                        "type": "integer",
                        "description": "Defaults to `1000`.\n"
                    }
                },
                "type": "object"
            }
        },
        "netbox:config/template:Template": {
            "description": "From the [official documentation](https://docs.netbox.dev/en/stable/models/extras/configtemplate/):\n\n\u003e Configuration templates can be used to render device configurations from context data. Templates are written in the Jinja2 language and can be associated with devices roles, platforms, and/or individual devices.\n\n\u003e Context data is made available to devices and/or virtual machines based on their relationships to other objects in NetBox. For example, context data can be associated only with devices assigned to a particular site, or only to virtual machines in a certain cluster.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumiverse/netbox\";\n\nconst test = new netbox.config.Template(\"test\", {\n    description: \"test description\",\n    templateCode: \"hostname {{ name }}\",\n    environmentParams: JSON.stringify({\n        name: \"my-hostname\",\n    }),\n});\n```\n```python\nimport pulumi\nimport json\nimport pulumi_netbox as netbox\n\ntest = netbox.config.Template(\"test\",\n    description=\"test description\",\n    template_code=\"hostname {{ name }}\",\n    environment_params=json.dumps({\n        \"name\": \"my-hostname\",\n    }))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.Json;\nusing Pulumi;\nusing Netbox = Pulumiverse.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = new Netbox.Config.Template(\"test\", new()\n    {\n        Description = \"test description\",\n        TemplateCode = \"hostname {{ name }}\",\n        EnvironmentParams = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n        {\n            [\"name\"] = \"my-hostname\",\n        }),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox/config\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttmpJSON0, err := json.Marshal(map[string]interface{}{\n\t\t\t\"name\": \"my-hostname\",\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson0 := string(tmpJSON0)\n\t\t_, err = config.NewTemplate(ctx, \"test\", \u0026config.TemplateArgs{\n\t\t\tDescription:       pulumi.String(\"test description\"),\n\t\t\tTemplateCode:      pulumi.String(\"hostname {{ name }}\"),\n\t\t\tEnvironmentParams: pulumi.String(json0),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.config.Template;\nimport com.pulumi.netbox.config.TemplateArgs;\nimport static com.pulumi.codegen.internal.Serialization.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new Template(\"test\", TemplateArgs.builder()\n            .description(\"test description\")\n            .templateCode(\"hostname {{ name }}\")\n            .environmentParams(serializeJson(\n                jsonObject(\n                    jsonProperty(\"name\", \"my-hostname\")\n                )))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: netbox:config:Template\n    properties:\n      description: test description\n      templateCode: hostname {{ name }}\n      environmentParams:\n        fn::toJSON:\n          name: my-hostname\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "description": {
                    "type": "string"
                },
                "environmentParams": {
                    "type": "string",
                    "description": "Defaults to `{}`.\n"
                },
                "name": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "templateCode": {
                    "type": "string"
                }
            },
            "required": [
                "name",
                "templateCode"
            ],
            "inputProperties": {
                "description": {
                    "type": "string"
                },
                "environmentParams": {
                    "type": "string",
                    "description": "Defaults to `{}`.\n"
                },
                "name": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "templateCode": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "templateCode"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Template resources.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "environmentParams": {
                        "type": "string",
                        "description": "Defaults to `{}`.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "templateCode": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "netbox:contact/assignment:Assignment": {
            "description": "From the [official documentation](https://docs.netbox.dev/en/stable/features/contacts#contactassignments_1):\n\n\u003e Much like tenancy, contact assignment enables you to track ownership of resources modeled in NetBox.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumiverse/netbox\";\n\nconst testContact = new netbox.Contact(\"testContact\", {});\nconst testRole = new netbox.contact.Role(\"testRole\", {});\n// Assumes that a device with id 123 exists\nconst testAssignment = new netbox.contact.Assignment(\"testAssignment\", {\n    contentType: \"dcim.device\",\n    objectId: 123,\n    contactId: testContact.id,\n    roleId: testRole.id,\n    priority: \"primary\",\n});\n```\n```python\nimport pulumi\nimport pulumi_netbox as netbox\n\ntest_contact = netbox.Contact(\"testContact\")\ntest_role = netbox.contact.Role(\"testRole\")\n# Assumes that a device with id 123 exists\ntest_assignment = netbox.contact.Assignment(\"testAssignment\",\n    content_type=\"dcim.device\",\n    object_id=123,\n    contact_id=test_contact.id,\n    role_id=test_role.id,\n    priority=\"primary\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Netbox = Pulumiverse.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var testContact = new Netbox.Contact(\"testContact\");\n\n    var testRole = new Netbox.Contact.Role(\"testRole\");\n\n    // Assumes that a device with id 123 exists\n    var testAssignment = new Netbox.Contact.Assignment(\"testAssignment\", new()\n    {\n        ContentType = \"dcim.device\",\n        ObjectId = 123,\n        ContactId = testContact.Id,\n        RoleId = testRole.Id,\n        Priority = \"primary\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox\"\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox/contact\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttestContact, err := netbox.NewContact(ctx, \"testContact\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttestRole, err := contact.NewRole(ctx, \"testRole\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Assumes that a device with id 123 exists\n\t\t_, err = contact.NewAssignment(ctx, \"testAssignment\", \u0026contact.AssignmentArgs{\n\t\t\tContentType: pulumi.String(\"dcim.device\"),\n\t\t\tObjectId:    pulumi.Int(123),\n\t\t\tContactId:   testContact.ID(),\n\t\t\tRoleId:      testRole.ID(),\n\t\t\tPriority:    pulumi.String(\"primary\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.Contact;\nimport com.pulumi.netbox.contact.Role;\nimport com.pulumi.netbox.contact.Assignment;\nimport com.pulumi.netbox.contact.AssignmentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var testContact = new Contact(\"testContact\");\n\n        var testRole = new Role(\"testRole\");\n\n        // Assumes that a device with id 123 exists\n        var testAssignment = new Assignment(\"testAssignment\", AssignmentArgs.builder()\n            .contentType(\"dcim.device\")\n            .objectId(123)\n            .contactId(testContact.id())\n            .roleId(testRole.id())\n            .priority(\"primary\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  testContact:\n    type: netbox:Contact\n  testRole:\n    type: netbox:contact:Role\n  # Assumes that a device with id 123 exists\n  testAssignment:\n    type: netbox:contact:Assignment\n    properties:\n      contentType: dcim.device\n      objectId: 123\n      contactId: ${testContact.id}\n      roleId: ${testRole.id}\n      priority: primary\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "contactId": {
                    "type": "integer"
                },
                "contentType": {
                    "type": "string"
                },
                "objectId": {
                    "type": "integer"
                },
                "priority": {
                    "type": "string",
                    "description": "Valid values are `primary`, `secondary`, `tertiary` and `inactive`.\n"
                },
                "roleId": {
                    "type": "integer"
                }
            },
            "required": [
                "contactId",
                "contentType",
                "objectId",
                "roleId"
            ],
            "inputProperties": {
                "contactId": {
                    "type": "integer"
                },
                "contentType": {
                    "type": "string"
                },
                "objectId": {
                    "type": "integer"
                },
                "priority": {
                    "type": "string",
                    "description": "Valid values are `primary`, `secondary`, `tertiary` and `inactive`.\n"
                },
                "roleId": {
                    "type": "integer"
                }
            },
            "requiredInputs": [
                "contactId",
                "contentType",
                "objectId",
                "roleId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Assignment resources.\n",
                "properties": {
                    "contactId": {
                        "type": "integer"
                    },
                    "contentType": {
                        "type": "string"
                    },
                    "objectId": {
                        "type": "integer"
                    },
                    "priority": {
                        "type": "string",
                        "description": "Valid values are `primary`, `secondary`, `tertiary` and `inactive`.\n"
                    },
                    "roleId": {
                        "type": "integer"
                    }
                },
                "type": "object"
            }
        },
        "netbox:contact/group:Group": {
            "description": "From the [official documentation](https://docs.netbox.dev/en/stable/features/contacts/#contact-groups):\n\n\u003e Contacts can be grouped arbitrarily into a recursive hierarchy, and a contact can be assigned to a group at any level within the hierarchy.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumiverse/netbox\";\n\nconst test = new netbox.contact.Group(\"test\", {});\n```\n```python\nimport pulumi\nimport pulumi_netbox as netbox\n\ntest = netbox.contact.Group(\"test\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Netbox = Pulumiverse.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = new Netbox.Contact.Group(\"test\");\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox/contact\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := contact.NewGroup(ctx, \"test\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.contact.Group;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new Group(\"test\");\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: netbox:contact:Group\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "parentId": {
                    "type": "integer"
                },
                "slug": {
                    "type": "string"
                }
            },
            "required": [
                "name",
                "slug"
            ],
            "inputProperties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "parentId": {
                    "type": "integer"
                },
                "slug": {
                    "type": "string"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Group resources.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "parentId": {
                        "type": "integer"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "netbox:contact/role:Role": {
            "description": "From the [official documentation](https://docs.netbox.dev/en/stable/features/contacts/#contactroles):\n\n\u003e A contact role defines the relationship of a contact to an assigned object. For example, you might define roles for administrative, operational, and emergency contacts\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumiverse/netbox\";\n\nconst test = new netbox.contact.Role(\"test\", {});\n```\n```python\nimport pulumi\nimport pulumi_netbox as netbox\n\ntest = netbox.contact.Role(\"test\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Netbox = Pulumiverse.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = new Netbox.Contact.Role(\"test\");\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox/contact\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := contact.NewRole(ctx, \"test\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.contact.Role;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new Role(\"test\");\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: netbox:contact:Role\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "name": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                }
            },
            "required": [
                "name",
                "slug"
            ],
            "inputProperties": {
                "name": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Role resources.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "netbox:custom/field/choice/set:Set": {
            "description": "From the [official documentation](https://docs.netbox.dev/en/stable/models/extras/customfieldchoiceset/):\n\nSingle- and multi-selection custom fields must define a set of valid choices from which the user may choose when defining the field value. These choices are defined as sets that may be reused among multiple custom fields.\n\nA choice set must define a base choice set and/or a set of arbitrary extra choices.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumiverse/netbox\";\n\nconst test = new netbox.custom.field.choice.Set(\"test\", {\n    description: \"Description\",\n    extraChoices: [\n        \"choice1\",\n        \"label1\",\n        \"choice2\",\n        \"choice2\",\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_netbox as netbox\n\ntest = netbox.custom.field.choice.Set(\"test\",\n    description=\"Description\",\n    extra_choices=[\n        \"choice1\",\n        \"label1\",\n        \"choice2\",\n        \"choice2\",\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Netbox = Pulumiverse.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = new Netbox.Custom.Field.Choice.Set(\"test\", new()\n    {\n        Description = \"Description\",\n        ExtraChoices = new[]\n        {\n            \"choice1\",\n            \"label1\",\n            \"choice2\",\n            \"choice2\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox/custom\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := custom.NewSet(ctx, \"test\", \u0026custom.SetArgs{\n\t\t\tDescription: pulumi.String(\"Description\"),\n\t\t\tExtraChoices: pulumi.StringArrayArray{\n\t\t\t\tpulumi.StringArray(\"choice1\"),\n\t\t\t\tpulumi.StringArray(\"label1\"),\n\t\t\t\tpulumi.StringArray(\"choice2\"),\n\t\t\t\tpulumi.StringArray(\"choice2\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.custom.Set;\nimport com.pulumi.netbox.custom.SetArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new Set(\"test\", SetArgs.builder()\n            .description(\"Description\")\n            .extraChoices(            \n                \"choice1\",\n                \"label1\",\n                \"choice2\",\n                \"choice2\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: netbox:custom/field/choice:Set\n    properties:\n      description: Description\n      extraChoices:\n        - choice1\n        - label1\n        - choice2\n        - choice2\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "baseChoices": {
                    "type": "string",
                    "description": "Valid values are `IATA`, `ISO_3166` and `UN_LOCODE`. At least one of `base_choices` or `extra_choices` must be given.\n"
                },
                "customFields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "extraChoices": {
                    "type": "array",
                    "items": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "description": "This length of the inner lists must be exactly two, where the first value is the value of a choice and the second value is the label of the choice. At least one of `base_choices` or `extra_choices` must be given.\n"
                },
                "name": {
                    "type": "string"
                },
                "orderAlphabetically": {
                    "type": "boolean",
                    "description": "experimental. Defaults to `false`.\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "baseChoices": {
                    "type": "string",
                    "description": "Valid values are `IATA`, `ISO_3166` and `UN_LOCODE`. At least one of `base_choices` or `extra_choices` must be given.\n"
                },
                "customFields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "extraChoices": {
                    "type": "array",
                    "items": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "description": "This length of the inner lists must be exactly two, where the first value is the value of a choice and the second value is the label of the choice. At least one of `base_choices` or `extra_choices` must be given.\n"
                },
                "name": {
                    "type": "string"
                },
                "orderAlphabetically": {
                    "type": "boolean",
                    "description": "experimental. Defaults to `false`.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Set resources.\n",
                "properties": {
                    "baseChoices": {
                        "type": "string",
                        "description": "Valid values are `IATA`, `ISO_3166` and `UN_LOCODE`. At least one of `base_choices` or `extra_choices` must be given.\n"
                    },
                    "customFields": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "extraChoices": {
                        "type": "array",
                        "items": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "description": "This length of the inner lists must be exactly two, where the first value is the value of a choice and the second value is the label of the choice. At least one of `base_choices` or `extra_choices` must be given.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "orderAlphabetically": {
                        "type": "boolean",
                        "description": "experimental. Defaults to `false`.\n"
                    }
                },
                "type": "object"
            }
        },
        "netbox:custom/field:Field": {
            "description": "From the [official documentation](https://docs.netbox.dev/en/stable/customization/custom-fields/#custom-fields):\n\n\u003e Each model in NetBox is represented in the database as a discrete table, and each attribute of a model exists as a column within its table. For example, sites are stored in the dcim_site table, which has columns named name, facility, physical_address, and so on. As new attributes are added to objects throughout the development of NetBox, tables are expanded to include new rows.\n\u003e\n\u003e However, some users might want to store additional object attributes that are somewhat esoteric in nature, and that would not make sense to include in the core NetBox database schema. For instance, suppose your organization needs to associate each device with a ticket number correlating it with an internal support system record. This is certainly a legitimate use for NetBox, but it's not a common enough need to warrant including a field for every NetBox installation. Instead, you can create a custom field to hold this data.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumiverse/netbox\";\n\nconst test = new netbox.custom.Field(\"test\", {\n    contentTypes: [\"virtualization.vminterface\"],\n    type: \"text\",\n    validationRegex: \"^.*$\",\n    weight: 100,\n});\n```\n```python\nimport pulumi\nimport pulumi_netbox as netbox\n\ntest = netbox.custom.Field(\"test\",\n    content_types=[\"virtualization.vminterface\"],\n    type=\"text\",\n    validation_regex=\"^.*$\",\n    weight=100)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Netbox = Pulumiverse.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = new Netbox.Custom.Field(\"test\", new()\n    {\n        ContentTypes = new[]\n        {\n            \"virtualization.vminterface\",\n        },\n        Type = \"text\",\n        ValidationRegex = \"^.*$\",\n        Weight = 100,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox/custom\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := custom.NewField(ctx, \"test\", \u0026custom.FieldArgs{\n\t\t\tContentTypes: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"virtualization.vminterface\"),\n\t\t\t},\n\t\t\tType:            pulumi.String(\"text\"),\n\t\t\tValidationRegex: pulumi.String(\"^.*$\"),\n\t\t\tWeight:          pulumi.Int(100),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.custom.Field;\nimport com.pulumi.netbox.custom.FieldArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new Field(\"test\", FieldArgs.builder()\n            .contentTypes(\"virtualization.vminterface\")\n            .type(\"text\")\n            .validationRegex(\"^.*$\")\n            .weight(100)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: netbox:custom:Field\n    properties:\n      contentTypes:\n        - virtualization.vminterface\n      type: text\n      validationRegex: ^.*$\n      weight: 100\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "choiceSetId": {
                    "type": "integer"
                },
                "contentTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "groupName": {
                    "type": "string"
                },
                "label": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "required": {
                    "type": "boolean"
                },
                "type": {
                    "type": "string"
                },
                "validationMaximum": {
                    "type": "integer"
                },
                "validationMinimum": {
                    "type": "integer"
                },
                "validationRegex": {
                    "type": "string"
                },
                "weight": {
                    "type": "integer"
                }
            },
            "required": [
                "contentTypes",
                "name",
                "type",
                "weight"
            ],
            "inputProperties": {
                "choiceSetId": {
                    "type": "integer"
                },
                "contentTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "default": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "groupName": {
                    "type": "string"
                },
                "label": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "required": {
                    "type": "boolean"
                },
                "type": {
                    "type": "string"
                },
                "validationMaximum": {
                    "type": "integer"
                },
                "validationMinimum": {
                    "type": "integer"
                },
                "validationRegex": {
                    "type": "string"
                },
                "weight": {
                    "type": "integer"
                }
            },
            "requiredInputs": [
                "contentTypes",
                "type",
                "weight"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Field resources.\n",
                "properties": {
                    "choiceSetId": {
                        "type": "integer"
                    },
                    "contentTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "default": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "groupName": {
                        "type": "string"
                    },
                    "label": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "required": {
                        "type": "boolean"
                    },
                    "type": {
                        "type": "string"
                    },
                    "validationMaximum": {
                        "type": "integer"
                    },
                    "validationMinimum": {
                        "type": "integer"
                    },
                    "validationRegex": {
                        "type": "string"
                    },
                    "weight": {
                        "type": "integer"
                    }
                },
                "type": "object"
            }
        },
        "netbox:device/console/port:Port": {
            "description": "From the [official documentation](https://docs.netbox.dev/en/stable/models/dcim/consoleport/):\n\n\u003e A console port provides connectivity to the physical console of a device. These are typically used for temporary access by someone who is physically near the device, or for remote out-of-band access provided via a networked console server.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumiverse/netbox\";\n\n// Note that some terraform code is not included in the example for brevity\nconst testDevice = new netbox.Device(\"testDevice\", {\n    deviceTypeId: netbox_device_type.test.id,\n    roleId: netbox_device_role.test.id,\n    siteId: netbox_site.test.id,\n});\nconst testPort = new netbox.device.console.Port(\"testPort\", {\n    deviceId: testDevice.id,\n    type: \"de-9\",\n    speed: 1200,\n    markConnected: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_netbox as netbox\n\n# Note that some terraform code is not included in the example for brevity\ntest_device = netbox.Device(\"testDevice\",\n    device_type_id=netbox_device_type[\"test\"][\"id\"],\n    role_id=netbox_device_role[\"test\"][\"id\"],\n    site_id=netbox_site[\"test\"][\"id\"])\ntest_port = netbox.device.console.Port(\"testPort\",\n    device_id=test_device.id,\n    type=\"de-9\",\n    speed=1200,\n    mark_connected=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Netbox = Pulumiverse.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Note that some terraform code is not included in the example for brevity\n    var testDevice = new Netbox.Device(\"testDevice\", new()\n    {\n        DeviceTypeId = netbox_device_type.Test.Id,\n        RoleId = netbox_device_role.Test.Id,\n        SiteId = netbox_site.Test.Id,\n    });\n\n    var testPort = new Netbox.Device.Console.Port(\"testPort\", new()\n    {\n        DeviceId = testDevice.Id,\n        Type = \"de-9\",\n        Speed = 1200,\n        MarkConnected = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox\"\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox/device\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Note that some terraform code is not included in the example for brevity\n\t\ttestDevice, err := netbox.NewDevice(ctx, \"testDevice\", \u0026netbox.DeviceArgs{\n\t\t\tDeviceTypeId: pulumi.Any(netbox_device_type.Test.Id),\n\t\t\tRoleId:       pulumi.Any(netbox_device_role.Test.Id),\n\t\t\tSiteId:       pulumi.Any(netbox_site.Test.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = device.NewPort(ctx, \"testPort\", \u0026device.PortArgs{\n\t\t\tDeviceId:      testDevice.ID(),\n\t\t\tType:          pulumi.String(\"de-9\"),\n\t\t\tSpeed:         pulumi.Int(1200),\n\t\t\tMarkConnected: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.Device;\nimport com.pulumi.netbox.DeviceArgs;\nimport com.pulumi.netbox.device.Port;\nimport com.pulumi.netbox.device.PortArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Note that some terraform code is not included in the example for brevity\n        var testDevice = new Device(\"testDevice\", DeviceArgs.builder()\n            .deviceTypeId(netbox_device_type.test().id())\n            .roleId(netbox_device_role.test().id())\n            .siteId(netbox_site.test().id())\n            .build());\n\n        var testPort = new Port(\"testPort\", PortArgs.builder()\n            .deviceId(testDevice.id())\n            .type(\"de-9\")\n            .speed(1200)\n            .markConnected(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Note that some terraform code is not included in the example for brevity\n  testDevice:\n    type: netbox:Device\n    properties:\n      deviceTypeId: ${netbox_device_type.test.id}\n      roleId: ${netbox_device_role.test.id}\n      siteId: ${netbox_site.test.id}\n  testPort:\n    type: netbox:device/console:Port\n    properties:\n      deviceId: ${testDevice.id}\n      type: de-9\n      speed: 1200\n      markConnected: true\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "customFields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "deviceId": {
                    "type": "integer"
                },
                "label": {
                    "type": "string"
                },
                "markConnected": {
                    "type": "boolean",
                    "description": "Defaults to `false`.\n"
                },
                "moduleId": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "speed": {
                    "type": "integer",
                    "description": "One of [1200, 2400, 4800, 9600, 19200, 38400, 57600, 115200].\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "type": {
                    "type": "string",
                    "description": "One of [de-9, db-25, rj-11, rj-12, rj-45, mini-din-8, usb-a, usb-b, usb-c, usb-mini-a, usb-mini-b, usb-micro-a, usb-micro-b, usb-micro-ab, other].\n"
                }
            },
            "required": [
                "deviceId",
                "name"
            ],
            "inputProperties": {
                "customFields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "deviceId": {
                    "type": "integer"
                },
                "label": {
                    "type": "string"
                },
                "markConnected": {
                    "type": "boolean",
                    "description": "Defaults to `false`.\n"
                },
                "moduleId": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "speed": {
                    "type": "integer",
                    "description": "One of [1200, 2400, 4800, 9600, 19200, 38400, 57600, 115200].\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "type": {
                    "type": "string",
                    "description": "One of [de-9, db-25, rj-11, rj-12, rj-45, mini-din-8, usb-a, usb-b, usb-c, usb-mini-a, usb-mini-b, usb-micro-a, usb-micro-b, usb-micro-ab, other].\n"
                }
            },
            "requiredInputs": [
                "deviceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Port resources.\n",
                "properties": {
                    "customFields": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "deviceId": {
                        "type": "integer"
                    },
                    "label": {
                        "type": "string"
                    },
                    "markConnected": {
                        "type": "boolean",
                        "description": "Defaults to `false`.\n"
                    },
                    "moduleId": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "speed": {
                        "type": "integer",
                        "description": "One of [1200, 2400, 4800, 9600, 19200, 38400, 57600, 115200].\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "type": {
                        "type": "string",
                        "description": "One of [de-9, db-25, rj-11, rj-12, rj-45, mini-din-8, usb-a, usb-b, usb-c, usb-mini-a, usb-mini-b, usb-micro-a, usb-micro-b, usb-micro-ab, other].\n"
                    }
                },
                "type": "object"
            }
        },
        "netbox:device/console/server/port:Port": {
            "description": "From the [official documentation](https://docs.netbox.dev/en/stable/models/dcim/consoleserverport/):\n\n\u003e A console server is a device which provides remote access to the local consoles of connected devices. They are typically used to provide remote out-of-band access to network devices, and generally connect to console ports.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumiverse/netbox\";\n\n// Note that some terraform code is not included in the example for brevity\nconst testDevice = new netbox.Device(\"testDevice\", {\n    deviceTypeId: netbox_device_type.test.id,\n    roleId: netbox_device_role.test.id,\n    siteId: netbox_site.test.id,\n});\nconst testPort = new netbox.device.console.server.Port(\"testPort\", {\n    deviceId: testDevice.id,\n    type: \"de-9\",\n    speed: 1200,\n    markConnected: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_netbox as netbox\n\n# Note that some terraform code is not included in the example for brevity\ntest_device = netbox.Device(\"testDevice\",\n    device_type_id=netbox_device_type[\"test\"][\"id\"],\n    role_id=netbox_device_role[\"test\"][\"id\"],\n    site_id=netbox_site[\"test\"][\"id\"])\ntest_port = netbox.device.console.server.Port(\"testPort\",\n    device_id=test_device.id,\n    type=\"de-9\",\n    speed=1200,\n    mark_connected=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Netbox = Pulumiverse.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Note that some terraform code is not included in the example for brevity\n    var testDevice = new Netbox.Device(\"testDevice\", new()\n    {\n        DeviceTypeId = netbox_device_type.Test.Id,\n        RoleId = netbox_device_role.Test.Id,\n        SiteId = netbox_site.Test.Id,\n    });\n\n    var testPort = new Netbox.Device.Console.Server.Port(\"testPort\", new()\n    {\n        DeviceId = testDevice.Id,\n        Type = \"de-9\",\n        Speed = 1200,\n        MarkConnected = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox\"\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox/device\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Note that some terraform code is not included in the example for brevity\n\t\ttestDevice, err := netbox.NewDevice(ctx, \"testDevice\", \u0026netbox.DeviceArgs{\n\t\t\tDeviceTypeId: pulumi.Any(netbox_device_type.Test.Id),\n\t\t\tRoleId:       pulumi.Any(netbox_device_role.Test.Id),\n\t\t\tSiteId:       pulumi.Any(netbox_site.Test.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = device.NewPort(ctx, \"testPort\", \u0026device.PortArgs{\n\t\t\tDeviceId:      testDevice.ID(),\n\t\t\tType:          pulumi.String(\"de-9\"),\n\t\t\tSpeed:         pulumi.Int(1200),\n\t\t\tMarkConnected: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.Device;\nimport com.pulumi.netbox.DeviceArgs;\nimport com.pulumi.netbox.device.Port;\nimport com.pulumi.netbox.device.PortArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Note that some terraform code is not included in the example for brevity\n        var testDevice = new Device(\"testDevice\", DeviceArgs.builder()\n            .deviceTypeId(netbox_device_type.test().id())\n            .roleId(netbox_device_role.test().id())\n            .siteId(netbox_site.test().id())\n            .build());\n\n        var testPort = new Port(\"testPort\", PortArgs.builder()\n            .deviceId(testDevice.id())\n            .type(\"de-9\")\n            .speed(1200)\n            .markConnected(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Note that some terraform code is not included in the example for brevity\n  testDevice:\n    type: netbox:Device\n    properties:\n      deviceTypeId: ${netbox_device_type.test.id}\n      roleId: ${netbox_device_role.test.id}\n      siteId: ${netbox_site.test.id}\n  testPort:\n    type: netbox:device/console/server:Port\n    properties:\n      deviceId: ${testDevice.id}\n      type: de-9\n      speed: 1200\n      markConnected: true\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "customFields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "deviceId": {
                    "type": "integer"
                },
                "label": {
                    "type": "string"
                },
                "markConnected": {
                    "type": "boolean",
                    "description": "Defaults to `false`.\n"
                },
                "moduleId": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "speed": {
                    "type": "integer",
                    "description": "One of [1200, 2400, 4800, 9600, 19200, 38400, 57600, 115200].\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "type": {
                    "type": "string",
                    "description": "One of [de-9, db-25, rj-11, rj-12, rj-45, mini-din-8, usb-a, usb-b, usb-c, usb-mini-a, usb-mini-b, usb-micro-a, usb-micro-b, usb-micro-ab, other].\n"
                }
            },
            "required": [
                "deviceId",
                "name"
            ],
            "inputProperties": {
                "customFields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "deviceId": {
                    "type": "integer"
                },
                "label": {
                    "type": "string"
                },
                "markConnected": {
                    "type": "boolean",
                    "description": "Defaults to `false`.\n"
                },
                "moduleId": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "speed": {
                    "type": "integer",
                    "description": "One of [1200, 2400, 4800, 9600, 19200, 38400, 57600, 115200].\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "type": {
                    "type": "string",
                    "description": "One of [de-9, db-25, rj-11, rj-12, rj-45, mini-din-8, usb-a, usb-b, usb-c, usb-mini-a, usb-mini-b, usb-micro-a, usb-micro-b, usb-micro-ab, other].\n"
                }
            },
            "requiredInputs": [
                "deviceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Port resources.\n",
                "properties": {
                    "customFields": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "deviceId": {
                        "type": "integer"
                    },
                    "label": {
                        "type": "string"
                    },
                    "markConnected": {
                        "type": "boolean",
                        "description": "Defaults to `false`.\n"
                    },
                    "moduleId": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "speed": {
                        "type": "integer",
                        "description": "One of [1200, 2400, 4800, 9600, 19200, 38400, 57600, 115200].\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "type": {
                        "type": "string",
                        "description": "One of [de-9, db-25, rj-11, rj-12, rj-45, mini-din-8, usb-a, usb-b, usb-c, usb-mini-a, usb-mini-b, usb-micro-a, usb-micro-b, usb-micro-ab, other].\n"
                    }
                },
                "type": "object"
            }
        },
        "netbox:device/front/port:Port": {
            "description": "From the [official documentation](https://docs.netbox.dev/en/stable/models/dcim/frontport/):\n\n\u003e Front ports are pass-through ports which represent physical cable connections that comprise part of a longer path. For example, the ports on the front face of a UTP patch panel would be modeled in NetBox as front ports. Each port is assigned a physical type, and must be mapped to a specific rear port on the same device. A single rear port may be mapped to multiple front ports, using numeric positions to annotate the specific alignment of each.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumiverse/netbox\";\n\n// Note that some terraform code is not included in the example for brevity\nconst testDevice = new netbox.Device(\"testDevice\", {\n    deviceTypeId: netbox_device_type.test.id,\n    roleId: netbox_device_role.test.id,\n    siteId: netbox_site.test.id,\n});\nconst testPort = new netbox.device.rear.Port(\"testPort\", {\n    deviceId: testDevice.id,\n    type: \"8p8c\",\n    positions: 2,\n    markConnected: true,\n});\nconst testDevice_front_portPort = new netbox.device.front.Port(\"testDevice/front/portPort\", {\n    deviceId: testDevice.id,\n    type: \"8p8c\",\n    rearPortId: testPort.id,\n    rearPortPosition: 2,\n});\n```\n```python\nimport pulumi\nimport pulumi_netbox as netbox\n\n# Note that some terraform code is not included in the example for brevity\ntest_device = netbox.Device(\"testDevice\",\n    device_type_id=netbox_device_type[\"test\"][\"id\"],\n    role_id=netbox_device_role[\"test\"][\"id\"],\n    site_id=netbox_site[\"test\"][\"id\"])\ntest_port = netbox.device.rear.Port(\"testPort\",\n    device_id=test_device.id,\n    type=\"8p8c\",\n    positions=2,\n    mark_connected=True)\ntest_device_front_port_port = netbox.device.front.Port(\"testDevice/front/portPort\",\n    device_id=test_device.id,\n    type=\"8p8c\",\n    rear_port_id=test_port.id,\n    rear_port_position=2)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Netbox = Pulumiverse.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Note that some terraform code is not included in the example for brevity\n    var testDevice = new Netbox.Device(\"testDevice\", new()\n    {\n        DeviceTypeId = netbox_device_type.Test.Id,\n        RoleId = netbox_device_role.Test.Id,\n        SiteId = netbox_site.Test.Id,\n    });\n\n    var testPort = new Netbox.Device.Rear.Port(\"testPort\", new()\n    {\n        DeviceId = testDevice.Id,\n        Type = \"8p8c\",\n        Positions = 2,\n        MarkConnected = true,\n    });\n\n    var testDevice_front_portPort = new Netbox.Device.Front.Port(\"testDevice/front/portPort\", new()\n    {\n        DeviceId = testDevice.Id,\n        Type = \"8p8c\",\n        RearPortId = testPort.Id,\n        RearPortPosition = 2,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox\"\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox/device\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Note that some terraform code is not included in the example for brevity\n\t\ttestDevice, err := netbox.NewDevice(ctx, \"testDevice\", \u0026netbox.DeviceArgs{\n\t\t\tDeviceTypeId: pulumi.Any(netbox_device_type.Test.Id),\n\t\t\tRoleId:       pulumi.Any(netbox_device_role.Test.Id),\n\t\t\tSiteId:       pulumi.Any(netbox_site.Test.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttestPort, err := device.NewPort(ctx, \"testPort\", \u0026device.PortArgs{\n\t\t\tDeviceId:      testDevice.ID(),\n\t\t\tType:          pulumi.String(\"8p8c\"),\n\t\t\tPositions:     pulumi.Int(2),\n\t\t\tMarkConnected: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = device.NewPort(ctx, \"testDevice/front/portPort\", \u0026device.PortArgs{\n\t\t\tDeviceId:         testDevice.ID(),\n\t\t\tType:             pulumi.String(\"8p8c\"),\n\t\t\tRearPortId:       testPort.ID(),\n\t\t\tRearPortPosition: pulumi.Int(2),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.Device;\nimport com.pulumi.netbox.DeviceArgs;\nimport com.pulumi.netbox.device.Port;\nimport com.pulumi.netbox.device.PortArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Note that some terraform code is not included in the example for brevity\n        var testDevice = new Device(\"testDevice\", DeviceArgs.builder()\n            .deviceTypeId(netbox_device_type.test().id())\n            .roleId(netbox_device_role.test().id())\n            .siteId(netbox_site.test().id())\n            .build());\n\n        var testPort = new Port(\"testPort\", PortArgs.builder()\n            .deviceId(testDevice.id())\n            .type(\"8p8c\")\n            .positions(2)\n            .markConnected(true)\n            .build());\n\n        var testDevice_front_portPort = new Port(\"testDevice/front/portPort\", PortArgs.builder()\n            .deviceId(testDevice.id())\n            .type(\"8p8c\")\n            .rearPortId(testPort.id())\n            .rearPortPosition(2)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Note that some terraform code is not included in the example for brevity\n  testDevice:\n    type: netbox:Device\n    properties:\n      deviceTypeId: ${netbox_device_type.test.id}\n      roleId: ${netbox_device_role.test.id}\n      siteId: ${netbox_site.test.id}\n  testPort:\n    type: netbox:device/rear:Port\n    properties:\n      deviceId: ${testDevice.id}\n      type: 8p8c\n      positions: 2\n      markConnected: true\n  testDevice/front/portPort:\n    type: netbox:device/front:Port\n    properties:\n      deviceId: ${testDevice.id}\n      type: 8p8c\n      rearPortId: ${testPort.id}\n      rearPortPosition: 2\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "colorHex": {
                    "type": "string"
                },
                "customFields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "deviceId": {
                    "type": "integer"
                },
                "label": {
                    "type": "string"
                },
                "markConnected": {
                    "type": "boolean",
                    "description": "Defaults to `false`.\n"
                },
                "moduleId": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "rearPortId": {
                    "type": "integer"
                },
                "rearPortPosition": {
                    "type": "integer"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "type": {
                    "type": "string",
                    "description": "One of [8p8c, 8p6c, 8p4c, 8p2c, 6p6c, 6p4c, 6p2c, 4p4c, 4p2c, gg45, tera-4p, tera-2p, tera-1p, 110-punch, bnc, f, n, mrj21, fc, lc, lc-pc, lc-upc, lc-apc, lsh, lsh-pc, lsh-upc, lsh-apc, mpo, mtrj, sc, sc-pc, sc-upc, sc-apc, st, cs, sn, sma-905, sma-906, urm-p2, urm-p4, urm-p8, splice, other].\n"
                }
            },
            "required": [
                "deviceId",
                "name",
                "rearPortId",
                "rearPortPosition",
                "type"
            ],
            "inputProperties": {
                "colorHex": {
                    "type": "string"
                },
                "customFields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "deviceId": {
                    "type": "integer"
                },
                "label": {
                    "type": "string"
                },
                "markConnected": {
                    "type": "boolean",
                    "description": "Defaults to `false`.\n"
                },
                "moduleId": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "rearPortId": {
                    "type": "integer"
                },
                "rearPortPosition": {
                    "type": "integer"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "type": {
                    "type": "string",
                    "description": "One of [8p8c, 8p6c, 8p4c, 8p2c, 6p6c, 6p4c, 6p2c, 4p4c, 4p2c, gg45, tera-4p, tera-2p, tera-1p, 110-punch, bnc, f, n, mrj21, fc, lc, lc-pc, lc-upc, lc-apc, lsh, lsh-pc, lsh-upc, lsh-apc, mpo, mtrj, sc, sc-pc, sc-upc, sc-apc, st, cs, sn, sma-905, sma-906, urm-p2, urm-p4, urm-p8, splice, other].\n"
                }
            },
            "requiredInputs": [
                "deviceId",
                "rearPortId",
                "rearPortPosition",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Port resources.\n",
                "properties": {
                    "colorHex": {
                        "type": "string"
                    },
                    "customFields": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "deviceId": {
                        "type": "integer"
                    },
                    "label": {
                        "type": "string"
                    },
                    "markConnected": {
                        "type": "boolean",
                        "description": "Defaults to `false`.\n"
                    },
                    "moduleId": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "rearPortId": {
                        "type": "integer"
                    },
                    "rearPortPosition": {
                        "type": "integer"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "type": {
                        "type": "string",
                        "description": "One of [8p8c, 8p6c, 8p4c, 8p2c, 6p6c, 6p4c, 6p2c, 4p4c, 4p2c, gg45, tera-4p, tera-2p, tera-1p, 110-punch, bnc, f, n, mrj21, fc, lc, lc-pc, lc-upc, lc-apc, lsh, lsh-pc, lsh-upc, lsh-apc, mpo, mtrj, sc, sc-pc, sc-upc, sc-apc, st, cs, sn, sma-905, sma-906, urm-p2, urm-p4, urm-p8, splice, other].\n"
                    }
                },
                "type": "object"
            }
        },
        "netbox:device/interface:Interface": {
            "description": "From the [official documentation](https://docs.netbox.dev/en/stable/features/device/#interface):\n\n\u003e Interfaces in NetBox represent network interfaces used to exchange data with connected devices. On modern networks, these are most commonly Ethernet, but other types are supported as well. IP addresses and VLANs can be assigned to interfaces.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumiverse/netbox\";\n\n// Assumes a device with ID 123 exists\nconst test = new netbox.device.Interface(\"test\", {\n    deviceId: 123,\n    type: \"1000base-t\",\n});\n```\n```python\nimport pulumi\nimport pulumi_netbox as netbox\n\n# Assumes a device with ID 123 exists\ntest = netbox.device.Interface(\"test\",\n    device_id=123,\n    type=\"1000base-t\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Netbox = Pulumiverse.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Assumes a device with ID 123 exists\n    var test = new Netbox.Device.Interface(\"test\", new()\n    {\n        DeviceId = 123,\n        Type = \"1000base-t\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox/device\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Assumes a device with ID 123 exists\n\t\t_, err := device.NewInterface(ctx, \"test\", \u0026device.InterfaceArgs{\n\t\t\tDeviceId: pulumi.Int(123),\n\t\t\tType:     pulumi.String(\"1000base-t\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.device.Interface;\nimport com.pulumi.netbox.device.InterfaceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Assumes a device with ID 123 exists\n        var test = new Interface(\"test\", InterfaceArgs.builder()\n            .deviceId(123)\n            .type(\"1000base-t\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Assumes a device with ID 123 exists\n  test:\n    type: netbox:device:Interface\n    properties:\n      deviceId: 123\n      type: 1000base-t\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "description": {
                    "type": "string"
                },
                "deviceId": {
                    "type": "integer"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Defaults to `true`.\n"
                },
                "label": {
                    "type": "string"
                },
                "lagDeviceInterfaceId": {
                    "type": "integer",
                    "description": "If this device is a member of a LAG group, you can reference the LAG interface here.\n"
                },
                "macAddress": {
                    "type": "string"
                },
                "mgmtonly": {
                    "type": "boolean"
                },
                "mode": {
                    "type": "string",
                    "description": "Valid values are `access`, `tagged` and `tagged-all`.\n"
                },
                "mtu": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "parentDeviceInterfaceId": {
                    "type": "integer",
                    "description": "The netbox*device*interface id of the parent interface. Useful if this interface is a logical interface.\n"
                },
                "speed": {
                    "type": "integer"
                },
                "taggedVlans": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "type": {
                    "type": "string"
                },
                "untaggedVlan": {
                    "type": "integer"
                }
            },
            "required": [
                "deviceId",
                "name",
                "type"
            ],
            "inputProperties": {
                "description": {
                    "type": "string"
                },
                "deviceId": {
                    "type": "integer"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Defaults to `true`.\n"
                },
                "label": {
                    "type": "string"
                },
                "lagDeviceInterfaceId": {
                    "type": "integer",
                    "description": "If this device is a member of a LAG group, you can reference the LAG interface here.\n"
                },
                "macAddress": {
                    "type": "string"
                },
                "mgmtonly": {
                    "type": "boolean"
                },
                "mode": {
                    "type": "string",
                    "description": "Valid values are `access`, `tagged` and `tagged-all`.\n"
                },
                "mtu": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "parentDeviceInterfaceId": {
                    "type": "integer",
                    "description": "The netbox*device*interface id of the parent interface. Useful if this interface is a logical interface.\n"
                },
                "speed": {
                    "type": "integer"
                },
                "taggedVlans": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "type": {
                    "type": "string"
                },
                "untaggedVlan": {
                    "type": "integer"
                }
            },
            "requiredInputs": [
                "deviceId",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Interface resources.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "deviceId": {
                        "type": "integer"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Defaults to `true`.\n"
                    },
                    "label": {
                        "type": "string"
                    },
                    "lagDeviceInterfaceId": {
                        "type": "integer",
                        "description": "If this device is a member of a LAG group, you can reference the LAG interface here.\n"
                    },
                    "macAddress": {
                        "type": "string"
                    },
                    "mgmtonly": {
                        "type": "boolean"
                    },
                    "mode": {
                        "type": "string",
                        "description": "Valid values are `access`, `tagged` and `tagged-all`.\n"
                    },
                    "mtu": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "parentDeviceInterfaceId": {
                        "type": "integer",
                        "description": "The netbox*device*interface id of the parent interface. Useful if this interface is a logical interface.\n"
                    },
                    "speed": {
                        "type": "integer"
                    },
                    "taggedVlans": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "type": {
                        "type": "string"
                    },
                    "untaggedVlan": {
                        "type": "integer"
                    }
                },
                "type": "object"
            }
        },
        "netbox:device/module/bay:Bay": {
            "description": "From the [official documentation](https://docs.netbox.dev/en/stable/models/dcim/modulebay/):\n\n\u003e Module bays represent a space or slot within a device in which a field-replaceable module may be installed. A common example is that of a chassis-based switch such as the Cisco Nexus 9000 or Juniper EX9200. Modules in turn hold additional components that become available to the parent device.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumiverse/netbox\";\n\n// Note that some terraform code is not included in the example for brevity\nconst testDevice = new netbox.Device(\"testDevice\", {\n    deviceTypeId: netbox_device_type.test.id,\n    roleId: netbox_device_role.test.id,\n    siteId: netbox_site.test.id,\n});\nconst testBay = new netbox.device.module.Bay(\"testBay\", {deviceId: testDevice.id});\n```\n```python\nimport pulumi\nimport pulumi_netbox as netbox\n\n# Note that some terraform code is not included in the example for brevity\ntest_device = netbox.Device(\"testDevice\",\n    device_type_id=netbox_device_type[\"test\"][\"id\"],\n    role_id=netbox_device_role[\"test\"][\"id\"],\n    site_id=netbox_site[\"test\"][\"id\"])\ntest_bay = netbox.device.module.Bay(\"testBay\", device_id=test_device.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Netbox = Pulumiverse.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Note that some terraform code is not included in the example for brevity\n    var testDevice = new Netbox.Device(\"testDevice\", new()\n    {\n        DeviceTypeId = netbox_device_type.Test.Id,\n        RoleId = netbox_device_role.Test.Id,\n        SiteId = netbox_site.Test.Id,\n    });\n\n    var testBay = new Netbox.Device.Module.Bay(\"testBay\", new()\n    {\n        DeviceId = testDevice.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox\"\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox/device\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Note that some terraform code is not included in the example for brevity\n\t\ttestDevice, err := netbox.NewDevice(ctx, \"testDevice\", \u0026netbox.DeviceArgs{\n\t\t\tDeviceTypeId: pulumi.Any(netbox_device_type.Test.Id),\n\t\t\tRoleId:       pulumi.Any(netbox_device_role.Test.Id),\n\t\t\tSiteId:       pulumi.Any(netbox_site.Test.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = device.NewBay(ctx, \"testBay\", \u0026device.BayArgs{\n\t\t\tDeviceId: testDevice.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.Device;\nimport com.pulumi.netbox.DeviceArgs;\nimport com.pulumi.netbox.device.Bay;\nimport com.pulumi.netbox.device.BayArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Note that some terraform code is not included in the example for brevity\n        var testDevice = new Device(\"testDevice\", DeviceArgs.builder()\n            .deviceTypeId(netbox_device_type.test().id())\n            .roleId(netbox_device_role.test().id())\n            .siteId(netbox_site.test().id())\n            .build());\n\n        var testBay = new Bay(\"testBay\", BayArgs.builder()\n            .deviceId(testDevice.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Note that some terraform code is not included in the example for brevity\n  testDevice:\n    type: netbox:Device\n    properties:\n      deviceTypeId: ${netbox_device_type.test.id}\n      roleId: ${netbox_device_role.test.id}\n      siteId: ${netbox_site.test.id}\n  testBay:\n    type: netbox:device/module:Bay\n    properties:\n      deviceId: ${testDevice.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "customFields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "deviceId": {
                    "type": "integer"
                },
                "label": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "position": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": [
                "deviceId",
                "name"
            ],
            "inputProperties": {
                "customFields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "deviceId": {
                    "type": "integer"
                },
                "label": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "position": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "requiredInputs": [
                "deviceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Bay resources.\n",
                "properties": {
                    "customFields": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "deviceId": {
                        "type": "integer"
                    },
                    "label": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "position": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object"
            }
        },
        "netbox:device/power/outlet:Outlet": {
            "description": "From the [official documentation](https://docs.netbox.dev/en/stable/models/dcim/poweroutlet/):\n\n\u003e Power outlets represent the outlets on a power distribution unit (PDU) or other device that supplies power to dependent devices. Each power port may be assigned a physical type, and may be associated with a specific feed leg (where three-phase power is used) and/or a specific upstream power port. This association can be used to model the distribution of power within a device.\n\nFor example, imagine a PDU with one power port which draws from a three-phase feed and 48 power outlets arranged into three banks of 16 outlets each. Outlets 1-16 would be associated with leg A on the port, and outlets 17-32 and 33-48 would be associated with legs B and C, respectively.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumiverse/netbox\";\n\n// Note that some terraform code is not included in the example for brevity\nconst testDevice = new netbox.Device(\"testDevice\", {\n    deviceTypeId: netbox_device_type.test.id,\n    roleId: netbox_device_role.test.id,\n    siteId: netbox_site.test.id,\n});\nconst testOutlet = new netbox.device.power.Outlet(\"testOutlet\", {\n    deviceId: testDevice.id,\n    type: \"iec-60320-c5\",\n    feedLeg: \"A\",\n});\n```\n```python\nimport pulumi\nimport pulumi_netbox as netbox\n\n# Note that some terraform code is not included in the example for brevity\ntest_device = netbox.Device(\"testDevice\",\n    device_type_id=netbox_device_type[\"test\"][\"id\"],\n    role_id=netbox_device_role[\"test\"][\"id\"],\n    site_id=netbox_site[\"test\"][\"id\"])\ntest_outlet = netbox.device.power.Outlet(\"testOutlet\",\n    device_id=test_device.id,\n    type=\"iec-60320-c5\",\n    feed_leg=\"A\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Netbox = Pulumiverse.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Note that some terraform code is not included in the example for brevity\n    var testDevice = new Netbox.Device(\"testDevice\", new()\n    {\n        DeviceTypeId = netbox_device_type.Test.Id,\n        RoleId = netbox_device_role.Test.Id,\n        SiteId = netbox_site.Test.Id,\n    });\n\n    var testOutlet = new Netbox.Device.Power.Outlet(\"testOutlet\", new()\n    {\n        DeviceId = testDevice.Id,\n        Type = \"iec-60320-c5\",\n        FeedLeg = \"A\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox\"\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox/device\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Note that some terraform code is not included in the example for brevity\n\t\ttestDevice, err := netbox.NewDevice(ctx, \"testDevice\", \u0026netbox.DeviceArgs{\n\t\t\tDeviceTypeId: pulumi.Any(netbox_device_type.Test.Id),\n\t\t\tRoleId:       pulumi.Any(netbox_device_role.Test.Id),\n\t\t\tSiteId:       pulumi.Any(netbox_site.Test.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = device.NewOutlet(ctx, \"testOutlet\", \u0026device.OutletArgs{\n\t\t\tDeviceId: testDevice.ID(),\n\t\t\tType:     pulumi.String(\"iec-60320-c5\"),\n\t\t\tFeedLeg:  pulumi.String(\"A\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.Device;\nimport com.pulumi.netbox.DeviceArgs;\nimport com.pulumi.netbox.device.Outlet;\nimport com.pulumi.netbox.device.OutletArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Note that some terraform code is not included in the example for brevity\n        var testDevice = new Device(\"testDevice\", DeviceArgs.builder()\n            .deviceTypeId(netbox_device_type.test().id())\n            .roleId(netbox_device_role.test().id())\n            .siteId(netbox_site.test().id())\n            .build());\n\n        var testOutlet = new Outlet(\"testOutlet\", OutletArgs.builder()\n            .deviceId(testDevice.id())\n            .type(\"iec-60320-c5\")\n            .feedLeg(\"A\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Note that some terraform code is not included in the example for brevity\n  testDevice:\n    type: netbox:Device\n    properties:\n      deviceTypeId: ${netbox_device_type.test.id}\n      roleId: ${netbox_device_role.test.id}\n      siteId: ${netbox_site.test.id}\n  testOutlet:\n    type: netbox:device/power:Outlet\n    properties:\n      deviceId: ${testDevice.id}\n      type: iec-60320-c5\n      feedLeg: A\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "customFields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "deviceId": {
                    "type": "integer"
                },
                "feedLeg": {
                    "type": "string",
                    "description": "One of [A, B, C].\n"
                },
                "label": {
                    "type": "string"
                },
                "markConnected": {
                    "type": "boolean",
                    "description": "Defaults to `false`.\n"
                },
                "moduleId": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "powerPortId": {
                    "type": "integer"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "type": {
                    "type": "string",
                    "description": "One of [iec-60320-c5, iec-60320-c7, iec-60320-c13, iec-60320-c15, iec-60320-c19, iec-60320-c21, iec-60309-p-n-e-4h, iec-60309-p-n-e-6h, iec-60309-p-n-e-9h, iec-60309-2p-e-4h, iec-60309-2p-e-6h, iec-60309-2p-e-9h, iec-60309-3p-e-4h, iec-60309-3p-e-6h, iec-60309-3p-e-9h, iec-60309-3p-n-e-4h, iec-60309-3p-n-e-6h, iec-60309-3p-n-e-9h, nema-1-15r, nema-5-15r, nema-5-20r, nema-5-30r, nema-5-50r, nema-6-15r, nema-6-20r, nema-6-30r, nema-6-50r, nema-10-30r, nema-10-50r, nema-14-20r, nema-14-30r, nema-14-50r, nema-14-60r, nema-15-15r, nema-15-20r, nema-15-30r, nema-15-50r, nema-15-60r, nema-l1-15r, nema-l5-15r, nema-l5-20r, nema-l5-30r, nema-l5-50r, nema-l6-15r, nema-l6-20r, nema-l6-30r, nema-l6-50r, nema-l10-30r, nema-l14-20r, nema-l14-30r, nema-l14-50r, nema-l14-60r, nema-l15-20r, nema-l15-30r, nema-l15-50r, nema-l15-60r, nema-l21-20r, nema-l21-30r, nema-l22-30r, CS6360C, CS6364C, CS8164C, CS8264C, CS8364C, CS8464C, ita-e, ita-f, ita-g, ita-h, ita-i, ita-j, ita-k, ita-l, ita-m, ita-n, ita-o, ita-multistandard, usb-a, usb-micro-b, usb-c, dc-terminal, hdot-cx, saf-d-grid, neutrik-powercon-20a, neutrik-powercon-32a, neutrik-powercon-true1, neutrik-powercon-true1-top, ubiquiti-smartpower, hardwired, other].\n"
                }
            },
            "required": [
                "deviceId",
                "name"
            ],
            "inputProperties": {
                "customFields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "deviceId": {
                    "type": "integer"
                },
                "feedLeg": {
                    "type": "string",
                    "description": "One of [A, B, C].\n"
                },
                "label": {
                    "type": "string"
                },
                "markConnected": {
                    "type": "boolean",
                    "description": "Defaults to `false`.\n"
                },
                "moduleId": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "powerPortId": {
                    "type": "integer"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "type": {
                    "type": "string",
                    "description": "One of [iec-60320-c5, iec-60320-c7, iec-60320-c13, iec-60320-c15, iec-60320-c19, iec-60320-c21, iec-60309-p-n-e-4h, iec-60309-p-n-e-6h, iec-60309-p-n-e-9h, iec-60309-2p-e-4h, iec-60309-2p-e-6h, iec-60309-2p-e-9h, iec-60309-3p-e-4h, iec-60309-3p-e-6h, iec-60309-3p-e-9h, iec-60309-3p-n-e-4h, iec-60309-3p-n-e-6h, iec-60309-3p-n-e-9h, nema-1-15r, nema-5-15r, nema-5-20r, nema-5-30r, nema-5-50r, nema-6-15r, nema-6-20r, nema-6-30r, nema-6-50r, nema-10-30r, nema-10-50r, nema-14-20r, nema-14-30r, nema-14-50r, nema-14-60r, nema-15-15r, nema-15-20r, nema-15-30r, nema-15-50r, nema-15-60r, nema-l1-15r, nema-l5-15r, nema-l5-20r, nema-l5-30r, nema-l5-50r, nema-l6-15r, nema-l6-20r, nema-l6-30r, nema-l6-50r, nema-l10-30r, nema-l14-20r, nema-l14-30r, nema-l14-50r, nema-l14-60r, nema-l15-20r, nema-l15-30r, nema-l15-50r, nema-l15-60r, nema-l21-20r, nema-l21-30r, nema-l22-30r, CS6360C, CS6364C, CS8164C, CS8264C, CS8364C, CS8464C, ita-e, ita-f, ita-g, ita-h, ita-i, ita-j, ita-k, ita-l, ita-m, ita-n, ita-o, ita-multistandard, usb-a, usb-micro-b, usb-c, dc-terminal, hdot-cx, saf-d-grid, neutrik-powercon-20a, neutrik-powercon-32a, neutrik-powercon-true1, neutrik-powercon-true1-top, ubiquiti-smartpower, hardwired, other].\n"
                }
            },
            "requiredInputs": [
                "deviceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Outlet resources.\n",
                "properties": {
                    "customFields": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "deviceId": {
                        "type": "integer"
                    },
                    "feedLeg": {
                        "type": "string",
                        "description": "One of [A, B, C].\n"
                    },
                    "label": {
                        "type": "string"
                    },
                    "markConnected": {
                        "type": "boolean",
                        "description": "Defaults to `false`.\n"
                    },
                    "moduleId": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "powerPortId": {
                        "type": "integer"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "type": {
                        "type": "string",
                        "description": "One of [iec-60320-c5, iec-60320-c7, iec-60320-c13, iec-60320-c15, iec-60320-c19, iec-60320-c21, iec-60309-p-n-e-4h, iec-60309-p-n-e-6h, iec-60309-p-n-e-9h, iec-60309-2p-e-4h, iec-60309-2p-e-6h, iec-60309-2p-e-9h, iec-60309-3p-e-4h, iec-60309-3p-e-6h, iec-60309-3p-e-9h, iec-60309-3p-n-e-4h, iec-60309-3p-n-e-6h, iec-60309-3p-n-e-9h, nema-1-15r, nema-5-15r, nema-5-20r, nema-5-30r, nema-5-50r, nema-6-15r, nema-6-20r, nema-6-30r, nema-6-50r, nema-10-30r, nema-10-50r, nema-14-20r, nema-14-30r, nema-14-50r, nema-14-60r, nema-15-15r, nema-15-20r, nema-15-30r, nema-15-50r, nema-15-60r, nema-l1-15r, nema-l5-15r, nema-l5-20r, nema-l5-30r, nema-l5-50r, nema-l6-15r, nema-l6-20r, nema-l6-30r, nema-l6-50r, nema-l10-30r, nema-l14-20r, nema-l14-30r, nema-l14-50r, nema-l14-60r, nema-l15-20r, nema-l15-30r, nema-l15-50r, nema-l15-60r, nema-l21-20r, nema-l21-30r, nema-l22-30r, CS6360C, CS6364C, CS8164C, CS8264C, CS8364C, CS8464C, ita-e, ita-f, ita-g, ita-h, ita-i, ita-j, ita-k, ita-l, ita-m, ita-n, ita-o, ita-multistandard, usb-a, usb-micro-b, usb-c, dc-terminal, hdot-cx, saf-d-grid, neutrik-powercon-20a, neutrik-powercon-32a, neutrik-powercon-true1, neutrik-powercon-true1-top, ubiquiti-smartpower, hardwired, other].\n"
                    }
                },
                "type": "object"
            }
        },
        "netbox:device/power/port:Port": {
            "description": "From the [official documentation](https://docs.netbox.dev/en/stable/models/dcim/powerport/):\n\n\u003e A power port is a device component which draws power from some external source (e.g. an upstream power outlet), and generally represents a power supply internal to a device.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumiverse/netbox\";\n\n// Note that some terraform code is not included in the example for brevity\nconst testDevice = new netbox.Device(\"testDevice\", {\n    deviceTypeId: netbox_device_type.test.id,\n    roleId: netbox_device_role.test.id,\n    siteId: netbox_site.test.id,\n});\nconst testPort = new netbox.device.power.Port(\"testPort\", {\n    deviceId: testDevice.id,\n    maximumDraw: 750,\n    allocatedDraw: 500,\n    type: \"iec-60320-c6\",\n});\n```\n```python\nimport pulumi\nimport pulumi_netbox as netbox\n\n# Note that some terraform code is not included in the example for brevity\ntest_device = netbox.Device(\"testDevice\",\n    device_type_id=netbox_device_type[\"test\"][\"id\"],\n    role_id=netbox_device_role[\"test\"][\"id\"],\n    site_id=netbox_site[\"test\"][\"id\"])\ntest_port = netbox.device.power.Port(\"testPort\",\n    device_id=test_device.id,\n    maximum_draw=750,\n    allocated_draw=500,\n    type=\"iec-60320-c6\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Netbox = Pulumiverse.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Note that some terraform code is not included in the example for brevity\n    var testDevice = new Netbox.Device(\"testDevice\", new()\n    {\n        DeviceTypeId = netbox_device_type.Test.Id,\n        RoleId = netbox_device_role.Test.Id,\n        SiteId = netbox_site.Test.Id,\n    });\n\n    var testPort = new Netbox.Device.Power.Port(\"testPort\", new()\n    {\n        DeviceId = testDevice.Id,\n        MaximumDraw = 750,\n        AllocatedDraw = 500,\n        Type = \"iec-60320-c6\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox\"\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox/device\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Note that some terraform code is not included in the example for brevity\n\t\ttestDevice, err := netbox.NewDevice(ctx, \"testDevice\", \u0026netbox.DeviceArgs{\n\t\t\tDeviceTypeId: pulumi.Any(netbox_device_type.Test.Id),\n\t\t\tRoleId:       pulumi.Any(netbox_device_role.Test.Id),\n\t\t\tSiteId:       pulumi.Any(netbox_site.Test.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = device.NewPort(ctx, \"testPort\", \u0026device.PortArgs{\n\t\t\tDeviceId:      testDevice.ID(),\n\t\t\tMaximumDraw:   pulumi.Int(750),\n\t\t\tAllocatedDraw: pulumi.Int(500),\n\t\t\tType:          pulumi.String(\"iec-60320-c6\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.Device;\nimport com.pulumi.netbox.DeviceArgs;\nimport com.pulumi.netbox.device.Port;\nimport com.pulumi.netbox.device.PortArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Note that some terraform code is not included in the example for brevity\n        var testDevice = new Device(\"testDevice\", DeviceArgs.builder()\n            .deviceTypeId(netbox_device_type.test().id())\n            .roleId(netbox_device_role.test().id())\n            .siteId(netbox_site.test().id())\n            .build());\n\n        var testPort = new Port(\"testPort\", PortArgs.builder()\n            .deviceId(testDevice.id())\n            .maximumDraw(750)\n            .allocatedDraw(500)\n            .type(\"iec-60320-c6\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Note that some terraform code is not included in the example for brevity\n  testDevice:\n    type: netbox:Device\n    properties:\n      deviceTypeId: ${netbox_device_type.test.id}\n      roleId: ${netbox_device_role.test.id}\n      siteId: ${netbox_site.test.id}\n  testPort:\n    type: netbox:device/power:Port\n    properties:\n      deviceId: ${testDevice.id}\n      maximumDraw: 750\n      allocatedDraw: 500\n      type: iec-60320-c6\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "allocatedDraw": {
                    "type": "integer"
                },
                "customFields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "deviceId": {
                    "type": "integer"
                },
                "label": {
                    "type": "string"
                },
                "markConnected": {
                    "type": "boolean",
                    "description": "Defaults to `false`.\n"
                },
                "maximumDraw": {
                    "type": "integer"
                },
                "moduleId": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "type": {
                    "type": "string",
                    "description": "One of [iec-60320-c6, iec-60320-c8, iec-60320-c14, iec-60320-c16, iec-60320-c20, iec-60320-c22, iec-60309-p-n-e-4h, iec-60309-p-n-e-6h, iec-60309-p-n-e-9h, iec-60309-2p-e-4h, iec-60309-2p-e-6h, iec-60309-2p-e-9h, iec-60309-3p-e-4h, iec-60309-3p-e-6h, iec-60309-3p-e-9h, iec-60309-3p-n-e-4h, iec-60309-3p-n-e-6h, iec-60309-3p-n-e-9h, nema-1-15p, nema-5-15p, nema-5-20p, nema-5-30p, nema-5-50p, nema-6-15p, nema-6-20p, nema-6-30p, nema-6-50p, nema-10-30p, nema-10-50p, nema-14-20p, nema-14-30p, nema-14-50p, nema-14-60p, nema-15-15p, nema-15-20p, nema-15-30p, nema-15-50p, nema-15-60p, nema-l1-15p, nema-l5-15p, nema-l5-20p, nema-l5-30p, nema-l5-50p, nema-l6-15p, nema-l6-20p, nema-l6-30p, nema-l6-50p, nema-l10-30p, nema-l14-20p, nema-l14-30p, nema-l14-50p, nema-l14-60p, nema-l15-20p, nema-l15-30p, nema-l15-50p, nema-l15-60p, nema-l21-20p, nema-l21-30p, nema-l22-30p, cs6361c, cs6365c, cs8165c, cs8265c, cs8365c, cs8465c, ita-c, ita-e, ita-f, ita-ef, ita-g, ita-h, ita-i, ita-j, ita-k, ita-l, ita-m, ita-n, ita-o, usb-a, usb-b, usb-c, usb-mini-a, usb-mini-b, usb-micro-a, usb-micro-b, usb-micro-ab, usb-3-b, usb-3-micro-b, dc-terminal, saf-d-grid, neutrik-powercon-20, neutrik-powercon-32, neutrik-powercon-true1, neutrik-powercon-true1-top, ubiquiti-smartpower, hardwired, other].\n"
                }
            },
            "required": [
                "deviceId",
                "name"
            ],
            "inputProperties": {
                "allocatedDraw": {
                    "type": "integer"
                },
                "customFields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "deviceId": {
                    "type": "integer"
                },
                "label": {
                    "type": "string"
                },
                "markConnected": {
                    "type": "boolean",
                    "description": "Defaults to `false`.\n"
                },
                "maximumDraw": {
                    "type": "integer"
                },
                "moduleId": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "type": {
                    "type": "string",
                    "description": "One of [iec-60320-c6, iec-60320-c8, iec-60320-c14, iec-60320-c16, iec-60320-c20, iec-60320-c22, iec-60309-p-n-e-4h, iec-60309-p-n-e-6h, iec-60309-p-n-e-9h, iec-60309-2p-e-4h, iec-60309-2p-e-6h, iec-60309-2p-e-9h, iec-60309-3p-e-4h, iec-60309-3p-e-6h, iec-60309-3p-e-9h, iec-60309-3p-n-e-4h, iec-60309-3p-n-e-6h, iec-60309-3p-n-e-9h, nema-1-15p, nema-5-15p, nema-5-20p, nema-5-30p, nema-5-50p, nema-6-15p, nema-6-20p, nema-6-30p, nema-6-50p, nema-10-30p, nema-10-50p, nema-14-20p, nema-14-30p, nema-14-50p, nema-14-60p, nema-15-15p, nema-15-20p, nema-15-30p, nema-15-50p, nema-15-60p, nema-l1-15p, nema-l5-15p, nema-l5-20p, nema-l5-30p, nema-l5-50p, nema-l6-15p, nema-l6-20p, nema-l6-30p, nema-l6-50p, nema-l10-30p, nema-l14-20p, nema-l14-30p, nema-l14-50p, nema-l14-60p, nema-l15-20p, nema-l15-30p, nema-l15-50p, nema-l15-60p, nema-l21-20p, nema-l21-30p, nema-l22-30p, cs6361c, cs6365c, cs8165c, cs8265c, cs8365c, cs8465c, ita-c, ita-e, ita-f, ita-ef, ita-g, ita-h, ita-i, ita-j, ita-k, ita-l, ita-m, ita-n, ita-o, usb-a, usb-b, usb-c, usb-mini-a, usb-mini-b, usb-micro-a, usb-micro-b, usb-micro-ab, usb-3-b, usb-3-micro-b, dc-terminal, saf-d-grid, neutrik-powercon-20, neutrik-powercon-32, neutrik-powercon-true1, neutrik-powercon-true1-top, ubiquiti-smartpower, hardwired, other].\n"
                }
            },
            "requiredInputs": [
                "deviceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Port resources.\n",
                "properties": {
                    "allocatedDraw": {
                        "type": "integer"
                    },
                    "customFields": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "deviceId": {
                        "type": "integer"
                    },
                    "label": {
                        "type": "string"
                    },
                    "markConnected": {
                        "type": "boolean",
                        "description": "Defaults to `false`.\n"
                    },
                    "maximumDraw": {
                        "type": "integer"
                    },
                    "moduleId": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "type": {
                        "type": "string",
                        "description": "One of [iec-60320-c6, iec-60320-c8, iec-60320-c14, iec-60320-c16, iec-60320-c20, iec-60320-c22, iec-60309-p-n-e-4h, iec-60309-p-n-e-6h, iec-60309-p-n-e-9h, iec-60309-2p-e-4h, iec-60309-2p-e-6h, iec-60309-2p-e-9h, iec-60309-3p-e-4h, iec-60309-3p-e-6h, iec-60309-3p-e-9h, iec-60309-3p-n-e-4h, iec-60309-3p-n-e-6h, iec-60309-3p-n-e-9h, nema-1-15p, nema-5-15p, nema-5-20p, nema-5-30p, nema-5-50p, nema-6-15p, nema-6-20p, nema-6-30p, nema-6-50p, nema-10-30p, nema-10-50p, nema-14-20p, nema-14-30p, nema-14-50p, nema-14-60p, nema-15-15p, nema-15-20p, nema-15-30p, nema-15-50p, nema-15-60p, nema-l1-15p, nema-l5-15p, nema-l5-20p, nema-l5-30p, nema-l5-50p, nema-l6-15p, nema-l6-20p, nema-l6-30p, nema-l6-50p, nema-l10-30p, nema-l14-20p, nema-l14-30p, nema-l14-50p, nema-l14-60p, nema-l15-20p, nema-l15-30p, nema-l15-50p, nema-l15-60p, nema-l21-20p, nema-l21-30p, nema-l22-30p, cs6361c, cs6365c, cs8165c, cs8265c, cs8365c, cs8465c, ita-c, ita-e, ita-f, ita-ef, ita-g, ita-h, ita-i, ita-j, ita-k, ita-l, ita-m, ita-n, ita-o, usb-a, usb-b, usb-c, usb-mini-a, usb-mini-b, usb-micro-a, usb-micro-b, usb-micro-ab, usb-3-b, usb-3-micro-b, dc-terminal, saf-d-grid, neutrik-powercon-20, neutrik-powercon-32, neutrik-powercon-true1, neutrik-powercon-true1-top, ubiquiti-smartpower, hardwired, other].\n"
                    }
                },
                "type": "object"
            }
        },
        "netbox:device/primary/ip:Ip": {
            "description": "This resource is used to define the primary IP for a given device. The primary IP is reflected in the device Netbox UI, which identifies the Primary IPv4 and IPv6 addresses.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumiverse/netbox\";\n\n// Note that some terraform code is not included in the example for brevity\nconst test = new netbox.Device(\"test\", {\n    deviceTypeId: netbox_device_type.test.id,\n    roleId: netbox_device_role.test.id,\n    siteId: netbox_site.test.id,\n});\nconst testV4Address = new netbox.ip.Address(\"testV4Address\", {\n    ipAddress: \"1.1.1.1/32\",\n    status: \"active\",\n    deviceInterfaceId: netbox_device_interface.test.id,\n});\nconst testV4Ip = new netbox.device.primary.Ip(\"testV4Ip\", {\n    deviceId: test.id,\n    ipAddressId: netbox_ip_address.test.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_netbox as netbox\n\n# Note that some terraform code is not included in the example for brevity\ntest = netbox.Device(\"test\",\n    device_type_id=netbox_device_type[\"test\"][\"id\"],\n    role_id=netbox_device_role[\"test\"][\"id\"],\n    site_id=netbox_site[\"test\"][\"id\"])\ntest_v4_address = netbox.ip.Address(\"testV4Address\",\n    ip_address=\"1.1.1.1/32\",\n    status=\"active\",\n    device_interface_id=netbox_device_interface[\"test\"][\"id\"])\ntest_v4_ip = netbox.device.primary.Ip(\"testV4Ip\",\n    device_id=test.id,\n    ip_address_id=netbox_ip_address[\"test\"][\"id\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Netbox = Pulumiverse.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Note that some terraform code is not included in the example for brevity\n    var test = new Netbox.Device(\"test\", new()\n    {\n        DeviceTypeId = netbox_device_type.Test.Id,\n        RoleId = netbox_device_role.Test.Id,\n        SiteId = netbox_site.Test.Id,\n    });\n\n    var testV4Address = new Netbox.Ip.Address(\"testV4Address\", new()\n    {\n        IpAddress = \"1.1.1.1/32\",\n        Status = \"active\",\n        DeviceInterfaceId = netbox_device_interface.Test.Id,\n    });\n\n    var testV4Ip = new Netbox.Device.Primary.Ip(\"testV4Ip\", new()\n    {\n        DeviceId = test.Id,\n        IpAddressId = netbox_ip_address.Test.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox\"\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox/device\"\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox/ip\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Note that some terraform code is not included in the example for brevity\n\t\ttest, err := netbox.NewDevice(ctx, \"test\", \u0026netbox.DeviceArgs{\n\t\t\tDeviceTypeId: pulumi.Any(netbox_device_type.Test.Id),\n\t\t\tRoleId:       pulumi.Any(netbox_device_role.Test.Id),\n\t\t\tSiteId:       pulumi.Any(netbox_site.Test.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = ip.NewAddress(ctx, \"testV4Address\", \u0026ip.AddressArgs{\n\t\t\tIpAddress:         pulumi.String(\"1.1.1.1/32\"),\n\t\t\tStatus:            pulumi.String(\"active\"),\n\t\t\tDeviceInterfaceId: pulumi.Any(netbox_device_interface.Test.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = device.NewIp(ctx, \"testV4Ip\", \u0026device.IpArgs{\n\t\t\tDeviceId:    test.ID(),\n\t\t\tIpAddressId: pulumi.Any(netbox_ip_address.Test.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.Device;\nimport com.pulumi.netbox.DeviceArgs;\nimport com.pulumi.netbox.ip.Address;\nimport com.pulumi.netbox.ip.AddressArgs;\nimport com.pulumi.netbox.device.Ip;\nimport com.pulumi.netbox.device.IpArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Note that some terraform code is not included in the example for brevity\n        var test = new Device(\"test\", DeviceArgs.builder()\n            .deviceTypeId(netbox_device_type.test().id())\n            .roleId(netbox_device_role.test().id())\n            .siteId(netbox_site.test().id())\n            .build());\n\n        var testV4Address = new Address(\"testV4Address\", AddressArgs.builder()\n            .ipAddress(\"1.1.1.1/32\")\n            .status(\"active\")\n            .deviceInterfaceId(netbox_device_interface.test().id())\n            .build());\n\n        var testV4Ip = new Ip(\"testV4Ip\", IpArgs.builder()\n            .deviceId(test.id())\n            .ipAddressId(netbox_ip_address.test().id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Note that some terraform code is not included in the example for brevity\n  test:\n    type: netbox:Device\n    properties:\n      deviceTypeId: ${netbox_device_type.test.id}\n      roleId: ${netbox_device_role.test.id}\n      siteId: ${netbox_site.test.id}\n  testV4Address:\n    type: netbox:ip:Address\n    properties:\n      ipAddress: 1.1.1.1/32\n      status: active\n      deviceInterfaceId: ${netbox_device_interface.test.id}\n  testV4Ip:\n    type: netbox:device/primary:Ip\n    properties:\n      deviceId: ${test.id}\n      ipAddressId: ${netbox_ip_address.test.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "deviceId": {
                    "type": "integer"
                },
                "ipAddressId": {
                    "type": "integer"
                },
                "ipAddressVersion": {
                    "type": "integer",
                    "description": "Defaults to `4`.\n"
                }
            },
            "required": [
                "deviceId",
                "ipAddressId"
            ],
            "inputProperties": {
                "deviceId": {
                    "type": "integer"
                },
                "ipAddressId": {
                    "type": "integer"
                },
                "ipAddressVersion": {
                    "type": "integer",
                    "description": "Defaults to `4`.\n"
                }
            },
            "requiredInputs": [
                "deviceId",
                "ipAddressId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Ip resources.\n",
                "properties": {
                    "deviceId": {
                        "type": "integer"
                    },
                    "ipAddressId": {
                        "type": "integer"
                    },
                    "ipAddressVersion": {
                        "type": "integer",
                        "description": "Defaults to `4`.\n"
                    }
                },
                "type": "object"
            }
        },
        "netbox:device/rear/port:Port": {
            "description": "From the [official documentation](https://docs.netbox.dev/en/stable/models/dcim/rearport/):\n\n\u003e Like front ports, rear ports are pass-through ports which represent the continuation of a path from one cable to the next. Each rear port is defined with its physical type and a number of positions: Rear ports with more than one position can be mapped to multiple front ports. This can be useful for modeling instances where multiple paths share a common cable (for example, six discrete two-strand fiber connections sharing a 12-strand MPO cable).\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumiverse/netbox\";\n\n// Note that some terraform code is not included in the example for brevity\nconst testDevice = new netbox.Device(\"testDevice\", {\n    deviceTypeId: netbox_device_type.test.id,\n    roleId: netbox_device_role.test.id,\n    siteId: netbox_site.test.id,\n});\nconst testPort = new netbox.device.rear.Port(\"testPort\", {\n    deviceId: testDevice.id,\n    type: \"8p8c\",\n    positions: 2,\n    markConnected: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_netbox as netbox\n\n# Note that some terraform code is not included in the example for brevity\ntest_device = netbox.Device(\"testDevice\",\n    device_type_id=netbox_device_type[\"test\"][\"id\"],\n    role_id=netbox_device_role[\"test\"][\"id\"],\n    site_id=netbox_site[\"test\"][\"id\"])\ntest_port = netbox.device.rear.Port(\"testPort\",\n    device_id=test_device.id,\n    type=\"8p8c\",\n    positions=2,\n    mark_connected=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Netbox = Pulumiverse.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Note that some terraform code is not included in the example for brevity\n    var testDevice = new Netbox.Device(\"testDevice\", new()\n    {\n        DeviceTypeId = netbox_device_type.Test.Id,\n        RoleId = netbox_device_role.Test.Id,\n        SiteId = netbox_site.Test.Id,\n    });\n\n    var testPort = new Netbox.Device.Rear.Port(\"testPort\", new()\n    {\n        DeviceId = testDevice.Id,\n        Type = \"8p8c\",\n        Positions = 2,\n        MarkConnected = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox\"\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox/device\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Note that some terraform code is not included in the example for brevity\n\t\ttestDevice, err := netbox.NewDevice(ctx, \"testDevice\", \u0026netbox.DeviceArgs{\n\t\t\tDeviceTypeId: pulumi.Any(netbox_device_type.Test.Id),\n\t\t\tRoleId:       pulumi.Any(netbox_device_role.Test.Id),\n\t\t\tSiteId:       pulumi.Any(netbox_site.Test.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = device.NewPort(ctx, \"testPort\", \u0026device.PortArgs{\n\t\t\tDeviceId:      testDevice.ID(),\n\t\t\tType:          pulumi.String(\"8p8c\"),\n\t\t\tPositions:     pulumi.Int(2),\n\t\t\tMarkConnected: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.Device;\nimport com.pulumi.netbox.DeviceArgs;\nimport com.pulumi.netbox.device.Port;\nimport com.pulumi.netbox.device.PortArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Note that some terraform code is not included in the example for brevity\n        var testDevice = new Device(\"testDevice\", DeviceArgs.builder()\n            .deviceTypeId(netbox_device_type.test().id())\n            .roleId(netbox_device_role.test().id())\n            .siteId(netbox_site.test().id())\n            .build());\n\n        var testPort = new Port(\"testPort\", PortArgs.builder()\n            .deviceId(testDevice.id())\n            .type(\"8p8c\")\n            .positions(2)\n            .markConnected(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Note that some terraform code is not included in the example for brevity\n  testDevice:\n    type: netbox:Device\n    properties:\n      deviceTypeId: ${netbox_device_type.test.id}\n      roleId: ${netbox_device_role.test.id}\n      siteId: ${netbox_site.test.id}\n  testPort:\n    type: netbox:device/rear:Port\n    properties:\n      deviceId: ${testDevice.id}\n      type: 8p8c\n      positions: 2\n      markConnected: true\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "colorHex": {
                    "type": "string"
                },
                "customFields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "deviceId": {
                    "type": "integer"
                },
                "label": {
                    "type": "string"
                },
                "markConnected": {
                    "type": "boolean",
                    "description": "Defaults to `false`.\n"
                },
                "moduleId": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "positions": {
                    "type": "integer"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "type": {
                    "type": "string",
                    "description": "One of [8p8c, 8p6c, 8p4c, 8p2c, 6p6c, 6p4c, 6p2c, 4p4c, 4p2c, gg45, tera-4p, tera-2p, tera-1p, 110-punch, bnc, f, n, mrj21, fc, lc, lc-pc, lc-upc, lc-apc, lsh, lsh-pc, lsh-upc, lsh-apc, mpo, mtrj, sc, sc-pc, sc-upc, sc-apc, st, cs, sn, sma-905, sma-906, urm-p2, urm-p4, urm-p8, splice, other].\n"
                }
            },
            "required": [
                "deviceId",
                "name",
                "positions",
                "type"
            ],
            "inputProperties": {
                "colorHex": {
                    "type": "string"
                },
                "customFields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "deviceId": {
                    "type": "integer"
                },
                "label": {
                    "type": "string"
                },
                "markConnected": {
                    "type": "boolean",
                    "description": "Defaults to `false`.\n"
                },
                "moduleId": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "positions": {
                    "type": "integer"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "type": {
                    "type": "string",
                    "description": "One of [8p8c, 8p6c, 8p4c, 8p2c, 6p6c, 6p4c, 6p2c, 4p4c, 4p2c, gg45, tera-4p, tera-2p, tera-1p, 110-punch, bnc, f, n, mrj21, fc, lc, lc-pc, lc-upc, lc-apc, lsh, lsh-pc, lsh-upc, lsh-apc, mpo, mtrj, sc, sc-pc, sc-upc, sc-apc, st, cs, sn, sma-905, sma-906, urm-p2, urm-p4, urm-p8, splice, other].\n"
                }
            },
            "requiredInputs": [
                "deviceId",
                "positions",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Port resources.\n",
                "properties": {
                    "colorHex": {
                        "type": "string"
                    },
                    "customFields": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "deviceId": {
                        "type": "integer"
                    },
                    "label": {
                        "type": "string"
                    },
                    "markConnected": {
                        "type": "boolean",
                        "description": "Defaults to `false`.\n"
                    },
                    "moduleId": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "positions": {
                        "type": "integer"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "type": {
                        "type": "string",
                        "description": "One of [8p8c, 8p6c, 8p4c, 8p2c, 6p6c, 6p4c, 6p2c, 4p4c, 4p2c, gg45, tera-4p, tera-2p, tera-1p, 110-punch, bnc, f, n, mrj21, fc, lc, lc-pc, lc-upc, lc-apc, lsh, lsh-pc, lsh-upc, lsh-apc, mpo, mtrj, sc, sc-pc, sc-upc, sc-apc, st, cs, sn, sma-905, sma-906, urm-p2, urm-p4, urm-p8, splice, other].\n"
                    }
                },
                "type": "object"
            }
        },
        "netbox:device/role:Role": {
            "description": "From the [official documentation](https://docs.netbox.dev/en/stable/features/devices/#device-roles):\n\n\u003e Devices can be organized by functional roles, which are fully customizable by the user. For example, you might create roles for core switches, distribution switches, and access switches within your network.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumiverse/netbox\";\n\nconst coreSw = new netbox.device.Role(\"coreSw\", {colorHex: \"FF00FF\"});\n```\n```python\nimport pulumi\nimport pulumi_netbox as netbox\n\ncore_sw = netbox.device.Role(\"coreSw\", color_hex=\"FF00FF\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Netbox = Pulumiverse.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var coreSw = new Netbox.Device.Role(\"coreSw\", new()\n    {\n        ColorHex = \"FF00FF\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox/device\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := device.NewRole(ctx, \"coreSw\", \u0026device.RoleArgs{\n\t\t\tColorHex: pulumi.String(\"FF00FF\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.device.Role;\nimport com.pulumi.netbox.device.RoleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var coreSw = new Role(\"coreSw\", RoleArgs.builder()\n            .colorHex(\"FF00FF\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  coreSw:\n    type: netbox:device:Role\n    properties:\n      colorHex: FF00FF\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "colorHex": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "vmRole": {
                    "type": "boolean",
                    "description": "Defaults to `true`.\n"
                }
            },
            "required": [
                "colorHex",
                "name",
                "slug"
            ],
            "inputProperties": {
                "colorHex": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "vmRole": {
                    "type": "boolean",
                    "description": "Defaults to `true`.\n"
                }
            },
            "requiredInputs": [
                "colorHex"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Role resources.\n",
                "properties": {
                    "colorHex": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "vmRole": {
                        "type": "boolean",
                        "description": "Defaults to `true`.\n"
                    }
                },
                "type": "object"
            }
        },
        "netbox:device/type:Type": {
            "description": "From the [official documentation](https://docs.netbox.dev/en/stable/features/device-types/#device-types_1):\n\n\u003e A device type represents a particular make and model of hardware that exists in the real world. Device types define the physical attributes of a device (rack height and depth) and its individual components (console, power, network interfaces, and so on).\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumiverse/netbox\";\n\nconst testManufacturer = new netbox.Manufacturer(\"testManufacturer\", {});\nconst testType = new netbox.device.Type(\"testType\", {\n    model: \"test\",\n    partNumber: \"123\",\n    manufacturerId: testManufacturer.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_netbox as netbox\n\ntest_manufacturer = netbox.Manufacturer(\"testManufacturer\")\ntest_type = netbox.device.Type(\"testType\",\n    model=\"test\",\n    part_number=\"123\",\n    manufacturer_id=test_manufacturer.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Netbox = Pulumiverse.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var testManufacturer = new Netbox.Manufacturer(\"testManufacturer\");\n\n    var testType = new Netbox.Device.Type(\"testType\", new()\n    {\n        Model = \"test\",\n        PartNumber = \"123\",\n        ManufacturerId = testManufacturer.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox\"\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox/device\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttestManufacturer, err := netbox.NewManufacturer(ctx, \"testManufacturer\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = device.NewType(ctx, \"testType\", \u0026device.TypeArgs{\n\t\t\tModel:          pulumi.String(\"test\"),\n\t\t\tPartNumber:     pulumi.String(\"123\"),\n\t\t\tManufacturerId: testManufacturer.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.Manufacturer;\nimport com.pulumi.netbox.device.Type;\nimport com.pulumi.netbox.device.TypeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var testManufacturer = new Manufacturer(\"testManufacturer\");\n\n        var testType = new Type(\"testType\", TypeArgs.builder()\n            .model(\"test\")\n            .partNumber(\"123\")\n            .manufacturerId(testManufacturer.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  testManufacturer:\n    type: netbox:Manufacturer\n  testType:\n    type: netbox:device:Type\n    properties:\n      model: test\n      partNumber: '123'\n      manufacturerId: ${testManufacturer.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "isFullDepth": {
                    "type": "boolean"
                },
                "manufacturerId": {
                    "type": "integer"
                },
                "model": {
                    "type": "string"
                },
                "partNumber": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "uHeight": {
                    "type": "number",
                    "description": "Defaults to `1.0`.\n"
                }
            },
            "required": [
                "manufacturerId",
                "model",
                "slug"
            ],
            "inputProperties": {
                "isFullDepth": {
                    "type": "boolean"
                },
                "manufacturerId": {
                    "type": "integer"
                },
                "model": {
                    "type": "string"
                },
                "partNumber": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "uHeight": {
                    "type": "number",
                    "description": "Defaults to `1.0`.\n"
                }
            },
            "requiredInputs": [
                "manufacturerId",
                "model"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Type resources.\n",
                "properties": {
                    "isFullDepth": {
                        "type": "boolean"
                    },
                    "manufacturerId": {
                        "type": "integer"
                    },
                    "model": {
                        "type": "string"
                    },
                    "partNumber": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "uHeight": {
                        "type": "number",
                        "description": "Defaults to `1.0`.\n"
                    }
                },
                "type": "object"
            }
        },
        "netbox:event/rule:Rule": {
            "description": "From the [official documentation](https://docs.netbox.dev/en/stable/features/event-rules/):\n\n\u003e NetBox can be configured via Event Rules to transmit outgoing webhooks to remote systems in response to internal object changes. The receiver can act on the data in these webhook messages to perform related tasks.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumiverse/netbox\";\n\nconst testWebhook = new netbox.Webhook(\"testWebhook\", {payloadUrl: \"https://example.com/webhook\"});\nconst testRule = new netbox.event.Rule(\"testRule\", {\n    contentTypes: [\n        \"dcim.site\",\n        \"virtualization.cluster\",\n    ],\n    actionType: \"webhook\",\n    actionObjectId: testWebhook.id,\n    triggerOnCreate: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_netbox as netbox\n\ntest_webhook = netbox.Webhook(\"testWebhook\", payload_url=\"https://example.com/webhook\")\ntest_rule = netbox.event.Rule(\"testRule\",\n    content_types=[\n        \"dcim.site\",\n        \"virtualization.cluster\",\n    ],\n    action_type=\"webhook\",\n    action_object_id=test_webhook.id,\n    trigger_on_create=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Netbox = Pulumiverse.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var testWebhook = new Netbox.Webhook(\"testWebhook\", new()\n    {\n        PayloadUrl = \"https://example.com/webhook\",\n    });\n\n    var testRule = new Netbox.Event.Rule(\"testRule\", new()\n    {\n        ContentTypes = new[]\n        {\n            \"dcim.site\",\n            \"virtualization.cluster\",\n        },\n        ActionType = \"webhook\",\n        ActionObjectId = testWebhook.Id,\n        TriggerOnCreate = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox\"\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox/event\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttestWebhook, err := netbox.NewWebhook(ctx, \"testWebhook\", \u0026netbox.WebhookArgs{\n\t\t\tPayloadUrl: pulumi.String(\"https://example.com/webhook\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = event.NewRule(ctx, \"testRule\", \u0026event.RuleArgs{\n\t\t\tContentTypes: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"dcim.site\"),\n\t\t\t\tpulumi.String(\"virtualization.cluster\"),\n\t\t\t},\n\t\t\tActionType:      pulumi.String(\"webhook\"),\n\t\t\tActionObjectId:  testWebhook.ID(),\n\t\t\tTriggerOnCreate: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.Webhook;\nimport com.pulumi.netbox.WebhookArgs;\nimport com.pulumi.netbox.event.Rule;\nimport com.pulumi.netbox.event.RuleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var testWebhook = new Webhook(\"testWebhook\", WebhookArgs.builder()\n            .payloadUrl(\"https://example.com/webhook\")\n            .build());\n\n        var testRule = new Rule(\"testRule\", RuleArgs.builder()\n            .contentTypes(            \n                \"dcim.site\",\n                \"virtualization.cluster\")\n            .actionType(\"webhook\")\n            .actionObjectId(testWebhook.id())\n            .triggerOnCreate(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  testWebhook:\n    type: netbox:Webhook\n    properties:\n      payloadUrl: https://example.com/webhook\n  testRule:\n    type: netbox:event:Rule\n    properties:\n      contentTypes:\n        - dcim.site\n        - virtualization.cluster\n      actionType: webhook\n      actionObjectId: ${testWebhook.id}\n      triggerOnCreate: true\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "actionObjectId": {
                    "type": "integer"
                },
                "actionType": {
                    "type": "string",
                    "description": "Valid values are `webhook`.\n"
                },
                "conditions": {
                    "type": "string"
                },
                "contentTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Defaults to `true`.\n"
                },
                "name": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "triggerOnCreate": {
                    "type": "boolean",
                    "description": "At least one of `trigger_on_create`, `trigger_on_update`, `trigger_on_delete`, `trigger_on_job_start` or `trigger_on_job_end` must be given.\n"
                },
                "triggerOnDelete": {
                    "type": "boolean",
                    "description": "At least one of `trigger_on_create`, `trigger_on_update`, `trigger_on_delete`, `trigger_on_job_start` or `trigger_on_job_end` must be given.\n"
                },
                "triggerOnJobEnd": {
                    "type": "boolean",
                    "description": "At least one of `trigger_on_create`, `trigger_on_update`, `trigger_on_delete`, `trigger_on_job_start` or `trigger_on_job_end` must be given.\n"
                },
                "triggerOnJobStart": {
                    "type": "boolean",
                    "description": "At least one of `trigger_on_create`, `trigger_on_update`, `trigger_on_delete`, `trigger_on_job_start` or `trigger_on_job_end` must be given.\n"
                },
                "triggerOnUpdate": {
                    "type": "boolean",
                    "description": "At least one of `trigger_on_create`, `trigger_on_update`, `trigger_on_delete`, `trigger_on_job_start` or `trigger_on_job_end` must be given.\n"
                }
            },
            "required": [
                "actionObjectId",
                "actionType",
                "contentTypes",
                "name"
            ],
            "inputProperties": {
                "actionObjectId": {
                    "type": "integer"
                },
                "actionType": {
                    "type": "string",
                    "description": "Valid values are `webhook`.\n"
                },
                "conditions": {
                    "type": "string"
                },
                "contentTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Defaults to `true`.\n"
                },
                "name": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "triggerOnCreate": {
                    "type": "boolean",
                    "description": "At least one of `trigger_on_create`, `trigger_on_update`, `trigger_on_delete`, `trigger_on_job_start` or `trigger_on_job_end` must be given.\n"
                },
                "triggerOnDelete": {
                    "type": "boolean",
                    "description": "At least one of `trigger_on_create`, `trigger_on_update`, `trigger_on_delete`, `trigger_on_job_start` or `trigger_on_job_end` must be given.\n"
                },
                "triggerOnJobEnd": {
                    "type": "boolean",
                    "description": "At least one of `trigger_on_create`, `trigger_on_update`, `trigger_on_delete`, `trigger_on_job_start` or `trigger_on_job_end` must be given.\n"
                },
                "triggerOnJobStart": {
                    "type": "boolean",
                    "description": "At least one of `trigger_on_create`, `trigger_on_update`, `trigger_on_delete`, `trigger_on_job_start` or `trigger_on_job_end` must be given.\n"
                },
                "triggerOnUpdate": {
                    "type": "boolean",
                    "description": "At least one of `trigger_on_create`, `trigger_on_update`, `trigger_on_delete`, `trigger_on_job_start` or `trigger_on_job_end` must be given.\n"
                }
            },
            "requiredInputs": [
                "actionObjectId",
                "actionType",
                "contentTypes"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Rule resources.\n",
                "properties": {
                    "actionObjectId": {
                        "type": "integer"
                    },
                    "actionType": {
                        "type": "string",
                        "description": "Valid values are `webhook`.\n"
                    },
                    "conditions": {
                        "type": "string"
                    },
                    "contentTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Defaults to `true`.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "triggerOnCreate": {
                        "type": "boolean",
                        "description": "At least one of `trigger_on_create`, `trigger_on_update`, `trigger_on_delete`, `trigger_on_job_start` or `trigger_on_job_end` must be given.\n"
                    },
                    "triggerOnDelete": {
                        "type": "boolean",
                        "description": "At least one of `trigger_on_create`, `trigger_on_update`, `trigger_on_delete`, `trigger_on_job_start` or `trigger_on_job_end` must be given.\n"
                    },
                    "triggerOnJobEnd": {
                        "type": "boolean",
                        "description": "At least one of `trigger_on_create`, `trigger_on_update`, `trigger_on_delete`, `trigger_on_job_start` or `trigger_on_job_end` must be given.\n"
                    },
                    "triggerOnJobStart": {
                        "type": "boolean",
                        "description": "At least one of `trigger_on_create`, `trigger_on_update`, `trigger_on_delete`, `trigger_on_job_start` or `trigger_on_job_end` must be given.\n"
                    },
                    "triggerOnUpdate": {
                        "type": "boolean",
                        "description": "At least one of `trigger_on_create`, `trigger_on_update`, `trigger_on_delete`, `trigger_on_job_start` or `trigger_on_job_end` must be given.\n"
                    }
                },
                "type": "object"
            }
        },
        "netbox:index/aggregate:Aggregate": {
            "description": "From the [official documentation](https://docs.netbox.dev/en/stable/features/ipam/#aggregates):\n\n\u003e NetBox allows us to specify the portions of IP space that are interesting to us by defining aggregates. Typically, an aggregate will correspond to either an allocation of public (globally routable) IP space granted by a regional authority, or a private (internally-routable) designation.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumiverse/netbox\";\n\nconst testRir = new netbox.Rir(\"testRir\", {});\nconst testAggregate = new netbox.Aggregate(\"testAggregate\", {\n    prefix: \"1.1.1.0/25\",\n    description: \"my description\",\n    rirId: testRir.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_netbox as netbox\n\ntest_rir = netbox.Rir(\"testRir\")\ntest_aggregate = netbox.Aggregate(\"testAggregate\",\n    prefix=\"1.1.1.0/25\",\n    description=\"my description\",\n    rir_id=test_rir.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Netbox = Pulumiverse.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var testRir = new Netbox.Rir(\"testRir\");\n\n    var testAggregate = new Netbox.Aggregate(\"testAggregate\", new()\n    {\n        Prefix = \"1.1.1.0/25\",\n        Description = \"my description\",\n        RirId = testRir.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttestRir, err := netbox.NewRir(ctx, \"testRir\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = netbox.NewAggregate(ctx, \"testAggregate\", \u0026netbox.AggregateArgs{\n\t\t\tPrefix:      pulumi.String(\"1.1.1.0/25\"),\n\t\t\tDescription: pulumi.String(\"my description\"),\n\t\t\tRirId:       testRir.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.Rir;\nimport com.pulumi.netbox.Aggregate;\nimport com.pulumi.netbox.AggregateArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var testRir = new Rir(\"testRir\");\n\n        var testAggregate = new Aggregate(\"testAggregate\", AggregateArgs.builder()\n            .prefix(\"1.1.1.0/25\")\n            .description(\"my description\")\n            .rirId(testRir.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  testRir:\n    type: netbox:Rir\n  testAggregate:\n    type: netbox:Aggregate\n    properties:\n      prefix: 1.1.1.0/25\n      description: my description\n      rirId: ${testRir.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "description": {
                    "type": "string"
                },
                "prefix": {
                    "type": "string"
                },
                "rirId": {
                    "type": "integer"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tenantId": {
                    "type": "integer"
                }
            },
            "required": [
                "prefix"
            ],
            "inputProperties": {
                "description": {
                    "type": "string"
                },
                "prefix": {
                    "type": "string"
                },
                "rirId": {
                    "type": "integer"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tenantId": {
                    "type": "integer"
                }
            },
            "requiredInputs": [
                "prefix"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Aggregate resources.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "prefix": {
                        "type": "string"
                    },
                    "rirId": {
                        "type": "integer"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "tenantId": {
                        "type": "integer"
                    }
                },
                "type": "object"
            }
        },
        "netbox:index/asn:Asn": {
            "description": "From the [official documentation](https://docs.netbox.dev/en/stable/features/ipam/#asn):\n\u003e ASN is short for Autonomous System Number. This identifier is used in the BGP protocol to identify which \"autonomous system\" a particular prefix is originating and transiting through.\n\u003e\n\u003e The AS number model within NetBox allows you to model some of this real-world relationship.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumiverse/netbox\";\n\nconst testRir = new netbox.Rir(\"testRir\", {});\nconst testAsn = new netbox.Asn(\"testAsn\", {\n    asn: 1337,\n    rirId: testRir.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_netbox as netbox\n\ntest_rir = netbox.Rir(\"testRir\")\ntest_asn = netbox.Asn(\"testAsn\",\n    asn=1337,\n    rir_id=test_rir.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Netbox = Pulumiverse.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var testRir = new Netbox.Rir(\"testRir\");\n\n    var testAsn = new Netbox.Asn(\"testAsn\", new()\n    {\n        Asn = 1337,\n        RirId = testRir.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttestRir, err := netbox.NewRir(ctx, \"testRir\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = netbox.NewAsn(ctx, \"testAsn\", \u0026netbox.AsnArgs{\n\t\t\tAsn:   pulumi.Int(1337),\n\t\t\tRirId: testRir.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.Rir;\nimport com.pulumi.netbox.Asn;\nimport com.pulumi.netbox.AsnArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var testRir = new Rir(\"testRir\");\n\n        var testAsn = new Asn(\"testAsn\", AsnArgs.builder()\n            .asn(1337)\n            .rirId(testRir.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  testRir:\n    type: netbox:Rir\n  testAsn:\n    type: netbox:Asn\n    properties:\n      asn: 1337\n      rirId: ${testRir.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "asn": {
                    "type": "integer"
                },
                "rirId": {
                    "type": "integer"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": [
                "asn",
                "rirId"
            ],
            "inputProperties": {
                "asn": {
                    "type": "integer"
                },
                "rirId": {
                    "type": "integer"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "requiredInputs": [
                "asn",
                "rirId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Asn resources.\n",
                "properties": {
                    "asn": {
                        "type": "integer"
                    },
                    "rirId": {
                        "type": "integer"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object"
            }
        },
        "netbox:index/cable:Cable": {
            "description": "From the [official documentation](https://docs.netbox.dev/en/stable/models/dcim/cable/):\n\n\u003e All connections between device components in NetBox are represented using cables. A cable represents a direct physical connection between two sets of endpoints (A and B), such as a console port and a patch panel port, or between two network interfaces.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumiverse/netbox\";\n\n// assumes that the referenced console port resources exist\nconst test = new netbox.Cable(\"test\", {\n    aTerminations: [\n        {\n            objectType: \"dcim.consoleserverport\",\n            objectId: netbox_device_console_server_port.kvm1.id,\n        },\n        {\n            objectType: \"dcim.consoleserverport\",\n            objectId: netbox_device_console_server_port.kvm2.id,\n        },\n    ],\n    bTerminations: [\n        {\n            objectType: \"dcim.consoleport\",\n            objectId: netbox_device_console_port.server1.id,\n        },\n        {\n            objectType: \"dcim.consoleport\",\n            objectId: netbox_device_console_port.server2.id,\n        },\n    ],\n    status: \"connected\",\n    label: \"KVM cable\",\n    type: \"cat8\",\n    colorHex: \"123456\",\n    length: 10,\n    lengthUnit: \"m\",\n});\n```\n```python\nimport pulumi\nimport pulumi_netbox as netbox\n\n# assumes that the referenced console port resources exist\ntest = netbox.Cable(\"test\",\n    a_terminations=[\n        {\n            \"object_type\": \"dcim.consoleserverport\",\n            \"object_id\": netbox_device_console_server_port[\"kvm1\"][\"id\"],\n        },\n        {\n            \"object_type\": \"dcim.consoleserverport\",\n            \"object_id\": netbox_device_console_server_port[\"kvm2\"][\"id\"],\n        },\n    ],\n    b_terminations=[\n        {\n            \"object_type\": \"dcim.consoleport\",\n            \"object_id\": netbox_device_console_port[\"server1\"][\"id\"],\n        },\n        {\n            \"object_type\": \"dcim.consoleport\",\n            \"object_id\": netbox_device_console_port[\"server2\"][\"id\"],\n        },\n    ],\n    status=\"connected\",\n    label=\"KVM cable\",\n    type=\"cat8\",\n    color_hex=\"123456\",\n    length=10,\n    length_unit=\"m\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Netbox = Pulumiverse.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // assumes that the referenced console port resources exist\n    var test = new Netbox.Cable(\"test\", new()\n    {\n        ATerminations = new[]\n        {\n            new Netbox.Inputs.CableATerminationArgs\n            {\n                ObjectType = \"dcim.consoleserverport\",\n                ObjectId = netbox_device_console_server_port.Kvm1.Id,\n            },\n            new Netbox.Inputs.CableATerminationArgs\n            {\n                ObjectType = \"dcim.consoleserverport\",\n                ObjectId = netbox_device_console_server_port.Kvm2.Id,\n            },\n        },\n        BTerminations = new[]\n        {\n            new Netbox.Inputs.CableBTerminationArgs\n            {\n                ObjectType = \"dcim.consoleport\",\n                ObjectId = netbox_device_console_port.Server1.Id,\n            },\n            new Netbox.Inputs.CableBTerminationArgs\n            {\n                ObjectType = \"dcim.consoleport\",\n                ObjectId = netbox_device_console_port.Server2.Id,\n            },\n        },\n        Status = \"connected\",\n        Label = \"KVM cable\",\n        Type = \"cat8\",\n        ColorHex = \"123456\",\n        Length = 10,\n        LengthUnit = \"m\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// assumes that the referenced console port resources exist\n\t\t_, err := netbox.NewCable(ctx, \"test\", \u0026netbox.CableArgs{\n\t\t\tATerminations: netbox.CableATerminationArray{\n\t\t\t\t\u0026netbox.CableATerminationArgs{\n\t\t\t\t\tObjectType: pulumi.String(\"dcim.consoleserverport\"),\n\t\t\t\t\tObjectId:   pulumi.Any(netbox_device_console_server_port.Kvm1.Id),\n\t\t\t\t},\n\t\t\t\t\u0026netbox.CableATerminationArgs{\n\t\t\t\t\tObjectType: pulumi.String(\"dcim.consoleserverport\"),\n\t\t\t\t\tObjectId:   pulumi.Any(netbox_device_console_server_port.Kvm2.Id),\n\t\t\t\t},\n\t\t\t},\n\t\t\tBTerminations: netbox.CableBTerminationArray{\n\t\t\t\t\u0026netbox.CableBTerminationArgs{\n\t\t\t\t\tObjectType: pulumi.String(\"dcim.consoleport\"),\n\t\t\t\t\tObjectId:   pulumi.Any(netbox_device_console_port.Server1.Id),\n\t\t\t\t},\n\t\t\t\t\u0026netbox.CableBTerminationArgs{\n\t\t\t\t\tObjectType: pulumi.String(\"dcim.consoleport\"),\n\t\t\t\t\tObjectId:   pulumi.Any(netbox_device_console_port.Server2.Id),\n\t\t\t\t},\n\t\t\t},\n\t\t\tStatus:     pulumi.String(\"connected\"),\n\t\t\tLabel:      pulumi.String(\"KVM cable\"),\n\t\t\tType:       pulumi.String(\"cat8\"),\n\t\t\tColorHex:   pulumi.String(\"123456\"),\n\t\t\tLength:     pulumi.Float64(10),\n\t\t\tLengthUnit: pulumi.String(\"m\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.Cable;\nimport com.pulumi.netbox.CableArgs;\nimport com.pulumi.netbox.inputs.CableATerminationArgs;\nimport com.pulumi.netbox.inputs.CableBTerminationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // assumes that the referenced console port resources exist\n        var test = new Cable(\"test\", CableArgs.builder()\n            .aTerminations(            \n                CableATerminationArgs.builder()\n                    .objectType(\"dcim.consoleserverport\")\n                    .objectId(netbox_device_console_server_port.kvm1().id())\n                    .build(),\n                CableATerminationArgs.builder()\n                    .objectType(\"dcim.consoleserverport\")\n                    .objectId(netbox_device_console_server_port.kvm2().id())\n                    .build())\n            .bTerminations(            \n                CableBTerminationArgs.builder()\n                    .objectType(\"dcim.consoleport\")\n                    .objectId(netbox_device_console_port.server1().id())\n                    .build(),\n                CableBTerminationArgs.builder()\n                    .objectType(\"dcim.consoleport\")\n                    .objectId(netbox_device_console_port.server2().id())\n                    .build())\n            .status(\"connected\")\n            .label(\"KVM cable\")\n            .type(\"cat8\")\n            .colorHex(\"123456\")\n            .length(10)\n            .lengthUnit(\"m\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # assumes that the referenced console port resources exist\n  test:\n    type: netbox:Cable\n    properties:\n      aTerminations:\n        - objectType: dcim.consoleserverport\n          objectId: ${netbox_device_console_server_port.kvm1.id}\n        - objectType: dcim.consoleserverport\n          objectId: ${netbox_device_console_server_port.kvm2.id}\n      bTerminations:\n        - objectType: dcim.consoleport\n          objectId: ${netbox_device_console_port.server1.id}\n        - objectType: dcim.consoleport\n          objectId: ${netbox_device_console_port.server2.id}\n      status: connected\n      label: KVM cable\n      type: cat8\n      colorHex: '123456'\n      length: 10\n      lengthUnit: m\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "aTerminations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/netbox:index/CableATermination:CableATermination"
                    }
                },
                "bTerminations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/netbox:index/CableBTermination:CableBTermination"
                    }
                },
                "colorHex": {
                    "type": "string"
                },
                "comments": {
                    "type": "string"
                },
                "customFields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "label": {
                    "type": "string"
                },
                "length": {
                    "type": "number"
                },
                "lengthUnit": {
                    "type": "string",
                    "description": "One of [km, m, cm, mi, ft, in]. Required when `length` is set.\n"
                },
                "status": {
                    "type": "string",
                    "description": "One of [connected, planned, decommissioning].\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tenantId": {
                    "type": "integer"
                },
                "type": {
                    "type": "string",
                    "description": "One of [cat3, cat5, cat5e, cat6, cat6a, cat7, cat7a, cat8, dac-active, dac-passive, mrj21-trunk, coaxial, mmf, mmf-om1, mmf-om2, mmf-om3, mmf-om4, mmf-om5, smf, smf-os1, smf-os2, aoc, power].\n"
                }
            },
            "required": [
                "aTerminations",
                "bTerminations",
                "status"
            ],
            "inputProperties": {
                "aTerminations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/netbox:index/CableATermination:CableATermination"
                    }
                },
                "bTerminations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/netbox:index/CableBTermination:CableBTermination"
                    }
                },
                "colorHex": {
                    "type": "string"
                },
                "comments": {
                    "type": "string"
                },
                "customFields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "label": {
                    "type": "string"
                },
                "length": {
                    "type": "number"
                },
                "lengthUnit": {
                    "type": "string",
                    "description": "One of [km, m, cm, mi, ft, in]. Required when `length` is set.\n"
                },
                "status": {
                    "type": "string",
                    "description": "One of [connected, planned, decommissioning].\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tenantId": {
                    "type": "integer"
                },
                "type": {
                    "type": "string",
                    "description": "One of [cat3, cat5, cat5e, cat6, cat6a, cat7, cat7a, cat8, dac-active, dac-passive, mrj21-trunk, coaxial, mmf, mmf-om1, mmf-om2, mmf-om3, mmf-om4, mmf-om5, smf, smf-os1, smf-os2, aoc, power].\n"
                }
            },
            "requiredInputs": [
                "aTerminations",
                "bTerminations",
                "status"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Cable resources.\n",
                "properties": {
                    "aTerminations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/netbox:index/CableATermination:CableATermination"
                        }
                    },
                    "bTerminations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/netbox:index/CableBTermination:CableBTermination"
                        }
                    },
                    "colorHex": {
                        "type": "string"
                    },
                    "comments": {
                        "type": "string"
                    },
                    "customFields": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "label": {
                        "type": "string"
                    },
                    "length": {
                        "type": "number"
                    },
                    "lengthUnit": {
                        "type": "string",
                        "description": "One of [km, m, cm, mi, ft, in]. Required when `length` is set.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "One of [connected, planned, decommissioning].\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "tenantId": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string",
                        "description": "One of [cat3, cat5, cat5e, cat6, cat6a, cat7, cat7a, cat8, dac-active, dac-passive, mrj21-trunk, coaxial, mmf, mmf-om1, mmf-om2, mmf-om3, mmf-om4, mmf-om5, smf, smf-os1, smf-os2, aoc, power].\n"
                    }
                },
                "type": "object"
            }
        },
        "netbox:index/circuit:Circuit": {
            "description": "From the [official documentation](https://docs.netbox.dev/en/stable/features/circuits/#circuits_1):\n\n\u003e A communications circuit represents a single physical link connecting exactly two endpoints, commonly referred to as its A and Z terminations. A circuit in NetBox may have zero, one, or two terminations defined. It is common to have only one termination defined when you don't necessarily care about the details of the provider side of the circuit, e.g. for Internet access circuits. Both terminations would likely be modeled for circuits which connect one customer site to another.\n\u003e\n\u003e Each circuit is associated with a provider and a user-defined type. For example, you might have Internet access circuits delivered to each site by one provider, and private MPLS circuits delivered by another. Each circuit must be assigned a circuit ID, each of which must be unique per provider.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumiverse/netbox\";\n\nconst testTenant = new netbox.Tenant(\"testTenant\", {});\nconst testProvider = new netbox.circuit.Provider(\"testProvider\", {});\nconst testType = new netbox.circuit.Type(\"testType\", {});\nconst testCircuit = new netbox.Circuit(\"testCircuit\", {\n    cid: \"test\",\n    status: \"active\",\n    providerId: testProvider.id,\n    typeId: testType.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_netbox as netbox\n\ntest_tenant = netbox.Tenant(\"testTenant\")\ntest_provider = netbox.circuit.Provider(\"testProvider\")\ntest_type = netbox.circuit.Type(\"testType\")\ntest_circuit = netbox.Circuit(\"testCircuit\",\n    cid=\"test\",\n    status=\"active\",\n    provider_id=test_provider.id,\n    type_id=test_type.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Netbox = Pulumiverse.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var testTenant = new Netbox.Tenant(\"testTenant\");\n\n    var testProvider = new Netbox.Circuit.Provider(\"testProvider\");\n\n    var testType = new Netbox.Circuit.Type(\"testType\");\n\n    var testCircuit = new Netbox.Circuit(\"testCircuit\", new()\n    {\n        Cid = \"test\",\n        Status = \"active\",\n        ProviderId = testProvider.Id,\n        TypeId = testType.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox\"\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox/circuit\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := netbox.NewTenant(ctx, \"testTenant\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttestProvider, err := circuit.NewProvider(ctx, \"testProvider\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttestType, err := circuit.NewType(ctx, \"testType\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = netbox.NewCircuit(ctx, \"testCircuit\", \u0026netbox.CircuitArgs{\n\t\t\tCid:        pulumi.String(\"test\"),\n\t\t\tStatus:     pulumi.String(\"active\"),\n\t\t\tProviderId: testProvider.ID(),\n\t\t\tTypeId:     testType.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.Tenant;\nimport com.pulumi.netbox.circuit.Provider;\nimport com.pulumi.netbox.circuit.Type;\nimport com.pulumi.netbox.Circuit;\nimport com.pulumi.netbox.CircuitArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var testTenant = new Tenant(\"testTenant\");\n\n        var testProvider = new Provider(\"testProvider\");\n\n        var testType = new Type(\"testType\");\n\n        var testCircuit = new Circuit(\"testCircuit\", CircuitArgs.builder()\n            .cid(\"test\")\n            .status(\"active\")\n            .providerId(testProvider.id())\n            .typeId(testType.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  testTenant:\n    type: netbox:Tenant\n  testProvider:\n    type: netbox:circuit:Provider\n  testType:\n    type: netbox:circuit:Type\n  testCircuit:\n    type: netbox:Circuit\n    properties:\n      cid: test\n      status: active\n      providerId: ${testProvider.id}\n      typeId: ${testType.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "cid": {
                    "type": "string"
                },
                "providerId": {
                    "type": "integer"
                },
                "status": {
                    "type": "string",
                    "description": "Valid values are `planned`, `provisioning`, `active`, `offline`, `deprovisioning` and `decommissioning`.\n"
                },
                "tenantId": {
                    "type": "integer"
                },
                "typeId": {
                    "type": "integer"
                }
            },
            "required": [
                "cid",
                "providerId",
                "status",
                "typeId"
            ],
            "inputProperties": {
                "cid": {
                    "type": "string"
                },
                "providerId": {
                    "type": "integer"
                },
                "status": {
                    "type": "string",
                    "description": "Valid values are `planned`, `provisioning`, `active`, `offline`, `deprovisioning` and `decommissioning`.\n"
                },
                "tenantId": {
                    "type": "integer"
                },
                "typeId": {
                    "type": "integer"
                }
            },
            "requiredInputs": [
                "cid",
                "providerId",
                "status",
                "typeId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Circuit resources.\n",
                "properties": {
                    "cid": {
                        "type": "string"
                    },
                    "providerId": {
                        "type": "integer"
                    },
                    "status": {
                        "type": "string",
                        "description": "Valid values are `planned`, `provisioning`, `active`, `offline`, `deprovisioning` and `decommissioning`.\n"
                    },
                    "tenantId": {
                        "type": "integer"
                    },
                    "typeId": {
                        "type": "integer"
                    }
                },
                "type": "object"
            }
        },
        "netbox:index/cluster:Cluster": {
            "description": "From the [official documentation](https://docs.netbox.dev/en/stable/features/virtualization/#clusters):\n\n\u003e A cluster is a logical grouping of physical resources within which virtual machines run. A cluster must be assigned a type (technological classification), and may optionally be assigned to a cluster group, site, and/or tenant. Each cluster must have a unique name within its assigned group and/or site, if any.\n\u003e\n\u003e Physical devices may be associated with clusters as hosts. This allows users to track on which host(s) a particular virtual machine may reside. However, NetBox does not support pinning a specific VM within a cluster to a particular host device.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumi/netbox\";\nimport * as netbox from \"@pulumiverse/netbox\";\n\nconst dcWest = netbox.cluster.getGroup({\n    name: \"dc-west\",\n});\nconst vmwVsphere = new netbox.cluster.Type(\"vmwVsphere\", {});\nconst vmwCluster01 = new netbox.Cluster(\"vmwCluster01\", {\n    clusterTypeId: vmwVsphere.id,\n    clusterGroupId: dcWest.then(dcWest =\u003e dcWest.id),\n});\n```\n```python\nimport pulumi\nimport pulumi_netbox as netbox\n\ndc_west = netbox.cluster.get_group(name=\"dc-west\")\nvmw_vsphere = netbox.cluster.Type(\"vmwVsphere\")\nvmw_cluster01 = netbox.Cluster(\"vmwCluster01\",\n    cluster_type_id=vmw_vsphere.id,\n    cluster_group_id=dc_west.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Netbox = Pulumi.Netbox;\nusing Netbox = Pulumiverse.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var dcWest = Netbox.Cluster.GetGroup.Invoke(new()\n    {\n        Name = \"dc-west\",\n    });\n\n    var vmwVsphere = new Netbox.Cluster.Type(\"vmwVsphere\");\n\n    var vmwCluster01 = new Netbox.Cluster(\"vmwCluster01\", new()\n    {\n        ClusterTypeId = vmwVsphere.Id,\n        ClusterGroupId = dcWest.Apply(getGroupResult =\u003e getGroupResult.Id),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox\"\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox/cluster\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tdcWest, err := cluster.LookupGroup(ctx, \u0026cluster.LookupGroupArgs{\n\t\t\tName: \"dc-west\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tvmwVsphere, err := cluster.NewType(ctx, \"vmwVsphere\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = netbox.NewCluster(ctx, \"vmwCluster01\", \u0026netbox.ClusterArgs{\n\t\t\tClusterTypeId:  vmwVsphere.ID(),\n\t\t\tClusterGroupId: pulumi.String(dcWest.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.cluster.ClusterFunctions;\nimport com.pulumi.netbox.cluster.inputs.GetGroupArgs;\nimport com.pulumi.netbox.cluster.Type;\nimport com.pulumi.netbox.Cluster;\nimport com.pulumi.netbox.ClusterArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var dcWest = ClusterFunctions.getGroup(GetGroupArgs.builder()\n            .name(\"dc-west\")\n            .build());\n\n        var vmwVsphere = new Type(\"vmwVsphere\");\n\n        var vmwCluster01 = new Cluster(\"vmwCluster01\", ClusterArgs.builder()\n            .clusterTypeId(vmwVsphere.id())\n            .clusterGroupId(dcWest.applyValue(getGroupResult -\u003e getGroupResult.id()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  vmwVsphere:\n    type: netbox:cluster:Type\n  vmwCluster01:\n    type: netbox:Cluster\n    properties:\n      clusterTypeId: ${vmwVsphere.id}\n      clusterGroupId: ${dcWest.id}\nvariables:\n  dcWest:\n    fn::invoke:\n      Function: netbox:cluster:getGroup\n      Arguments:\n        name: dc-west\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "clusterGroupId": {
                    "type": "integer"
                },
                "clusterTypeId": {
                    "type": "integer"
                },
                "comments": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "siteId": {
                    "type": "integer"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tenantId": {
                    "type": "integer"
                }
            },
            "required": [
                "clusterTypeId",
                "name"
            ],
            "inputProperties": {
                "clusterGroupId": {
                    "type": "integer"
                },
                "clusterTypeId": {
                    "type": "integer"
                },
                "comments": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "siteId": {
                    "type": "integer"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tenantId": {
                    "type": "integer"
                }
            },
            "requiredInputs": [
                "clusterTypeId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Cluster resources.\n",
                "properties": {
                    "clusterGroupId": {
                        "type": "integer"
                    },
                    "clusterTypeId": {
                        "type": "integer"
                    },
                    "comments": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "siteId": {
                        "type": "integer"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "tenantId": {
                        "type": "integer"
                    }
                },
                "type": "object"
            }
        },
        "netbox:index/contact:Contact": {
            "description": "From the [official documentation](https://docs.netbox.dev/en/stable/features/contacts/#contacts_1):\n\n\u003e A contact should represent an individual or permanent point of contact. Each contact must define a name, and may optionally include a title, phone number, email address, and related details.\n\u003e\n\u003e Contacts are reused for assignments, so each unique contact must be created only once and can be assigned to any number of NetBox objects, and there is no limit to the number of assigned contacts an object may have. Most core objects in NetBox can have contacts assigned to them.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumiverse/netbox\";\n\nconst test = new netbox.Contact(\"test\", {\n    email: \"test@example.com\",\n    phone: \"123-123123\",\n});\n```\n```python\nimport pulumi\nimport pulumi_netbox as netbox\n\ntest = netbox.Contact(\"test\",\n    email=\"test@example.com\",\n    phone=\"123-123123\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Netbox = Pulumiverse.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = new Netbox.Contact(\"test\", new()\n    {\n        Email = \"test@example.com\",\n        Phone = \"123-123123\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := netbox.NewContact(ctx, \"test\", \u0026netbox.ContactArgs{\n\t\t\tEmail: pulumi.String(\"test@example.com\"),\n\t\t\tPhone: pulumi.String(\"123-123123\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.Contact;\nimport com.pulumi.netbox.ContactArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new Contact(\"test\", ContactArgs.builder()\n            .email(\"test@example.com\")\n            .phone(\"123-123123\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: netbox:Contact\n    properties:\n      email: test@example.com\n      phone: 123-123123\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "email": {
                    "type": "string"
                },
                "groupId": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "email": {
                    "type": "string"
                },
                "groupId": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Contact resources.\n",
                "properties": {
                    "email": {
                        "type": "string"
                    },
                    "groupId": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "phone": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object"
            }
        },
        "netbox:index/device:Device": {
            "description": "From the [official documentation](https://docs.netbox.dev/en/stable/features/devices/#devices):\n\n\u003e Every piece of hardware which is installed within a site or rack exists in NetBox as a device. Devices are measured in rack units (U) and can be half depth or full depth. A device may have a height of 0U: These devices do not consume vertical rack space and cannot be assigned to a particular rack unit. A common example of a 0U device is a vertically-mounted PDU.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumiverse/netbox\";\n\nconst testSite = new netbox.Site(\"testSite\", {});\nconst testRole = new netbox.device.Role(\"testRole\", {colorHex: \"123456\"});\nconst testManufacturer = new netbox.Manufacturer(\"testManufacturer\", {});\nconst testType = new netbox.device.Type(\"testType\", {\n    model: \"test\",\n    manufacturerId: testManufacturer.id,\n});\nconst testDevice = new netbox.Device(\"testDevice\", {\n    deviceTypeId: testType.id,\n    roleId: testRole.id,\n    siteId: testSite.id,\n    localContextData: JSON.stringify({\n        setting_a: \"Some Setting\",\n        setting_b: 42,\n    }),\n});\n```\n```python\nimport pulumi\nimport json\nimport pulumi_netbox as netbox\n\ntest_site = netbox.Site(\"testSite\")\ntest_role = netbox.device.Role(\"testRole\", color_hex=\"123456\")\ntest_manufacturer = netbox.Manufacturer(\"testManufacturer\")\ntest_type = netbox.device.Type(\"testType\",\n    model=\"test\",\n    manufacturer_id=test_manufacturer.id)\ntest_device = netbox.Device(\"testDevice\",\n    device_type_id=test_type.id,\n    role_id=test_role.id,\n    site_id=test_site.id,\n    local_context_data=json.dumps({\n        \"setting_a\": \"Some Setting\",\n        \"setting_b\": 42,\n    }))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.Json;\nusing Pulumi;\nusing Netbox = Pulumiverse.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var testSite = new Netbox.Site(\"testSite\");\n\n    var testRole = new Netbox.Device.Role(\"testRole\", new()\n    {\n        ColorHex = \"123456\",\n    });\n\n    var testManufacturer = new Netbox.Manufacturer(\"testManufacturer\");\n\n    var testType = new Netbox.Device.Type(\"testType\", new()\n    {\n        Model = \"test\",\n        ManufacturerId = testManufacturer.Id,\n    });\n\n    var testDevice = new Netbox.Device(\"testDevice\", new()\n    {\n        DeviceTypeId = testType.Id,\n        RoleId = testRole.Id,\n        SiteId = testSite.Id,\n        LocalContextData = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n        {\n            [\"setting_a\"] = \"Some Setting\",\n            [\"setting_b\"] = 42,\n        }),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox\"\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox/device\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttestSite, err := netbox.NewSite(ctx, \"testSite\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttestRole, err := device.NewRole(ctx, \"testRole\", \u0026device.RoleArgs{\n\t\t\tColorHex: pulumi.String(\"123456\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttestManufacturer, err := netbox.NewManufacturer(ctx, \"testManufacturer\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttestType, err := device.NewType(ctx, \"testType\", \u0026device.TypeArgs{\n\t\t\tModel:          pulumi.String(\"test\"),\n\t\t\tManufacturerId: testManufacturer.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttmpJSON0, err := json.Marshal(map[string]interface{}{\n\t\t\t\"setting_a\": \"Some Setting\",\n\t\t\t\"setting_b\": 42,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson0 := string(tmpJSON0)\n\t\t_, err = netbox.NewDevice(ctx, \"testDevice\", \u0026netbox.DeviceArgs{\n\t\t\tDeviceTypeId:     testType.ID(),\n\t\t\tRoleId:           testRole.ID(),\n\t\t\tSiteId:           testSite.ID(),\n\t\t\tLocalContextData: pulumi.String(json0),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.Site;\nimport com.pulumi.netbox.device.Role;\nimport com.pulumi.netbox.device.RoleArgs;\nimport com.pulumi.netbox.Manufacturer;\nimport com.pulumi.netbox.device.Type;\nimport com.pulumi.netbox.device.TypeArgs;\nimport com.pulumi.netbox.Device;\nimport com.pulumi.netbox.DeviceArgs;\nimport static com.pulumi.codegen.internal.Serialization.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var testSite = new Site(\"testSite\");\n\n        var testRole = new Role(\"testRole\", RoleArgs.builder()\n            .colorHex(\"123456\")\n            .build());\n\n        var testManufacturer = new Manufacturer(\"testManufacturer\");\n\n        var testType = new Type(\"testType\", TypeArgs.builder()\n            .model(\"test\")\n            .manufacturerId(testManufacturer.id())\n            .build());\n\n        var testDevice = new Device(\"testDevice\", DeviceArgs.builder()\n            .deviceTypeId(testType.id())\n            .roleId(testRole.id())\n            .siteId(testSite.id())\n            .localContextData(serializeJson(\n                jsonObject(\n                    jsonProperty(\"setting_a\", \"Some Setting\"),\n                    jsonProperty(\"setting_b\", 42)\n                )))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  testSite:\n    type: netbox:Site\n  testRole:\n    type: netbox:device:Role\n    properties:\n      colorHex: '123456'\n  testManufacturer:\n    type: netbox:Manufacturer\n  testType:\n    type: netbox:device:Type\n    properties:\n      model: test\n      manufacturerId: ${testManufacturer.id}\n  testDevice:\n    type: netbox:Device\n    properties:\n      deviceTypeId: ${testType.id}\n      roleId: ${testRole.id}\n      siteId: ${testSite.id}\n      localContextData:\n        fn::toJSON:\n          setting_a: Some Setting\n          setting_b: 42\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "assetTag": {
                    "type": "string"
                },
                "clusterId": {
                    "type": "integer"
                },
                "comments": {
                    "type": "string"
                },
                "configTemplateId": {
                    "type": "integer"
                },
                "customFields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "deviceTypeId": {
                    "type": "integer"
                },
                "localContextData": {
                    "type": "string",
                    "description": "This is best managed through the use of `jsonencode` and a map of settings.\n"
                },
                "locationId": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "platformId": {
                    "type": "integer"
                },
                "primaryIpv4": {
                    "type": "integer"
                },
                "primaryIpv6": {
                    "type": "integer"
                },
                "rackFace": {
                    "type": "string",
                    "description": "Valid values are `front` and `rear`. Required when `rack_position` is set.\n"
                },
                "rackId": {
                    "type": "integer"
                },
                "rackPosition": {
                    "type": "number"
                },
                "roleId": {
                    "type": "integer"
                },
                "serial": {
                    "type": "string"
                },
                "siteId": {
                    "type": "integer"
                },
                "status": {
                    "type": "string",
                    "description": "Valid values are `offline`, `active`, `planned`, `staged`, `failed` and `inventory`. Defaults to `active`.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tenantId": {
                    "type": "integer"
                },
                "virtualChassisId": {
                    "type": "integer",
                    "description": "Required when `virtual_chassis_master` and `virtual_chassis_id` is set.\n"
                },
                "virtualChassisMaster": {
                    "type": "boolean",
                    "description": "Required when `virtual_chassis_master` and `virtual_chassis_id` is set.\n"
                },
                "virtualChassisPosition": {
                    "type": "integer"
                },
                "virtualChassisPriority": {
                    "type": "integer"
                }
            },
            "required": [
                "deviceTypeId",
                "name",
                "primaryIpv4",
                "primaryIpv6",
                "roleId",
                "siteId"
            ],
            "inputProperties": {
                "assetTag": {
                    "type": "string"
                },
                "clusterId": {
                    "type": "integer"
                },
                "comments": {
                    "type": "string"
                },
                "configTemplateId": {
                    "type": "integer"
                },
                "customFields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "deviceTypeId": {
                    "type": "integer"
                },
                "localContextData": {
                    "type": "string",
                    "description": "This is best managed through the use of `jsonencode` and a map of settings.\n"
                },
                "locationId": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "platformId": {
                    "type": "integer"
                },
                "rackFace": {
                    "type": "string",
                    "description": "Valid values are `front` and `rear`. Required when `rack_position` is set.\n"
                },
                "rackId": {
                    "type": "integer"
                },
                "rackPosition": {
                    "type": "number"
                },
                "roleId": {
                    "type": "integer"
                },
                "serial": {
                    "type": "string"
                },
                "siteId": {
                    "type": "integer"
                },
                "status": {
                    "type": "string",
                    "description": "Valid values are `offline`, `active`, `planned`, `staged`, `failed` and `inventory`. Defaults to `active`.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tenantId": {
                    "type": "integer"
                },
                "virtualChassisId": {
                    "type": "integer",
                    "description": "Required when `virtual_chassis_master` and `virtual_chassis_id` is set.\n"
                },
                "virtualChassisMaster": {
                    "type": "boolean",
                    "description": "Required when `virtual_chassis_master` and `virtual_chassis_id` is set.\n"
                },
                "virtualChassisPosition": {
                    "type": "integer"
                },
                "virtualChassisPriority": {
                    "type": "integer"
                }
            },
            "requiredInputs": [
                "deviceTypeId",
                "roleId",
                "siteId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Device resources.\n",
                "properties": {
                    "assetTag": {
                        "type": "string"
                    },
                    "clusterId": {
                        "type": "integer"
                    },
                    "comments": {
                        "type": "string"
                    },
                    "configTemplateId": {
                        "type": "integer"
                    },
                    "customFields": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "deviceTypeId": {
                        "type": "integer"
                    },
                    "localContextData": {
                        "type": "string",
                        "description": "This is best managed through the use of `jsonencode` and a map of settings.\n"
                    },
                    "locationId": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "platformId": {
                        "type": "integer"
                    },
                    "primaryIpv4": {
                        "type": "integer"
                    },
                    "primaryIpv6": {
                        "type": "integer"
                    },
                    "rackFace": {
                        "type": "string",
                        "description": "Valid values are `front` and `rear`. Required when `rack_position` is set.\n"
                    },
                    "rackId": {
                        "type": "integer"
                    },
                    "rackPosition": {
                        "type": "number"
                    },
                    "roleId": {
                        "type": "integer"
                    },
                    "serial": {
                        "type": "string"
                    },
                    "siteId": {
                        "type": "integer"
                    },
                    "status": {
                        "type": "string",
                        "description": "Valid values are `offline`, `active`, `planned`, `staged`, `failed` and `inventory`. Defaults to `active`.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "tenantId": {
                        "type": "integer"
                    },
                    "virtualChassisId": {
                        "type": "integer",
                        "description": "Required when `virtual_chassis_master` and `virtual_chassis_id` is set.\n"
                    },
                    "virtualChassisMaster": {
                        "type": "boolean",
                        "description": "Required when `virtual_chassis_master` and `virtual_chassis_id` is set.\n"
                    },
                    "virtualChassisPosition": {
                        "type": "integer"
                    },
                    "virtualChassisPriority": {
                        "type": "integer"
                    }
                },
                "type": "object"
            }
        },
        "netbox:index/group:Group": {
            "description": "This resource is used to manage groups.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumiverse/netbox\";\n\nconst test = new netbox.Group(\"test\", {});\n```\n```python\nimport pulumi\nimport pulumi_netbox as netbox\n\ntest = netbox.Group(\"test\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Netbox = Pulumiverse.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = new Netbox.Group(\"test\");\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := netbox.NewGroup(ctx, \"test\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.Group;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new Group(\"test\");\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: netbox:Group\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "name": {
                    "type": "string"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "name": {
                    "type": "string"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Group resources.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "netbox:index/interface:Interface": {
            "description": "From the [official documentation](https://docs.netbox.dev/en/stable/features/virtualization/#interfaces):\n\n\u003e Virtual machine interfaces behave similarly to device interfaces, and can be assigned to VRFs, and may have IP addresses, VLANs, and services attached to them. However, given their virtual nature, they lack properties pertaining to physical attributes. For example, VM interfaces do not have a physical type and cannot have cables attached to them.\n\n",
            "properties": {
                "description": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Defaults to `true`.\n"
                },
                "macAddress": {
                    "type": "string"
                },
                "mode": {
                    "type": "string",
                    "description": "Valid values are `access`, `tagged` and `tagged-all`.\n"
                },
                "mtu": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "taggedVlans": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "This attribute is not supported by netbox any longer. It will be removed in future versions of this provider."
                },
                "untaggedVlan": {
                    "type": "integer"
                },
                "virtualMachineId": {
                    "type": "integer"
                }
            },
            "required": [
                "name",
                "virtualMachineId"
            ],
            "inputProperties": {
                "description": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Defaults to `true`.\n"
                },
                "macAddress": {
                    "type": "string"
                },
                "mode": {
                    "type": "string",
                    "description": "Valid values are `access`, `tagged` and `tagged-all`.\n"
                },
                "mtu": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "taggedVlans": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "type": {
                    "type": "string",
                    "deprecationMessage": "This attribute is not supported by netbox any longer. It will be removed in future versions of this provider."
                },
                "untaggedVlan": {
                    "type": "integer"
                },
                "virtualMachineId": {
                    "type": "integer"
                }
            },
            "requiredInputs": [
                "virtualMachineId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Interface resources.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Defaults to `true`.\n"
                    },
                    "macAddress": {
                        "type": "string"
                    },
                    "mode": {
                        "type": "string",
                        "description": "Valid values are `access`, `tagged` and `tagged-all`.\n"
                    },
                    "mtu": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "taggedVlans": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "type": {
                        "type": "string",
                        "deprecationMessage": "This attribute is not supported by netbox any longer. It will be removed in future versions of this provider."
                    },
                    "untaggedVlan": {
                        "type": "integer"
                    },
                    "virtualMachineId": {
                        "type": "integer"
                    }
                },
                "type": "object"
            }
        },
        "netbox:index/location:Location": {
            "description": "From the [official documentation](https://docs.netbox.dev/en/stable/features/sites-and-racks/#locations):\n\n\u003e Racks and devices can be grouped by location within a site. A location may represent a floor, room, cage, or similar organizational unit. Locations can be nested to form a hierarchy. For example, you may have floors within a site, and rooms within a floor.\n\nEach location must have a name that is unique within its parent site and location, if any.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumiverse/netbox\";\n\nconst testSite = new netbox.Site(\"testSite\", {});\nconst testTenant = new netbox.Tenant(\"testTenant\", {});\nconst testLocation = new netbox.Location(\"testLocation\", {\n    description: \"my description\",\n    siteId: testSite.id,\n    tenantId: testTenant.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_netbox as netbox\n\ntest_site = netbox.Site(\"testSite\")\ntest_tenant = netbox.Tenant(\"testTenant\")\ntest_location = netbox.Location(\"testLocation\",\n    description=\"my description\",\n    site_id=test_site.id,\n    tenant_id=test_tenant.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Netbox = Pulumiverse.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var testSite = new Netbox.Site(\"testSite\");\n\n    var testTenant = new Netbox.Tenant(\"testTenant\");\n\n    var testLocation = new Netbox.Location(\"testLocation\", new()\n    {\n        Description = \"my description\",\n        SiteId = testSite.Id,\n        TenantId = testTenant.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttestSite, err := netbox.NewSite(ctx, \"testSite\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttestTenant, err := netbox.NewTenant(ctx, \"testTenant\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = netbox.NewLocation(ctx, \"testLocation\", \u0026netbox.LocationArgs{\n\t\t\tDescription: pulumi.String(\"my description\"),\n\t\t\tSiteId:      testSite.ID(),\n\t\t\tTenantId:    testTenant.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.Site;\nimport com.pulumi.netbox.Tenant;\nimport com.pulumi.netbox.Location;\nimport com.pulumi.netbox.LocationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var testSite = new Site(\"testSite\");\n\n        var testTenant = new Tenant(\"testTenant\");\n\n        var testLocation = new Location(\"testLocation\", LocationArgs.builder()\n            .description(\"my description\")\n            .siteId(testSite.id())\n            .tenantId(testTenant.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  testSite:\n    type: netbox:Site\n  testTenant:\n    type: netbox:Tenant\n  testLocation:\n    type: netbox:Location\n    properties:\n      description: my description\n      siteId: ${testSite.id}\n      tenantId: ${testTenant.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "customFields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "parentId": {
                    "type": "integer"
                },
                "siteId": {
                    "type": "integer"
                },
                "slug": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tenantId": {
                    "type": "integer"
                }
            },
            "required": [
                "name",
                "slug"
            ],
            "inputProperties": {
                "customFields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "parentId": {
                    "type": "integer"
                },
                "siteId": {
                    "type": "integer"
                },
                "slug": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tenantId": {
                    "type": "integer"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Location resources.\n",
                "properties": {
                    "customFields": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "parentId": {
                        "type": "integer"
                    },
                    "siteId": {
                        "type": "integer"
                    },
                    "slug": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "tenantId": {
                        "type": "integer"
                    }
                },
                "type": "object"
            }
        },
        "netbox:index/manufacturer:Manufacturer": {
            "description": "From the [official documentation](https://docs.netbox.dev/en/stable/features/device-types/#manufacturers):\n\n\u003e A manufacturer represents the \"make\" of a device; e.g. Cisco or Dell. Each device type must be assigned to a manufacturer. (Inventory items and platforms may also be associated with manufacturers.) Each manufacturer must have a unique name and may have a description assigned to it.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumiverse/netbox\";\n\nconst test = new netbox.Manufacturer(\"test\", {});\n```\n```python\nimport pulumi\nimport pulumi_netbox as netbox\n\ntest = netbox.Manufacturer(\"test\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Netbox = Pulumiverse.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = new Netbox.Manufacturer(\"test\");\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := netbox.NewManufacturer(ctx, \"test\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.Manufacturer;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new Manufacturer(\"test\");\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: netbox:Manufacturer\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "name": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                }
            },
            "required": [
                "name",
                "slug"
            ],
            "inputProperties": {
                "name": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Manufacturer resources.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "netbox:index/module:Module": {
            "description": "From the [official documentation](https://docs.netbox.dev/en/stable/models/dcim/module/):\n\n\u003e A module is a field-replaceable hardware component installed within a device which houses its own child components. The most common example is a chassis-based router or switch.\n\nSimilar to devices, modules are instantiated from module types, and any components associated with the module type are automatically instantiated on the new model. Each module must be installed within a module bay on a device, and each module bay may have only one module installed in it.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumiverse/netbox\";\n\n// Note that some terraform code is not included in the example for brevity\nconst testDevice = new netbox.Device(\"testDevice\", {\n    deviceTypeId: netbox_device_type.test.id,\n    roleId: netbox_device_role.test.id,\n    siteId: netbox_site.test.id,\n});\nconst testBay = new netbox.device.module.Bay(\"testBay\", {deviceId: testDevice.id});\nconst testManufacturer = new netbox.Manufacturer(\"testManufacturer\", {});\nconst testType = new netbox.module.Type(\"testType\", {\n    manufacturerId: testManufacturer.id,\n    model: \"Networking\",\n});\nconst testModule = new netbox.Module(\"testModule\", {\n    deviceId: testDevice.id,\n    moduleBayId: testBay.id,\n    moduleTypeId: testType.id,\n    status: \"active\",\n    description: \"SFP card\",\n});\n```\n```python\nimport pulumi\nimport pulumi_netbox as netbox\n\n# Note that some terraform code is not included in the example for brevity\ntest_device = netbox.Device(\"testDevice\",\n    device_type_id=netbox_device_type[\"test\"][\"id\"],\n    role_id=netbox_device_role[\"test\"][\"id\"],\n    site_id=netbox_site[\"test\"][\"id\"])\ntest_bay = netbox.device.module.Bay(\"testBay\", device_id=test_device.id)\ntest_manufacturer = netbox.Manufacturer(\"testManufacturer\")\ntest_type = netbox.module.Type(\"testType\",\n    manufacturer_id=test_manufacturer.id,\n    model=\"Networking\")\ntest_module = netbox.Module(\"testModule\",\n    device_id=test_device.id,\n    module_bay_id=test_bay.id,\n    module_type_id=test_type.id,\n    status=\"active\",\n    description=\"SFP card\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Netbox = Pulumiverse.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Note that some terraform code is not included in the example for brevity\n    var testDevice = new Netbox.Device(\"testDevice\", new()\n    {\n        DeviceTypeId = netbox_device_type.Test.Id,\n        RoleId = netbox_device_role.Test.Id,\n        SiteId = netbox_site.Test.Id,\n    });\n\n    var testBay = new Netbox.Device.Module.Bay(\"testBay\", new()\n    {\n        DeviceId = testDevice.Id,\n    });\n\n    var testManufacturer = new Netbox.Manufacturer(\"testManufacturer\");\n\n    var testType = new Netbox.Module.Type(\"testType\", new()\n    {\n        ManufacturerId = testManufacturer.Id,\n        Model = \"Networking\",\n    });\n\n    var testModule = new Netbox.Module(\"testModule\", new()\n    {\n        DeviceId = testDevice.Id,\n        ModuleBayId = testBay.Id,\n        ModuleTypeId = testType.Id,\n        Status = \"active\",\n        Description = \"SFP card\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox\"\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox/device\"\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox/module\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Note that some terraform code is not included in the example for brevity\n\t\ttestDevice, err := netbox.NewDevice(ctx, \"testDevice\", \u0026netbox.DeviceArgs{\n\t\t\tDeviceTypeId: pulumi.Any(netbox_device_type.Test.Id),\n\t\t\tRoleId:       pulumi.Any(netbox_device_role.Test.Id),\n\t\t\tSiteId:       pulumi.Any(netbox_site.Test.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttestBay, err := device.NewBay(ctx, \"testBay\", \u0026device.BayArgs{\n\t\t\tDeviceId: testDevice.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttestManufacturer, err := netbox.NewManufacturer(ctx, \"testManufacturer\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttestType, err := module.NewType(ctx, \"testType\", \u0026module.TypeArgs{\n\t\t\tManufacturerId: testManufacturer.ID(),\n\t\t\tModel:          pulumi.String(\"Networking\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = netbox.NewModule(ctx, \"testModule\", \u0026netbox.ModuleArgs{\n\t\t\tDeviceId:     testDevice.ID(),\n\t\t\tModuleBayId:  testBay.ID(),\n\t\t\tModuleTypeId: testType.ID(),\n\t\t\tStatus:       pulumi.String(\"active\"),\n\t\t\tDescription:  pulumi.String(\"SFP card\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.Device;\nimport com.pulumi.netbox.DeviceArgs;\nimport com.pulumi.netbox.device.Bay;\nimport com.pulumi.netbox.device.BayArgs;\nimport com.pulumi.netbox.Manufacturer;\nimport com.pulumi.netbox.module.Type;\nimport com.pulumi.netbox.module.TypeArgs;\nimport com.pulumi.netbox.Module;\nimport com.pulumi.netbox.ModuleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Note that some terraform code is not included in the example for brevity\n        var testDevice = new Device(\"testDevice\", DeviceArgs.builder()\n            .deviceTypeId(netbox_device_type.test().id())\n            .roleId(netbox_device_role.test().id())\n            .siteId(netbox_site.test().id())\n            .build());\n\n        var testBay = new Bay(\"testBay\", BayArgs.builder()\n            .deviceId(testDevice.id())\n            .build());\n\n        var testManufacturer = new Manufacturer(\"testManufacturer\");\n\n        var testType = new Type(\"testType\", TypeArgs.builder()\n            .manufacturerId(testManufacturer.id())\n            .model(\"Networking\")\n            .build());\n\n        var testModule = new Module(\"testModule\", ModuleArgs.builder()\n            .deviceId(testDevice.id())\n            .moduleBayId(testBay.id())\n            .moduleTypeId(testType.id())\n            .status(\"active\")\n            .description(\"SFP card\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Note that some terraform code is not included in the example for brevity\n  testDevice:\n    type: netbox:Device\n    properties:\n      deviceTypeId: ${netbox_device_type.test.id}\n      roleId: ${netbox_device_role.test.id}\n      siteId: ${netbox_site.test.id}\n  testBay:\n    type: netbox:device/module:Bay\n    properties:\n      deviceId: ${testDevice.id}\n  testManufacturer:\n    type: netbox:Manufacturer\n  testType:\n    type: netbox:module:Type\n    properties:\n      manufacturerId: ${testManufacturer.id}\n      model: Networking\n  testModule:\n    type: netbox:Module\n    properties:\n      deviceId: ${testDevice.id}\n      moduleBayId: ${testBay.id}\n      moduleTypeId: ${testType.id}\n      status: active\n      description: SFP card\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "assetTag": {
                    "type": "string"
                },
                "comments": {
                    "type": "string"
                },
                "customFields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "deviceId": {
                    "type": "integer"
                },
                "moduleBayId": {
                    "type": "integer"
                },
                "moduleTypeId": {
                    "type": "integer"
                },
                "serial": {
                    "type": "string"
                },
                "status": {
                    "type": "string",
                    "description": "One of [offline, active, planned, staged, failed, decommissioning].\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": [
                "deviceId",
                "moduleBayId",
                "moduleTypeId",
                "status"
            ],
            "inputProperties": {
                "assetTag": {
                    "type": "string"
                },
                "comments": {
                    "type": "string"
                },
                "customFields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "deviceId": {
                    "type": "integer"
                },
                "moduleBayId": {
                    "type": "integer"
                },
                "moduleTypeId": {
                    "type": "integer"
                },
                "serial": {
                    "type": "string"
                },
                "status": {
                    "type": "string",
                    "description": "One of [offline, active, planned, staged, failed, decommissioning].\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "requiredInputs": [
                "deviceId",
                "moduleBayId",
                "moduleTypeId",
                "status"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Module resources.\n",
                "properties": {
                    "assetTag": {
                        "type": "string"
                    },
                    "comments": {
                        "type": "string"
                    },
                    "customFields": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "deviceId": {
                        "type": "integer"
                    },
                    "moduleBayId": {
                        "type": "integer"
                    },
                    "moduleTypeId": {
                        "type": "integer"
                    },
                    "serial": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string",
                        "description": "One of [offline, active, planned, staged, failed, decommissioning].\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object"
            }
        },
        "netbox:index/permission:Permission": {
            "description": "This resource manages the object-based permissions for Netbox users, built into the application.\n\n\u003e Object-based permissions enable an administrator to grant users or groups the ability to perform an action on arbitrary subsets of objects in NetBox, rather than all objects of a certain type.\n\u003e For more information, see the [Netbox Object-Based Permissions Docs.](https://docs.netbox.dev/en/stable/administration/permissions/)\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumiverse/netbox\";\n\nconst testUser = new netbox.User(\"testUser\", {\n    username: \"johndoe\",\n    password: \"abcdefghijkl\",\n    active: true,\n    staff: true,\n});\nconst testPermission = new netbox.Permission(\"testPermission\", {\n    description: \"my description\",\n    enabled: true,\n    objectTypes: [\"ipam.prefix\"],\n    actions: [\n        \"add\",\n        \"change\",\n    ],\n    users: [testUser.id],\n    constraints: JSON.stringify([{\n        status: \"active\",\n    }]),\n});\n```\n```python\nimport pulumi\nimport json\nimport pulumi_netbox as netbox\n\ntest_user = netbox.User(\"testUser\",\n    username=\"johndoe\",\n    password=\"abcdefghijkl\",\n    active=True,\n    staff=True)\ntest_permission = netbox.Permission(\"testPermission\",\n    description=\"my description\",\n    enabled=True,\n    object_types=[\"ipam.prefix\"],\n    actions=[\n        \"add\",\n        \"change\",\n    ],\n    users=[test_user.id],\n    constraints=json.dumps([{\n        \"status\": \"active\",\n    }]))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.Json;\nusing Pulumi;\nusing Netbox = Pulumiverse.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var testUser = new Netbox.User(\"testUser\", new()\n    {\n        Username = \"johndoe\",\n        Password = \"abcdefghijkl\",\n        Active = true,\n        Staff = true,\n    });\n\n    var testPermission = new Netbox.Permission(\"testPermission\", new()\n    {\n        Description = \"my description\",\n        Enabled = true,\n        ObjectTypes = new[]\n        {\n            \"ipam.prefix\",\n        },\n        Actions = new[]\n        {\n            \"add\",\n            \"change\",\n        },\n        Users = new[]\n        {\n            testUser.Id,\n        },\n        Constraints = JsonSerializer.Serialize(new[]\n        {\n            new Dictionary\u003cstring, object?\u003e\n            {\n                [\"status\"] = \"active\",\n            },\n        }),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttestUser, err := netbox.NewUser(ctx, \"testUser\", \u0026netbox.UserArgs{\n\t\t\tUsername: pulumi.String(\"johndoe\"),\n\t\t\tPassword: pulumi.String(\"abcdefghijkl\"),\n\t\t\tActive:   pulumi.Bool(true),\n\t\t\tStaff:    pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttmpJSON0, err := json.Marshal([]map[string]interface{}{\n\t\t\tmap[string]interface{}{\n\t\t\t\t\"status\": \"active\",\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson0 := string(tmpJSON0)\n\t\t_, err = netbox.NewPermission(ctx, \"testPermission\", \u0026netbox.PermissionArgs{\n\t\t\tDescription: pulumi.String(\"my description\"),\n\t\t\tEnabled:     pulumi.Bool(true),\n\t\t\tObjectTypes: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"ipam.prefix\"),\n\t\t\t},\n\t\t\tActions: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"add\"),\n\t\t\t\tpulumi.String(\"change\"),\n\t\t\t},\n\t\t\tUsers: pulumi.IntArray{\n\t\t\t\ttestUser.ID(),\n\t\t\t},\n\t\t\tConstraints: pulumi.String(json0),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.User;\nimport com.pulumi.netbox.UserArgs;\nimport com.pulumi.netbox.Permission;\nimport com.pulumi.netbox.PermissionArgs;\nimport static com.pulumi.codegen.internal.Serialization.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var testUser = new User(\"testUser\", UserArgs.builder()\n            .username(\"johndoe\")\n            .password(\"abcdefghijkl\")\n            .active(true)\n            .staff(true)\n            .build());\n\n        var testPermission = new Permission(\"testPermission\", PermissionArgs.builder()\n            .description(\"my description\")\n            .enabled(true)\n            .objectTypes(\"ipam.prefix\")\n            .actions(            \n                \"add\",\n                \"change\")\n            .users(testUser.id())\n            .constraints(serializeJson(\n                jsonArray(jsonObject(\n                    jsonProperty(\"status\", \"active\")\n                ))))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  testUser:\n    type: netbox:User\n    properties:\n      username: johndoe\n      password: abcdefghijkl\n      active: true\n      staff: true\n  testPermission:\n    type: netbox:Permission\n    properties:\n      description: my description\n      enabled: true\n      objectTypes:\n        - ipam.prefix\n      actions:\n        - add\n        - change\n      users:\n        - ${testUser.id}\n      constraints:\n        fn::toJSON:\n          - status: active\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "actions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list actions that are allowed on the object types. Acceptable values are `view`, `add`, `change`, or `delete`.\n"
                },
                "constraints": {
                    "type": "string",
                    "description": "A JSON string of an arbitrary filter used to limit the granted action(s) to a specific subset of objects. For more information on correct syntax, see https://docs.netbox.dev/en/stable/administration/permissions/#constraints.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the permission object.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the permission object is enabled or not. Defaults to `true`.\n"
                },
                "groups": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "A list of group IDs that have been assigned to this permission object.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the permission object.\n"
                },
                "objectTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of object types that the permission object allows access to. Should be in a form the API can accept. For example: `circuits.provider`, `dcim.inventoryitem`, etc.\n"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "A list of user IDs that have been assigned to this permission object.\n"
                }
            },
            "required": [
                "actions",
                "name",
                "objectTypes"
            ],
            "inputProperties": {
                "actions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list actions that are allowed on the object types. Acceptable values are `view`, `add`, `change`, or `delete`.\n"
                },
                "constraints": {
                    "type": "string",
                    "description": "A JSON string of an arbitrary filter used to limit the granted action(s) to a specific subset of objects. For more information on correct syntax, see https://docs.netbox.dev/en/stable/administration/permissions/#constraints.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the permission object.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the permission object is enabled or not. Defaults to `true`.\n"
                },
                "groups": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "A list of group IDs that have been assigned to this permission object.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the permission object.\n"
                },
                "objectTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of object types that the permission object allows access to. Should be in a form the API can accept. For example: `circuits.provider`, `dcim.inventoryitem`, etc.\n"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "A list of user IDs that have been assigned to this permission object.\n"
                }
            },
            "requiredInputs": [
                "actions",
                "objectTypes"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Permission resources.\n",
                "properties": {
                    "actions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list actions that are allowed on the object types. Acceptable values are `view`, `add`, `change`, or `delete`.\n"
                    },
                    "constraints": {
                        "type": "string",
                        "description": "A JSON string of an arbitrary filter used to limit the granted action(s) to a specific subset of objects. For more information on correct syntax, see https://docs.netbox.dev/en/stable/administration/permissions/#constraints.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the permission object.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether the permission object is enabled or not. Defaults to `true`.\n"
                    },
                    "groups": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "A list of group IDs that have been assigned to this permission object.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the permission object.\n"
                    },
                    "objectTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of object types that the permission object allows access to. Should be in a form the API can accept. For example: `circuits.provider`, `dcim.inventoryitem`, etc.\n"
                    },
                    "users": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "A list of user IDs that have been assigned to this permission object.\n"
                    }
                },
                "type": "object"
            }
        },
        "netbox:index/platform:Platform": {
            "description": "From the [official documentation](https://docs.netbox.dev/en/stable/features/devices/#platforms):\n\n\u003e A platform defines the type of software running on a device or virtual machine. This can be helpful to model when it is necessary to distinguish between different versions or feature sets. Note that two devices of the same type may be assigned different platforms: For example, one Juniper MX240 might run Junos 14 while another runs Junos 15.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumiverse/netbox\";\n\n// Resource for PanOS (e.g. Panorama from Palo Alto)\nconst pANOS = new netbox.Platform(\"pANOS\", {});\n```\n```python\nimport pulumi\nimport pulumi_netbox as netbox\n\n# Resource for PanOS (e.g. Panorama from Palo Alto)\np_anos = netbox.Platform(\"pANOS\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Netbox = Pulumiverse.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Resource for PanOS (e.g. Panorama from Palo Alto)\n    var pANOS = new Netbox.Platform(\"pANOS\");\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Resource for PanOS (e.g. Panorama from Palo Alto)\n\t\t_, err := netbox.NewPlatform(ctx, \"pANOS\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.Platform;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Resource for PanOS (e.g. Panorama from Palo Alto)\n        var pANOS = new Platform(\"pANOS\");\n\n    }\n}\n```\n```yaml\nresources:\n  # Resource for PanOS (e.g. Panorama from Palo Alto)\n  pANOS:\n    type: netbox:Platform\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "manufacturerId": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                }
            },
            "required": [
                "name",
                "slug"
            ],
            "inputProperties": {
                "manufacturerId": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Platform resources.\n",
                "properties": {
                    "manufacturerId": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "netbox:index/prefix:Prefix": {
            "description": "From the [official documentation](https://docs.netbox.dev/en/stable/features/ipam/#prefixes):\n\n\u003e A prefix is an IPv4 or IPv6 network and mask expressed in CIDR notation (e.g. 192.0.2.0/24). A prefix entails only the \"network portion\" of an IP address: All bits in the address not covered by the mask must be zero. (In other words, a prefix cannot be a specific IP address.)\n\u003e\n\u003e Prefixes are automatically organized by their parent aggregates. Additionally, each prefix can be assigned to a particular site and virtual routing and forwarding instance (VRF). Each VRF represents a separate IP space or routing table. All prefixes not assigned to a VRF are considered to be in the \"global\" table.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumiverse/netbox\";\n\nconst myPrefix = new netbox.Prefix(\"myPrefix\", {\n    description: \"test prefix\",\n    prefix: \"10.0.0.0/24\",\n    status: \"active\",\n});\n```\n```python\nimport pulumi\nimport pulumi_netbox as netbox\n\nmy_prefix = netbox.Prefix(\"myPrefix\",\n    description=\"test prefix\",\n    prefix=\"10.0.0.0/24\",\n    status=\"active\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Netbox = Pulumiverse.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myPrefix = new Netbox.Prefix(\"myPrefix\", new()\n    {\n        Description = \"test prefix\",\n        Prefix = \"10.0.0.0/24\",\n        Status = \"active\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := netbox.NewPrefix(ctx, \"myPrefix\", \u0026netbox.PrefixArgs{\n\t\t\tDescription: pulumi.String(\"test prefix\"),\n\t\t\tPrefix:      pulumi.String(\"10.0.0.0/24\"),\n\t\t\tStatus:      pulumi.String(\"active\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.Prefix;\nimport com.pulumi.netbox.PrefixArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myPrefix = new Prefix(\"myPrefix\", PrefixArgs.builder()\n            .description(\"test prefix\")\n            .prefix(\"10.0.0.0/24\")\n            .status(\"active\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myPrefix:\n    type: netbox:Prefix\n    properties:\n      description: test prefix\n      prefix: 10.0.0.0/24\n      status: active\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "customFields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "isPool": {
                    "type": "boolean"
                },
                "markUtilized": {
                    "type": "boolean"
                },
                "prefix": {
                    "type": "string"
                },
                "roleId": {
                    "type": "integer"
                },
                "siteId": {
                    "type": "integer"
                },
                "status": {
                    "type": "string",
                    "description": "Valid values are `active`, `container`, `reserved` and `deprecated`.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tenantId": {
                    "type": "integer"
                },
                "vlanId": {
                    "type": "integer"
                },
                "vrfId": {
                    "type": "integer"
                }
            },
            "required": [
                "prefix",
                "status"
            ],
            "inputProperties": {
                "customFields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "isPool": {
                    "type": "boolean"
                },
                "markUtilized": {
                    "type": "boolean"
                },
                "prefix": {
                    "type": "string"
                },
                "roleId": {
                    "type": "integer"
                },
                "siteId": {
                    "type": "integer"
                },
                "status": {
                    "type": "string",
                    "description": "Valid values are `active`, `container`, `reserved` and `deprecated`.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tenantId": {
                    "type": "integer"
                },
                "vlanId": {
                    "type": "integer"
                },
                "vrfId": {
                    "type": "integer"
                }
            },
            "requiredInputs": [
                "prefix",
                "status"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Prefix resources.\n",
                "properties": {
                    "customFields": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "isPool": {
                        "type": "boolean"
                    },
                    "markUtilized": {
                        "type": "boolean"
                    },
                    "prefix": {
                        "type": "string"
                    },
                    "roleId": {
                        "type": "integer"
                    },
                    "siteId": {
                        "type": "integer"
                    },
                    "status": {
                        "type": "string",
                        "description": "Valid values are `active`, `container`, `reserved` and `deprecated`.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "tenantId": {
                        "type": "integer"
                    },
                    "vlanId": {
                        "type": "integer"
                    },
                    "vrfId": {
                        "type": "integer"
                    }
                },
                "type": "object"
            }
        },
        "netbox:index/rack:Rack": {
            "description": "From the [official documentation](https://docs.netbox.dev/en/stable/models/dcim/rack/):\n\n\u003e The rack model represents a physical two- or four-post equipment rack in which devices can be installed. Each rack must be assigned to a site, and may optionally be assigned to a location within that site. Racks can also be organized by user-defined functional roles. The name and facility ID of each rack within a location must be unique.\n\nRack height is measured in rack units (U); racks are commonly between 42U and 48U tall, but NetBox allows you to define racks of arbitrary height. A toggle is provided to indicate whether rack units are in ascending (from the ground up) or descending order.\n\nEach rack is assigned a name and (optionally) a separate facility ID. This is helpful when leasing space in a data center your organization does not own: The facility will often assign a seemingly arbitrary ID to a rack (for example, \"M204.313\") whereas internally you refer to is simply as \"R113.\" A unique serial number and asset tag may also be associated with each rack.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumiverse/netbox\";\n\nconst testSite = new netbox.Site(\"testSite\", {status: \"active\"});\nconst testRack = new netbox.Rack(\"testRack\", {\n    siteId: testSite.id,\n    status: \"reserved\",\n    width: 19,\n    uHeight: 48,\n});\n```\n```python\nimport pulumi\nimport pulumi_netbox as netbox\n\ntest_site = netbox.Site(\"testSite\", status=\"active\")\ntest_rack = netbox.Rack(\"testRack\",\n    site_id=test_site.id,\n    status=\"reserved\",\n    width=19,\n    u_height=48)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Netbox = Pulumiverse.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var testSite = new Netbox.Site(\"testSite\", new()\n    {\n        Status = \"active\",\n    });\n\n    var testRack = new Netbox.Rack(\"testRack\", new()\n    {\n        SiteId = testSite.Id,\n        Status = \"reserved\",\n        Width = 19,\n        UHeight = 48,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttestSite, err := netbox.NewSite(ctx, \"testSite\", \u0026netbox.SiteArgs{\n\t\t\tStatus: pulumi.String(\"active\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = netbox.NewRack(ctx, \"testRack\", \u0026netbox.RackArgs{\n\t\t\tSiteId:  testSite.ID(),\n\t\t\tStatus:  pulumi.String(\"reserved\"),\n\t\t\tWidth:   pulumi.Int(19),\n\t\t\tUHeight: pulumi.Int(48),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.Site;\nimport com.pulumi.netbox.SiteArgs;\nimport com.pulumi.netbox.Rack;\nimport com.pulumi.netbox.RackArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var testSite = new Site(\"testSite\", SiteArgs.builder()\n            .status(\"active\")\n            .build());\n\n        var testRack = new Rack(\"testRack\", RackArgs.builder()\n            .siteId(testSite.id())\n            .status(\"reserved\")\n            .width(19)\n            .uHeight(48)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  testSite:\n    type: netbox:Site\n    properties:\n      status: active\n  testRack:\n    type: netbox:Rack\n    properties:\n      siteId: ${testSite.id}\n      status: reserved\n      width: 19\n      uHeight: 48\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "assetTag": {
                    "type": "string"
                },
                "comments": {
                    "type": "string"
                },
                "customFields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "descUnits": {
                    "type": "boolean",
                    "description": "If rack units are descending. Defaults to `false`.\n"
                },
                "description": {
                    "type": "string"
                },
                "facilityId": {
                    "type": "string"
                },
                "locationId": {
                    "type": "integer"
                },
                "maxWeight": {
                    "type": "integer"
                },
                "mountingDepth": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "outerDepth": {
                    "type": "integer"
                },
                "outerUnit": {
                    "type": "string",
                    "description": "Valid values are `mm` and `in`. Required when `outer_width` and `outer_depth` is set.\n"
                },
                "outerWidth": {
                    "type": "integer"
                },
                "roleId": {
                    "type": "integer"
                },
                "serial": {
                    "type": "string"
                },
                "siteId": {
                    "type": "integer"
                },
                "status": {
                    "type": "string",
                    "description": "Valid values are `reserved`, `available`, `planned`, `active` and `deprecated`.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tenantId": {
                    "type": "integer"
                },
                "type": {
                    "type": "string",
                    "description": "Valid values are `2-post-frame`, `4-post-frame`, `4-post-cabinet`, `wall-frame`, `wall-frame-vertical`, `wall-cabinet` and `wall-cabinet-vertical`.\n"
                },
                "uHeight": {
                    "type": "integer"
                },
                "weight": {
                    "type": "number"
                },
                "weightUnit": {
                    "type": "string",
                    "description": "Valid values are `kg`, `g`, `lb` and `oz`. Required when `weight` and `max_weight` is set.\n"
                },
                "width": {
                    "type": "integer",
                    "description": "Valid values are `10`, `19`, `21` and `23`.\n"
                }
            },
            "required": [
                "name",
                "siteId",
                "status",
                "uHeight",
                "width"
            ],
            "inputProperties": {
                "assetTag": {
                    "type": "string"
                },
                "comments": {
                    "type": "string"
                },
                "customFields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "descUnits": {
                    "type": "boolean",
                    "description": "If rack units are descending. Defaults to `false`.\n"
                },
                "description": {
                    "type": "string"
                },
                "facilityId": {
                    "type": "string"
                },
                "locationId": {
                    "type": "integer"
                },
                "maxWeight": {
                    "type": "integer"
                },
                "mountingDepth": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "outerDepth": {
                    "type": "integer"
                },
                "outerUnit": {
                    "type": "string",
                    "description": "Valid values are `mm` and `in`. Required when `outer_width` and `outer_depth` is set.\n"
                },
                "outerWidth": {
                    "type": "integer"
                },
                "roleId": {
                    "type": "integer"
                },
                "serial": {
                    "type": "string"
                },
                "siteId": {
                    "type": "integer"
                },
                "status": {
                    "type": "string",
                    "description": "Valid values are `reserved`, `available`, `planned`, `active` and `deprecated`.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tenantId": {
                    "type": "integer"
                },
                "type": {
                    "type": "string",
                    "description": "Valid values are `2-post-frame`, `4-post-frame`, `4-post-cabinet`, `wall-frame`, `wall-frame-vertical`, `wall-cabinet` and `wall-cabinet-vertical`.\n"
                },
                "uHeight": {
                    "type": "integer"
                },
                "weight": {
                    "type": "number"
                },
                "weightUnit": {
                    "type": "string",
                    "description": "Valid values are `kg`, `g`, `lb` and `oz`. Required when `weight` and `max_weight` is set.\n"
                },
                "width": {
                    "type": "integer",
                    "description": "Valid values are `10`, `19`, `21` and `23`.\n"
                }
            },
            "requiredInputs": [
                "siteId",
                "status",
                "uHeight",
                "width"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Rack resources.\n",
                "properties": {
                    "assetTag": {
                        "type": "string"
                    },
                    "comments": {
                        "type": "string"
                    },
                    "customFields": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "descUnits": {
                        "type": "boolean",
                        "description": "If rack units are descending. Defaults to `false`.\n"
                    },
                    "description": {
                        "type": "string"
                    },
                    "facilityId": {
                        "type": "string"
                    },
                    "locationId": {
                        "type": "integer"
                    },
                    "maxWeight": {
                        "type": "integer"
                    },
                    "mountingDepth": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "outerDepth": {
                        "type": "integer"
                    },
                    "outerUnit": {
                        "type": "string",
                        "description": "Valid values are `mm` and `in`. Required when `outer_width` and `outer_depth` is set.\n"
                    },
                    "outerWidth": {
                        "type": "integer"
                    },
                    "roleId": {
                        "type": "integer"
                    },
                    "serial": {
                        "type": "string"
                    },
                    "siteId": {
                        "type": "integer"
                    },
                    "status": {
                        "type": "string",
                        "description": "Valid values are `reserved`, `available`, `planned`, `active` and `deprecated`.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "tenantId": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string",
                        "description": "Valid values are `2-post-frame`, `4-post-frame`, `4-post-cabinet`, `wall-frame`, `wall-frame-vertical`, `wall-cabinet` and `wall-cabinet-vertical`.\n"
                    },
                    "uHeight": {
                        "type": "integer"
                    },
                    "weight": {
                        "type": "number"
                    },
                    "weightUnit": {
                        "type": "string",
                        "description": "Valid values are `kg`, `g`, `lb` and `oz`. Required when `weight` and `max_weight` is set.\n"
                    },
                    "width": {
                        "type": "integer",
                        "description": "Valid values are `10`, `19`, `21` and `23`.\n"
                    }
                },
                "type": "object"
            }
        },
        "netbox:index/region:Region": {
            "description": "From the [official documentation](https://docs.netbox.dev/en/stable/features/sites-and-racks/#regions):\n\n\u003e Sites can be arranged geographically using regions. A region might represent a continent, country, city, campus, or other area depending on your use case. Regions can be nested recursively to construct a hierarchy. For example, you might define several country regions, and within each of those several state or city regions to which sites are assigned.\n\u003e\n\u003e Each region must have a name that is unique within its parent region, if any.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumiverse/netbox\";\n\nconst test = new netbox.Region(\"test\", {description: \"test description\"});\n```\n```python\nimport pulumi\nimport pulumi_netbox as netbox\n\ntest = netbox.Region(\"test\", description=\"test description\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Netbox = Pulumiverse.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = new Netbox.Region(\"test\", new()\n    {\n        Description = \"test description\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := netbox.NewRegion(ctx, \"test\", \u0026netbox.RegionArgs{\n\t\t\tDescription: pulumi.String(\"test description\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.Region;\nimport com.pulumi.netbox.RegionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new Region(\"test\", RegionArgs.builder()\n            .description(\"test description\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: netbox:Region\n    properties:\n      description: test description\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "parentRegionId": {
                    "type": "integer"
                },
                "slug": {
                    "type": "string"
                }
            },
            "required": [
                "name",
                "slug"
            ],
            "inputProperties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "parentRegionId": {
                    "type": "integer"
                },
                "slug": {
                    "type": "string"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Region resources.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "parentRegionId": {
                        "type": "integer"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "netbox:index/rir:Rir": {
            "description": "From the [official documentation](https://docs.netbox.dev/en/stable/features/ipam/#regional-internet-registries-rirs):\n\n\u003e Regional Internet registries are responsible for the allocation of globally-routable address space. The five RIRs are ARIN, RIPE, APNIC, LACNIC, and AFRINIC. However, some address space has been set aside for internal use, such as defined in RFCs 1918 and 6598. NetBox considers these RFCs as a sort of RIR as well; that is, an authority which \"owns\" certain address space. There also exist lower-tier registries which serve particular geographic areas.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumiverse/netbox\";\n\nconst test = new netbox.Rir(\"test\", {description: \"my description\"});\n```\n```python\nimport pulumi\nimport pulumi_netbox as netbox\n\ntest = netbox.Rir(\"test\", description=\"my description\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Netbox = Pulumiverse.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = new Netbox.Rir(\"test\", new()\n    {\n        Description = \"my description\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := netbox.NewRir(ctx, \"test\", \u0026netbox.RirArgs{\n\t\t\tDescription: pulumi.String(\"my description\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.Rir;\nimport com.pulumi.netbox.RirArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new Rir(\"test\", RirArgs.builder()\n            .description(\"my description\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: netbox:Rir\n    properties:\n      description: my description\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "description": {
                    "type": "string"
                },
                "isPrivate": {
                    "type": "boolean",
                    "description": "Defaults to `false`.\n"
                },
                "name": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                }
            },
            "required": [
                "name",
                "slug"
            ],
            "inputProperties": {
                "description": {
                    "type": "string"
                },
                "isPrivate": {
                    "type": "boolean",
                    "description": "Defaults to `false`.\n"
                },
                "name": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Rir resources.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "isPrivate": {
                        "type": "boolean",
                        "description": "Defaults to `false`.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "netbox:index/service:Service": {
            "description": "From the [official documentation](https://docs.netbox.dev/en/stable/features/services/#services):\n\n\u003e A service represents a layer four TCP or UDP service available on a device or virtual machine. For example, you might want to document that an HTTP service is running on a device. Each service includes a name, protocol, and port number; for example, \"SSH (TCP/22)\" or \"DNS (UDP/53).\"\n\u003e\n\u003e A service may optionally be bound to one or more specific IP addresses belonging to its parent device or VM. (If no IP addresses are bound, the service is assumed to be reachable via any assigned IP address.\n\n",
            "properties": {
                "customFields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                },
                "port": {
                    "type": "integer",
                    "description": "Exactly one of `port` or `ports` must be given.\n",
                    "deprecationMessage": "This field is deprecated. Please use the new \"ports\" attribute instead."
                },
                "ports": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Exactly one of `port` or `ports` must be given.\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "Valid values are `tcp`, `udp` and `sctp`.\n"
                },
                "virtualMachineId": {
                    "type": "integer"
                }
            },
            "required": [
                "name",
                "protocol",
                "virtualMachineId"
            ],
            "inputProperties": {
                "customFields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                },
                "port": {
                    "type": "integer",
                    "description": "Exactly one of `port` or `ports` must be given.\n",
                    "deprecationMessage": "This field is deprecated. Please use the new \"ports\" attribute instead."
                },
                "ports": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Exactly one of `port` or `ports` must be given.\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "Valid values are `tcp`, `udp` and `sctp`.\n"
                },
                "virtualMachineId": {
                    "type": "integer"
                }
            },
            "requiredInputs": [
                "protocol",
                "virtualMachineId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Service resources.\n",
                "properties": {
                    "customFields": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "port": {
                        "type": "integer",
                        "description": "Exactly one of `port` or `ports` must be given.\n",
                        "deprecationMessage": "This field is deprecated. Please use the new \"ports\" attribute instead."
                    },
                    "ports": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "Exactly one of `port` or `ports` must be given.\n"
                    },
                    "protocol": {
                        "type": "string",
                        "description": "Valid values are `tcp`, `udp` and `sctp`.\n"
                    },
                    "virtualMachineId": {
                        "type": "integer"
                    }
                },
                "type": "object"
            }
        },
        "netbox:index/site:Site": {
            "description": "From the [official documentation](https://docs.netbox.dev/en/stable/features/sites-and-racks/#sites):\n\n\u003e How you choose to employ sites when modeling your network may vary depending on the nature of your organization, but generally a site will equate to a building or campus. For example, a chain of banks might create a site to represent each of its branches, a site for its corporate headquarters, and two additional sites for its presence in two colocation facilities.\n\u003e\n\u003e Each site must be assigned a unique name and may optionally be assigned to a region and/or tenant.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```yaml\nresources:\n  example1:\n    type: netbox:Site\n    properties:\n      asn: 1337\n      facility: Data center\n      latitude: '-45.4085'\n      longitude: '30.1496'\n      status: staging\n      timezone: Africa/Johannesburg\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "asnIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "customFields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "facility": {
                    "type": "string"
                },
                "groupId": {
                    "type": "integer"
                },
                "latitude": {
                    "type": "number"
                },
                "longitude": {
                    "type": "number"
                },
                "name": {
                    "type": "string"
                },
                "physicalAddress": {
                    "type": "string"
                },
                "regionId": {
                    "type": "integer"
                },
                "shippingAddress": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                },
                "status": {
                    "type": "string",
                    "description": "Valid values are `planned`, `staging`, `active`, `decommissioning` and `retired`. Defaults to `active`.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tenantId": {
                    "type": "integer"
                },
                "timezone": {
                    "type": "string"
                }
            },
            "required": [
                "name",
                "slug"
            ],
            "inputProperties": {
                "asnIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "customFields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "facility": {
                    "type": "string"
                },
                "groupId": {
                    "type": "integer"
                },
                "latitude": {
                    "type": "number"
                },
                "longitude": {
                    "type": "number"
                },
                "name": {
                    "type": "string"
                },
                "physicalAddress": {
                    "type": "string"
                },
                "regionId": {
                    "type": "integer"
                },
                "shippingAddress": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                },
                "status": {
                    "type": "string",
                    "description": "Valid values are `planned`, `staging`, `active`, `decommissioning` and `retired`. Defaults to `active`.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tenantId": {
                    "type": "integer"
                },
                "timezone": {
                    "type": "string"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Site resources.\n",
                "properties": {
                    "asnIds": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    },
                    "customFields": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "facility": {
                        "type": "string"
                    },
                    "groupId": {
                        "type": "integer"
                    },
                    "latitude": {
                        "type": "number"
                    },
                    "longitude": {
                        "type": "number"
                    },
                    "name": {
                        "type": "string"
                    },
                    "physicalAddress": {
                        "type": "string"
                    },
                    "regionId": {
                        "type": "integer"
                    },
                    "shippingAddress": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string",
                        "description": "Valid values are `planned`, `staging`, `active`, `decommissioning` and `retired`. Defaults to `active`.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "tenantId": {
                        "type": "integer"
                    },
                    "timezone": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "netbox:index/tag:Tag": {
            "description": "From the [official documentation](https://docs.netbox.dev/en/stable/models/extras/tag/):\n\u003e Tags are user-defined labels which can be applied to a variety of objects within NetBox. They can be used to establish dimensions of organization beyond the relationships built into NetBox. For example, you might create a tag to identify a particular ownership or condition across several types of objects.\n\u003e\n\u003e Each tag has a label, color, and a URL-friendly slug. For example, the slug for a tag named \"Dunder Mifflin, Inc.\" would be dunder-mifflin-inc. The slug is generated automatically and makes tags easier to work with as URL parameters. Each tag can also be assigned a description indicating its purpose.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumiverse/netbox\";\n\nconst dmz = new netbox.Tag(\"dmz\", {colorHex: \"ff00ff\"});\n```\n```python\nimport pulumi\nimport pulumi_netbox as netbox\n\ndmz = netbox.Tag(\"dmz\", color_hex=\"ff00ff\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Netbox = Pulumiverse.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var dmz = new Netbox.Tag(\"dmz\", new()\n    {\n        ColorHex = \"ff00ff\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := netbox.NewTag(ctx, \"dmz\", \u0026netbox.TagArgs{\n\t\t\tColorHex: pulumi.String(\"ff00ff\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.Tag;\nimport com.pulumi.netbox.TagArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var dmz = new Tag(\"dmz\", TagArgs.builder()\n            .colorHex(\"ff00ff\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  dmz:\n    type: netbox:Tag\n    properties:\n      colorHex: ff00ff\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "colorHex": {
                    "type": "string",
                    "description": "Defaults to `9e9e9e`.\n"
                },
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": [
                "name",
                "slug"
            ],
            "inputProperties": {
                "colorHex": {
                    "type": "string",
                    "description": "Defaults to `9e9e9e`.\n"
                },
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Tag resources.\n",
                "properties": {
                    "colorHex": {
                        "type": "string",
                        "description": "Defaults to `9e9e9e`.\n"
                    },
                    "description": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object"
            }
        },
        "netbox:index/tenant:Tenant": {
            "description": "From the [official documentation](https://docs.netbox.dev/en/stable/features/tenancy/#tenants):\n\n\u003e A tenant represents a discrete grouping of resources used for administrative purposes. Typically, tenants are used to represent individual customers or internal departments within an organization.\n\u003e\n\u003e Tenant assignment is used to signify the ownership of an object in NetBox. As such, each object may only be owned by a single tenant. For example, if you have a firewall dedicated to a particular customer, you would assign it to the tenant which represents that customer. However, if the firewall serves multiple customers, it doesn't belong to any particular customer, so tenant assignment would not be appropriate.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumiverse/netbox\";\n\nconst customerA = new netbox.Tenant(\"customerA\", {});\n```\n```python\nimport pulumi\nimport pulumi_netbox as netbox\n\ncustomer_a = netbox.Tenant(\"customerA\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Netbox = Pulumiverse.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var customerA = new Netbox.Tenant(\"customerA\");\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := netbox.NewTenant(ctx, \"customerA\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.Tenant;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var customerA = new Tenant(\"customerA\");\n\n    }\n}\n```\n```yaml\nresources:\n  customerA:\n    type: netbox:Tenant\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "description": {
                    "type": "string"
                },
                "groupId": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": [
                "name",
                "slug"
            ],
            "inputProperties": {
                "description": {
                    "type": "string"
                },
                "groupId": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Tenant resources.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "groupId": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object"
            }
        },
        "netbox:index/token:Token": {
            "description": "From the [official documentation](https://docs.netbox.dev/en/stable/rest-api/authentication/#tokens):\n\n\u003e A token is a unique identifier mapped to a NetBox user account. Each user may have one or more tokens which he or she can use for authentication when making REST API requests. To create a token, navigate to the API tokens page under your user profile.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumiverse/netbox\";\n\nconst test = new netbox.User(\"test\", {\n    username: \"johndoe\",\n    password: \"abcdefghijkl\",\n});\nconst testBasic = new netbox.Token(\"testBasic\", {\n    userId: test.id,\n    key: \"0123456789012345678901234567890123456789\",\n    allowedIps: [\"2.4.8.16/32\"],\n    writeEnabled: false,\n});\n```\n```python\nimport pulumi\nimport pulumi_netbox as netbox\n\ntest = netbox.User(\"test\",\n    username=\"johndoe\",\n    password=\"abcdefghijkl\")\ntest_basic = netbox.Token(\"testBasic\",\n    user_id=test.id,\n    key=\"0123456789012345678901234567890123456789\",\n    allowed_ips=[\"2.4.8.16/32\"],\n    write_enabled=False)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Netbox = Pulumiverse.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = new Netbox.User(\"test\", new()\n    {\n        Username = \"johndoe\",\n        Password = \"abcdefghijkl\",\n    });\n\n    var testBasic = new Netbox.Token(\"testBasic\", new()\n    {\n        UserId = test.Id,\n        Key = \"0123456789012345678901234567890123456789\",\n        AllowedIps = new[]\n        {\n            \"2.4.8.16/32\",\n        },\n        WriteEnabled = false,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttest, err := netbox.NewUser(ctx, \"test\", \u0026netbox.UserArgs{\n\t\t\tUsername: pulumi.String(\"johndoe\"),\n\t\t\tPassword: pulumi.String(\"abcdefghijkl\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = netbox.NewToken(ctx, \"testBasic\", \u0026netbox.TokenArgs{\n\t\t\tUserId: test.ID(),\n\t\t\tKey:    pulumi.String(\"0123456789012345678901234567890123456789\"),\n\t\t\tAllowedIps: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"2.4.8.16/32\"),\n\t\t\t},\n\t\t\tWriteEnabled: pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.User;\nimport com.pulumi.netbox.UserArgs;\nimport com.pulumi.netbox.Token;\nimport com.pulumi.netbox.TokenArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new User(\"test\", UserArgs.builder()\n            .username(\"johndoe\")\n            .password(\"abcdefghijkl\")\n            .build());\n\n        var testBasic = new Token(\"testBasic\", TokenArgs.builder()\n            .userId(test.id())\n            .key(\"0123456789012345678901234567890123456789\")\n            .allowedIps(\"2.4.8.16/32\")\n            .writeEnabled(false)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: netbox:User\n    properties:\n      username: johndoe\n      password: abcdefghijkl\n  testBasic:\n    type: netbox:Token\n    properties:\n      userId: ${test.id}\n      key: '0123456789012345678901234567890123456789'\n      allowedIps:\n        - 2.4.8.16/32\n      writeEnabled: false\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "allowedIps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "expires": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "secret": true
                },
                "lastUsed": {
                    "type": "string"
                },
                "userId": {
                    "type": "integer"
                },
                "writeEnabled": {
                    "type": "boolean"
                }
            },
            "required": [
                "expires",
                "lastUsed",
                "userId"
            ],
            "inputProperties": {
                "allowedIps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "secret": true
                },
                "userId": {
                    "type": "integer"
                },
                "writeEnabled": {
                    "type": "boolean"
                }
            },
            "requiredInputs": [
                "userId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Token resources.\n",
                "properties": {
                    "allowedIps": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "expires": {
                        "type": "string"
                    },
                    "key": {
                        "type": "string",
                        "secret": true
                    },
                    "lastUsed": {
                        "type": "string"
                    },
                    "userId": {
                        "type": "integer"
                    },
                    "writeEnabled": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            }
        },
        "netbox:index/user:User": {
            "description": "This resource is used to manage users.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumiverse/netbox\";\n\nconst test = new netbox.User(\"test\", {\n    active: true,\n    password: \"abcdefghijkl\",\n    staff: true,\n    username: \"johndoe\",\n});\n```\n```python\nimport pulumi\nimport pulumi_netbox as netbox\n\ntest = netbox.User(\"test\",\n    active=True,\n    password=\"abcdefghijkl\",\n    staff=True,\n    username=\"johndoe\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Netbox = Pulumiverse.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = new Netbox.User(\"test\", new()\n    {\n        Active = true,\n        Password = \"abcdefghijkl\",\n        Staff = true,\n        Username = \"johndoe\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := netbox.NewUser(ctx, \"test\", \u0026netbox.UserArgs{\n\t\t\tActive:   pulumi.Bool(true),\n\t\t\tPassword: pulumi.String(\"abcdefghijkl\"),\n\t\t\tStaff:    pulumi.Bool(true),\n\t\t\tUsername: pulumi.String(\"johndoe\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.User;\nimport com.pulumi.netbox.UserArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new User(\"test\", UserArgs.builder()\n            .active(true)\n            .password(\"abcdefghijkl\")\n            .staff(true)\n            .username(\"johndoe\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: netbox:User\n    properties:\n      active: true\n      password: abcdefghijkl\n      staff: true\n      username: johndoe\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "active": {
                    "type": "boolean",
                    "description": "Defaults to `true`.\n"
                },
                "groupIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "password": {
                    "type": "string",
                    "secret": true
                },
                "staff": {
                    "type": "boolean",
                    "description": "Defaults to `false`.\n"
                },
                "username": {
                    "type": "string"
                }
            },
            "required": [
                "password",
                "username"
            ],
            "inputProperties": {
                "active": {
                    "type": "boolean",
                    "description": "Defaults to `true`.\n"
                },
                "groupIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "password": {
                    "type": "string",
                    "secret": true
                },
                "staff": {
                    "type": "boolean",
                    "description": "Defaults to `false`.\n"
                },
                "username": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "password",
                "username"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering User resources.\n",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "description": "Defaults to `true`.\n"
                    },
                    "groupIds": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    },
                    "password": {
                        "type": "string",
                        "secret": true
                    },
                    "staff": {
                        "type": "boolean",
                        "description": "Defaults to `false`.\n"
                    },
                    "username": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "netbox:index/vlan:Vlan": {
            "description": "From the [official documentation](https://docs.netbox.dev/en/stable/features/vlans/#vlans):\n\n\u003e A VLAN represents an isolated layer two domain, identified by a name and a numeric ID (1-4094) as defined in IEEE 802.1Q. VLANs are arranged into VLAN groups to define scope and to enforce uniqueness.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumiverse/netbox\";\n\nconst example1 = new netbox.Vlan(\"example1\", {\n    vid: 1777,\n    tags: [],\n});\n// Assume netbox_tenant, netbox_site, and netbox_tag resources exist\nconst example2 = new netbox.Vlan(\"example2\", {\n    vid: 1778,\n    status: \"reserved\",\n    description: \"Reserved example VLAN\",\n    tenantId: netbox_tenant.ex.id,\n    siteId: netbox_site.ex.id,\n    groupId: netbox_vlan_group.ex.id,\n    tags: [netbox_tag.ex.name],\n});\n```\n```python\nimport pulumi\nimport pulumi_netbox as netbox\n\nexample1 = netbox.Vlan(\"example1\",\n    vid=1777,\n    tags=[])\n# Assume netbox_tenant, netbox_site, and netbox_tag resources exist\nexample2 = netbox.Vlan(\"example2\",\n    vid=1778,\n    status=\"reserved\",\n    description=\"Reserved example VLAN\",\n    tenant_id=netbox_tenant[\"ex\"][\"id\"],\n    site_id=netbox_site[\"ex\"][\"id\"],\n    group_id=netbox_vlan_group[\"ex\"][\"id\"],\n    tags=[netbox_tag[\"ex\"][\"name\"]])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Netbox = Pulumiverse.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example1 = new Netbox.Vlan(\"example1\", new()\n    {\n        Vid = 1777,\n        Tags = new[] {},\n    });\n\n    // Assume netbox_tenant, netbox_site, and netbox_tag resources exist\n    var example2 = new Netbox.Vlan(\"example2\", new()\n    {\n        Vid = 1778,\n        Status = \"reserved\",\n        Description = \"Reserved example VLAN\",\n        TenantId = netbox_tenant.Ex.Id,\n        SiteId = netbox_site.Ex.Id,\n        GroupId = netbox_vlan_group.Ex.Id,\n        Tags = new[]\n        {\n            netbox_tag.Ex.Name,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := netbox.NewVlan(ctx, \"example1\", \u0026netbox.VlanArgs{\n\t\t\tVid:  pulumi.Int(1777),\n\t\t\tTags: pulumi.StringArray{},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Assume netbox_tenant, netbox_site, and netbox_tag resources exist\n\t\t_, err = netbox.NewVlan(ctx, \"example2\", \u0026netbox.VlanArgs{\n\t\t\tVid:         pulumi.Int(1778),\n\t\t\tStatus:      pulumi.String(\"reserved\"),\n\t\t\tDescription: pulumi.String(\"Reserved example VLAN\"),\n\t\t\tTenantId:    pulumi.Any(netbox_tenant.Ex.Id),\n\t\t\tSiteId:      pulumi.Any(netbox_site.Ex.Id),\n\t\t\tGroupId:     pulumi.Any(netbox_vlan_group.Ex.Id),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tnetbox_tag.Ex.Name,\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.Vlan;\nimport com.pulumi.netbox.VlanArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example1 = new Vlan(\"example1\", VlanArgs.builder()\n            .vid(1777)\n            .tags()\n            .build());\n\n        // Assume netbox_tenant, netbox_site, and netbox_tag resources exist\n        var example2 = new Vlan(\"example2\", VlanArgs.builder()\n            .vid(1778)\n            .status(\"reserved\")\n            .description(\"Reserved example VLAN\")\n            .tenantId(netbox_tenant.ex().id())\n            .siteId(netbox_site.ex().id())\n            .groupId(netbox_vlan_group.ex().id())\n            .tags(netbox_tag.ex().name())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example1:\n    type: netbox:Vlan\n    properties:\n      vid: 1777\n      tags: []\n  # Assume netbox_tenant, netbox_site, and netbox_tag resources exist\n  example2:\n    type: netbox:Vlan\n    properties:\n      vid: 1778\n      status: reserved\n      description: Reserved example VLAN\n      tenantId: ${netbox_tenant.ex.id}\n      siteId: ${netbox_site.ex.id}\n      groupId: ${netbox_vlan_group.ex.id}\n      tags:\n        - ${netbox_tag.ex.name}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Defaults to `\"\"`.\n"
                },
                "groupId": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "roleId": {
                    "type": "integer"
                },
                "siteId": {
                    "type": "integer"
                },
                "status": {
                    "type": "string",
                    "description": "Valid values are `active`, `reserved` and `deprecated`. Defaults to `active`.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tenantId": {
                    "type": "integer"
                },
                "vid": {
                    "type": "integer"
                }
            },
            "required": [
                "name",
                "vid"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Defaults to `\"\"`.\n"
                },
                "groupId": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "roleId": {
                    "type": "integer"
                },
                "siteId": {
                    "type": "integer"
                },
                "status": {
                    "type": "string",
                    "description": "Valid values are `active`, `reserved` and `deprecated`. Defaults to `active`.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tenantId": {
                    "type": "integer"
                },
                "vid": {
                    "type": "integer"
                }
            },
            "requiredInputs": [
                "vid"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Vlan resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Defaults to `\"\"`.\n"
                    },
                    "groupId": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "roleId": {
                        "type": "integer"
                    },
                    "siteId": {
                        "type": "integer"
                    },
                    "status": {
                        "type": "string",
                        "description": "Valid values are `active`, `reserved` and `deprecated`. Defaults to `active`.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "tenantId": {
                        "type": "integer"
                    },
                    "vid": {
                        "type": "integer"
                    }
                },
                "type": "object"
            }
        },
        "netbox:index/vrf:Vrf": {
            "description": "From the [official documentation](https://docs.netbox.dev/en/stable/features/ipam/#virtual-routing-and-forwarding-vrf):\n\n\u003e A VRF object in NetBox represents a virtual routing and forwarding (VRF) domain. Each VRF is essentially a separate routing table. VRFs are commonly used to isolate customers or organizations from one another within a network, or to route overlapping address space (e.g. multiple instances of the 10.0.0.0/8 space). Each VRF may be assigned to a specific tenant to aid in organizing the available IP space by customer or internal user.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumiverse/netbox\";\n\nconst custAProd = new netbox.Vrf(\"custAProd\", {tags: [\n    \"customer-a\",\n    \"prod\",\n]});\n```\n```python\nimport pulumi\nimport pulumi_netbox as netbox\n\ncust_a_prod = netbox.Vrf(\"custAProd\", tags=[\n    \"customer-a\",\n    \"prod\",\n])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Netbox = Pulumiverse.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var custAProd = new Netbox.Vrf(\"custAProd\", new()\n    {\n        Tags = new[]\n        {\n            \"customer-a\",\n            \"prod\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := netbox.NewVrf(ctx, \"custAProd\", \u0026netbox.VrfArgs{\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"customer-a\"),\n\t\t\t\tpulumi.String(\"prod\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.Vrf;\nimport com.pulumi.netbox.VrfArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var custAProd = new Vrf(\"custAProd\", VrfArgs.builder()\n            .tags(            \n                \"customer-a\",\n                \"prod\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  custAProd:\n    type: netbox:Vrf\n    properties:\n      tags:\n        - customer-a\n        - prod\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "description": {
                    "type": "string"
                },
                "enforceUnique": {
                    "type": "boolean",
                    "description": "Defaults to `true`.\n"
                },
                "name": {
                    "type": "string"
                },
                "rd": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tenantId": {
                    "type": "integer"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "description": {
                    "type": "string"
                },
                "enforceUnique": {
                    "type": "boolean",
                    "description": "Defaults to `true`.\n"
                },
                "name": {
                    "type": "string"
                },
                "rd": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tenantId": {
                    "type": "integer"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Vrf resources.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "enforceUnique": {
                        "type": "boolean",
                        "description": "Defaults to `true`.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "rd": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "tenantId": {
                        "type": "integer"
                    }
                },
                "type": "object"
            }
        },
        "netbox:index/webhook:Webhook": {
            "description": "From the [official documentation](https://docs.netbox.dev/en/stable/integrations/webhooks/):\n\n\u003e A webhook is a mechanism for conveying to some external system a change that took place in NetBox. For example, you may want to notify a monitoring system whenever the status of a device is updated in NetBox. This can be done by creating a webhook for the device model in NetBox and identifying the webhook receiver. When NetBox detects a change to a device, an HTTP request containing the details of the change and who made it be sent to the specified receiver.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumiverse/netbox\";\n\nconst test = new netbox.Webhook(\"test\", {\n    bodytemplate: \"Sample body\",\n    payloadUrl: \"https://example.com/webhook\",\n});\n```\n```python\nimport pulumi\nimport pulumi_netbox as netbox\n\ntest = netbox.Webhook(\"test\",\n    bodytemplate=\"Sample body\",\n    payload_url=\"https://example.com/webhook\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Netbox = Pulumiverse.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = new Netbox.Webhook(\"test\", new()\n    {\n        Bodytemplate = \"Sample body\",\n        PayloadUrl = \"https://example.com/webhook\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := netbox.NewWebhook(ctx, \"test\", \u0026netbox.WebhookArgs{\n\t\t\tBodytemplate: pulumi.String(\"Sample body\"),\n\t\t\tPayloadUrl:   pulumi.String(\"https://example.com/webhook\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.Webhook;\nimport com.pulumi.netbox.WebhookArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new Webhook(\"test\", WebhookArgs.builder()\n            .bodytemplate(\"Sample body\")\n            .payloadUrl(\"https://example.com/webhook\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: netbox:Webhook\n    properties:\n      bodytemplate: Sample body\n      payloadUrl: https://example.com/webhook\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "additionalHeaders": {
                    "type": "string"
                },
                "bodyTemplate": {
                    "type": "string"
                },
                "httpContentType": {
                    "type": "string",
                    "description": "The complete list of official content types is available [here](https://www.iana.org/assignments/media-types/media-types.xhtml). Defaults to `application/json`.\n"
                },
                "httpMethod": {
                    "type": "string",
                    "description": "Valid values are `GET`, `POST`, `PUT`, `PATCH` and `DELETE`. Defaults to `POST`.\n"
                },
                "name": {
                    "type": "string"
                },
                "payloadUrl": {
                    "type": "string"
                }
            },
            "required": [
                "name",
                "payloadUrl"
            ],
            "inputProperties": {
                "additionalHeaders": {
                    "type": "string"
                },
                "bodyTemplate": {
                    "type": "string"
                },
                "httpContentType": {
                    "type": "string",
                    "description": "The complete list of official content types is available [here](https://www.iana.org/assignments/media-types/media-types.xhtml). Defaults to `application/json`.\n"
                },
                "httpMethod": {
                    "type": "string",
                    "description": "Valid values are `GET`, `POST`, `PUT`, `PATCH` and `DELETE`. Defaults to `POST`.\n"
                },
                "name": {
                    "type": "string"
                },
                "payloadUrl": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "payloadUrl"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Webhook resources.\n",
                "properties": {
                    "additionalHeaders": {
                        "type": "string"
                    },
                    "bodyTemplate": {
                        "type": "string"
                    },
                    "httpContentType": {
                        "type": "string",
                        "description": "The complete list of official content types is available [here](https://www.iana.org/assignments/media-types/media-types.xhtml). Defaults to `application/json`.\n"
                    },
                    "httpMethod": {
                        "type": "string",
                        "description": "Valid values are `GET`, `POST`, `PUT`, `PATCH` and `DELETE`. Defaults to `POST`.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "payloadUrl": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "netbox:interface/template:Template": {
            "description": "From the [official documentation](https://docs.netbox.dev/en/stable/models/dcim/interfacetemplate/):\n\n\u003e A template for a network interface that will be created on all instantiations of the parent device type. See the interface documentation for more detail.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumiverse/netbox\";\n\nconst testManufacturer = new netbox.Manufacturer(\"testManufacturer\", {});\nconst testType = new netbox.device.Type(\"testType\", {\n    model: \"test-model\",\n    slug: \"test-model\",\n    partNumber: \"test-part-number\",\n    manufacturerId: testManufacturer.id,\n});\nconst testTemplate = new netbox.interface.Template(\"testTemplate\", {\n    description: \"eth0 description\",\n    label: \"eth0 label\",\n    deviceTypeId: testType.id,\n    type: \"100base-tx\",\n    mgmtOnly: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_netbox as netbox\n\ntest_manufacturer = netbox.Manufacturer(\"testManufacturer\")\ntest_type = netbox.device.Type(\"testType\",\n    model=\"test-model\",\n    slug=\"test-model\",\n    part_number=\"test-part-number\",\n    manufacturer_id=test_manufacturer.id)\ntest_template = netbox.interface.Template(\"testTemplate\",\n    description=\"eth0 description\",\n    label=\"eth0 label\",\n    device_type_id=test_type.id,\n    type=\"100base-tx\",\n    mgmt_only=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Netbox = Pulumiverse.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var testManufacturer = new Netbox.Manufacturer(\"testManufacturer\");\n\n    var testType = new Netbox.Device.Type(\"testType\", new()\n    {\n        Model = \"test-model\",\n        Slug = \"test-model\",\n        PartNumber = \"test-part-number\",\n        ManufacturerId = testManufacturer.Id,\n    });\n\n    var testTemplate = new Netbox.Interface.Template(\"testTemplate\", new()\n    {\n        Description = \"eth0 description\",\n        Label = \"eth0 label\",\n        DeviceTypeId = testType.Id,\n        Type = \"100base-tx\",\n        MgmtOnly = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox\"\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox/device\"\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox/interface\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\nfunc main() {\npulumi.Run(func(ctx *pulumi.Context) error {\ntestManufacturer, err := netbox.NewManufacturer(ctx, \"testManufacturer\", nil)\nif err != nil {\nreturn err\n}\ntestType, err := device.NewType(ctx, \"testType\", \u0026device.TypeArgs{\nModel: pulumi.String(\"test-model\"),\nSlug: pulumi.String(\"test-model\"),\nPartNumber: pulumi.String(\"test-part-number\"),\nManufacturerId: testManufacturer.ID(),\n})\nif err != nil {\nreturn err\n}\n_, err = interface.NewTemplate(ctx, \"testTemplate\", \u0026interface.TemplateArgs{\nDescription: pulumi.String(\"eth0 description\"),\nLabel: pulumi.String(\"eth0 label\"),\nDeviceTypeId: testType.ID(),\nType: pulumi.String(\"100base-tx\"),\nMgmtOnly: pulumi.Bool(true),\n})\nif err != nil {\nreturn err\n}\nreturn nil\n})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.Manufacturer;\nimport com.pulumi.netbox.device.Type;\nimport com.pulumi.netbox.device.TypeArgs;\nimport com.pulumi.netbox.interface.Template;\nimport com.pulumi.netbox.interface.TemplateArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var testManufacturer = new Manufacturer(\"testManufacturer\");\n\n        var testType = new Type(\"testType\", TypeArgs.builder()\n            .model(\"test-model\")\n            .slug(\"test-model\")\n            .partNumber(\"test-part-number\")\n            .manufacturerId(testManufacturer.id())\n            .build());\n\n        var testTemplate = new Template(\"testTemplate\", TemplateArgs.builder()\n            .description(\"eth0 description\")\n            .label(\"eth0 label\")\n            .deviceTypeId(testType.id())\n            .type(\"100base-tx\")\n            .mgmtOnly(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  testManufacturer:\n    type: netbox:Manufacturer\n  testType:\n    type: netbox:device:Type\n    properties:\n      model: test-model\n      slug: test-model\n      partNumber: test-part-number\n      manufacturerId: ${testManufacturer.id}\n  testTemplate:\n    type: netbox:interface:Template\n    properties:\n      description: eth0 description\n      label: eth0 label\n      deviceTypeId: ${testType.id}\n      type: 100base-tx\n      mgmtOnly: true\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "description": {
                    "type": "string"
                },
                "deviceTypeId": {
                    "type": "integer",
                    "description": "Exactly one of `device_type_id` or `module_type_id` must be given.\n"
                },
                "label": {
                    "type": "string"
                },
                "mgmtOnly": {
                    "type": "boolean"
                },
                "moduleTypeId": {
                    "type": "integer",
                    "description": "Exactly one of `device_type_id` or `module_type_id` must be given.\n"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "required": [
                "name",
                "type"
            ],
            "inputProperties": {
                "description": {
                    "type": "string"
                },
                "deviceTypeId": {
                    "type": "integer",
                    "description": "Exactly one of `device_type_id` or `module_type_id` must be given.\n",
                    "willReplaceOnChanges": true
                },
                "label": {
                    "type": "string"
                },
                "mgmtOnly": {
                    "type": "boolean"
                },
                "moduleTypeId": {
                    "type": "integer",
                    "description": "Exactly one of `device_type_id` or `module_type_id` must be given.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Template resources.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "deviceTypeId": {
                        "type": "integer",
                        "description": "Exactly one of `device_type_id` or `module_type_id` must be given.\n",
                        "willReplaceOnChanges": true
                    },
                    "label": {
                        "type": "string"
                    },
                    "mgmtOnly": {
                        "type": "boolean"
                    },
                    "moduleTypeId": {
                        "type": "integer",
                        "description": "Exactly one of `device_type_id` or `module_type_id` must be given.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "netbox:inventory/item/role:Role": {
            "description": "From the [official documentation](https://docs.netbox.dev/en/stable/models/dcim/inventoryitemrole/):\n\n\u003e Inventory items can be organized by functional roles, which are fully customizable by the user. For example, you might create roles for power supplies, fans, interface optics, etc.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumiverse/netbox\";\n\n// Note that some terraform code is not included in the example for brevity\nconst testDevice = new netbox.Device(\"testDevice\", {\n    deviceTypeId: netbox_device_type.test.id,\n    tenantId: netbox_tenant.test.id,\n    roleId: netbox_device_role.test.id,\n    siteId: netbox_site.test.id,\n});\nconst testRole = new netbox.inventory.item.Role(\"testRole\", {\n    slug: \"role-1-slug\",\n    colorHex: \"123456\",\n});\nconst parent = new netbox.inventory.Item(\"parent\", {\n    deviceId: testDevice.id,\n    roleId: testRole.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_netbox as netbox\n\n# Note that some terraform code is not included in the example for brevity\ntest_device = netbox.Device(\"testDevice\",\n    device_type_id=netbox_device_type[\"test\"][\"id\"],\n    tenant_id=netbox_tenant[\"test\"][\"id\"],\n    role_id=netbox_device_role[\"test\"][\"id\"],\n    site_id=netbox_site[\"test\"][\"id\"])\ntest_role = netbox.inventory.item.Role(\"testRole\",\n    slug=\"role-1-slug\",\n    color_hex=\"123456\")\nparent = netbox.inventory.Item(\"parent\",\n    device_id=test_device.id,\n    role_id=test_role.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Netbox = Pulumiverse.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Note that some terraform code is not included in the example for brevity\n    var testDevice = new Netbox.Device(\"testDevice\", new()\n    {\n        DeviceTypeId = netbox_device_type.Test.Id,\n        TenantId = netbox_tenant.Test.Id,\n        RoleId = netbox_device_role.Test.Id,\n        SiteId = netbox_site.Test.Id,\n    });\n\n    var testRole = new Netbox.Inventory.Item.Role(\"testRole\", new()\n    {\n        Slug = \"role-1-slug\",\n        ColorHex = \"123456\",\n    });\n\n    var parent = new Netbox.Inventory.Item(\"parent\", new()\n    {\n        DeviceId = testDevice.Id,\n        RoleId = testRole.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox\"\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox/inventory\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Note that some terraform code is not included in the example for brevity\n\t\ttestDevice, err := netbox.NewDevice(ctx, \"testDevice\", \u0026netbox.DeviceArgs{\n\t\t\tDeviceTypeId: pulumi.Any(netbox_device_type.Test.Id),\n\t\t\tTenantId:     pulumi.Any(netbox_tenant.Test.Id),\n\t\t\tRoleId:       pulumi.Any(netbox_device_role.Test.Id),\n\t\t\tSiteId:       pulumi.Any(netbox_site.Test.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttestRole, err := inventory.NewRole(ctx, \"testRole\", \u0026inventory.RoleArgs{\n\t\t\tSlug:     pulumi.String(\"role-1-slug\"),\n\t\t\tColorHex: pulumi.String(\"123456\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = inventory.NewItem(ctx, \"parent\", \u0026inventory.ItemArgs{\n\t\t\tDeviceId: testDevice.ID(),\n\t\t\tRoleId:   testRole.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.Device;\nimport com.pulumi.netbox.DeviceArgs;\nimport com.pulumi.netbox.inventory.Role;\nimport com.pulumi.netbox.inventory.RoleArgs;\nimport com.pulumi.netbox.inventory.Item;\nimport com.pulumi.netbox.inventory.ItemArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Note that some terraform code is not included in the example for brevity\n        var testDevice = new Device(\"testDevice\", DeviceArgs.builder()\n            .deviceTypeId(netbox_device_type.test().id())\n            .tenantId(netbox_tenant.test().id())\n            .roleId(netbox_device_role.test().id())\n            .siteId(netbox_site.test().id())\n            .build());\n\n        var testRole = new Role(\"testRole\", RoleArgs.builder()\n            .slug(\"role-1-slug\")\n            .colorHex(\"123456\")\n            .build());\n\n        var parent = new Item(\"parent\", ItemArgs.builder()\n            .deviceId(testDevice.id())\n            .roleId(testRole.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Note that some terraform code is not included in the example for brevity\n  testDevice:\n    type: netbox:Device\n    properties:\n      deviceTypeId: ${netbox_device_type.test.id}\n      tenantId: ${netbox_tenant.test.id}\n      roleId: ${netbox_device_role.test.id}\n      siteId: ${netbox_site.test.id}\n  testRole:\n    type: netbox:inventory/item:Role\n    properties:\n      slug: role-1-slug\n      colorHex: '123456'\n  parent:\n    type: netbox:inventory:Item\n    properties:\n      deviceId: ${testDevice.id}\n      roleId: ${testRole.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "colorHex": {
                    "type": "string"
                },
                "customFields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": [
                "colorHex",
                "name",
                "slug"
            ],
            "inputProperties": {
                "colorHex": {
                    "type": "string"
                },
                "customFields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "requiredInputs": [
                "colorHex",
                "slug"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Role resources.\n",
                "properties": {
                    "colorHex": {
                        "type": "string"
                    },
                    "customFields": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object"
            }
        },
        "netbox:inventory/item:Item": {
            "description": "From the [official documentation](https://docs.netbox.dev/en/stable/models/dcim/inventoryitem/):\n\n\u003e Inventory items represent hardware components installed within a device, such as a power supply or CPU or line card. They are intended to be used primarily for inventory purposes.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumiverse/netbox\";\n\n// Note that some terraform code is not included in the example for brevity\nconst testDevice = new netbox.Device(\"testDevice\", {\n    deviceTypeId: netbox_device_type.test.id,\n    tenantId: netbox_tenant.test.id,\n    roleId: netbox_device_role.test.id,\n    siteId: netbox_site.test.id,\n});\nconst testPort = new netbox.device.rear.Port(\"testPort\", {\n    deviceId: testDevice.id,\n    type: \"8p8c\",\n    positions: 1,\n    markConnected: true,\n});\nconst parent = new netbox.inventory.Item(\"parent\", {deviceId: testDevice.id});\nconst testItem = new netbox.inventory.Item(\"testItem\", {\n    deviceId: testDevice.id,\n    parentId: parent.id,\n    componentType: \"dcim.rearport\",\n    componentId: testPort.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_netbox as netbox\n\n# Note that some terraform code is not included in the example for brevity\ntest_device = netbox.Device(\"testDevice\",\n    device_type_id=netbox_device_type[\"test\"][\"id\"],\n    tenant_id=netbox_tenant[\"test\"][\"id\"],\n    role_id=netbox_device_role[\"test\"][\"id\"],\n    site_id=netbox_site[\"test\"][\"id\"])\ntest_port = netbox.device.rear.Port(\"testPort\",\n    device_id=test_device.id,\n    type=\"8p8c\",\n    positions=1,\n    mark_connected=True)\nparent = netbox.inventory.Item(\"parent\", device_id=test_device.id)\ntest_item = netbox.inventory.Item(\"testItem\",\n    device_id=test_device.id,\n    parent_id=parent.id,\n    component_type=\"dcim.rearport\",\n    component_id=test_port.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Netbox = Pulumiverse.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Note that some terraform code is not included in the example for brevity\n    var testDevice = new Netbox.Device(\"testDevice\", new()\n    {\n        DeviceTypeId = netbox_device_type.Test.Id,\n        TenantId = netbox_tenant.Test.Id,\n        RoleId = netbox_device_role.Test.Id,\n        SiteId = netbox_site.Test.Id,\n    });\n\n    var testPort = new Netbox.Device.Rear.Port(\"testPort\", new()\n    {\n        DeviceId = testDevice.Id,\n        Type = \"8p8c\",\n        Positions = 1,\n        MarkConnected = true,\n    });\n\n    var parent = new Netbox.Inventory.Item(\"parent\", new()\n    {\n        DeviceId = testDevice.Id,\n    });\n\n    var testItem = new Netbox.Inventory.Item(\"testItem\", new()\n    {\n        DeviceId = testDevice.Id,\n        ParentId = parent.Id,\n        ComponentType = \"dcim.rearport\",\n        ComponentId = testPort.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox\"\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox/device\"\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox/inventory\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Note that some terraform code is not included in the example for brevity\n\t\ttestDevice, err := netbox.NewDevice(ctx, \"testDevice\", \u0026netbox.DeviceArgs{\n\t\t\tDeviceTypeId: pulumi.Any(netbox_device_type.Test.Id),\n\t\t\tTenantId:     pulumi.Any(netbox_tenant.Test.Id),\n\t\t\tRoleId:       pulumi.Any(netbox_device_role.Test.Id),\n\t\t\tSiteId:       pulumi.Any(netbox_site.Test.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttestPort, err := device.NewPort(ctx, \"testPort\", \u0026device.PortArgs{\n\t\t\tDeviceId:      testDevice.ID(),\n\t\t\tType:          pulumi.String(\"8p8c\"),\n\t\t\tPositions:     pulumi.Int(1),\n\t\t\tMarkConnected: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tparent, err := inventory.NewItem(ctx, \"parent\", \u0026inventory.ItemArgs{\n\t\t\tDeviceId: testDevice.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = inventory.NewItem(ctx, \"testItem\", \u0026inventory.ItemArgs{\n\t\t\tDeviceId:      testDevice.ID(),\n\t\t\tParentId:      parent.ID(),\n\t\t\tComponentType: pulumi.String(\"dcim.rearport\"),\n\t\t\tComponentId:   testPort.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.Device;\nimport com.pulumi.netbox.DeviceArgs;\nimport com.pulumi.netbox.device.Port;\nimport com.pulumi.netbox.device.PortArgs;\nimport com.pulumi.netbox.inventory.Item;\nimport com.pulumi.netbox.inventory.ItemArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Note that some terraform code is not included in the example for brevity\n        var testDevice = new Device(\"testDevice\", DeviceArgs.builder()\n            .deviceTypeId(netbox_device_type.test().id())\n            .tenantId(netbox_tenant.test().id())\n            .roleId(netbox_device_role.test().id())\n            .siteId(netbox_site.test().id())\n            .build());\n\n        var testPort = new Port(\"testPort\", PortArgs.builder()\n            .deviceId(testDevice.id())\n            .type(\"8p8c\")\n            .positions(1)\n            .markConnected(true)\n            .build());\n\n        var parent = new Item(\"parent\", ItemArgs.builder()\n            .deviceId(testDevice.id())\n            .build());\n\n        var testItem = new Item(\"testItem\", ItemArgs.builder()\n            .deviceId(testDevice.id())\n            .parentId(parent.id())\n            .componentType(\"dcim.rearport\")\n            .componentId(testPort.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Note that some terraform code is not included in the example for brevity\n  testDevice:\n    type: netbox:Device\n    properties:\n      deviceTypeId: ${netbox_device_type.test.id}\n      tenantId: ${netbox_tenant.test.id}\n      roleId: ${netbox_device_role.test.id}\n      siteId: ${netbox_site.test.id}\n  testPort:\n    type: netbox:device/rear:Port\n    properties:\n      deviceId: ${testDevice.id}\n      type: 8p8c\n      positions: 1\n      markConnected: true\n  parent:\n    type: netbox:inventory:Item\n    properties:\n      deviceId: ${testDevice.id}\n  testItem:\n    type: netbox:inventory:Item\n    properties:\n      deviceId: ${testDevice.id}\n      parentId: ${parent.id}\n      componentType: dcim.rearport\n      componentId: ${testPort.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "assetTag": {
                    "type": "string"
                },
                "componentId": {
                    "type": "integer",
                    "description": "Required when `component_type` is set.\n"
                },
                "componentType": {
                    "type": "string"
                },
                "customFields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "deviceId": {
                    "type": "integer"
                },
                "discovered": {
                    "type": "boolean",
                    "description": "Defaults to `false`.\n"
                },
                "label": {
                    "type": "string"
                },
                "manufacturerId": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "parentId": {
                    "type": "integer"
                },
                "partId": {
                    "type": "string"
                },
                "roleId": {
                    "type": "integer"
                },
                "serial": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": [
                "deviceId",
                "name"
            ],
            "inputProperties": {
                "assetTag": {
                    "type": "string"
                },
                "componentId": {
                    "type": "integer",
                    "description": "Required when `component_type` is set.\n"
                },
                "componentType": {
                    "type": "string"
                },
                "customFields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "deviceId": {
                    "type": "integer"
                },
                "discovered": {
                    "type": "boolean",
                    "description": "Defaults to `false`.\n"
                },
                "label": {
                    "type": "string"
                },
                "manufacturerId": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "parentId": {
                    "type": "integer"
                },
                "partId": {
                    "type": "string"
                },
                "roleId": {
                    "type": "integer"
                },
                "serial": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "requiredInputs": [
                "deviceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Item resources.\n",
                "properties": {
                    "assetTag": {
                        "type": "string"
                    },
                    "componentId": {
                        "type": "integer",
                        "description": "Required when `component_type` is set.\n"
                    },
                    "componentType": {
                        "type": "string"
                    },
                    "customFields": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "deviceId": {
                        "type": "integer"
                    },
                    "discovered": {
                        "type": "boolean",
                        "description": "Defaults to `false`.\n"
                    },
                    "label": {
                        "type": "string"
                    },
                    "manufacturerId": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "parentId": {
                        "type": "integer"
                    },
                    "partId": {
                        "type": "string"
                    },
                    "roleId": {
                        "type": "integer"
                    },
                    "serial": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object"
            }
        },
        "netbox:ip/address:Address": {
            "description": "From the [official documentation](https://docs.netbox.dev/en/stable/features/ipam/#ip-addresses):\n\n\u003e An IP address comprises a single host address (either IPv4 or IPv6) and its subnet mask. Its mask should match exactly how the IP address is configured on an interface in the real world.\n\u003e\n\u003e Like a prefix, an IP address can optionally be assigned to a VRF (otherwise, it will appear in the \"global\" table). IP addresses are automatically arranged under parent prefixes within their respective VRFs according to the IP hierarchy.\n\n## Example Usage\n\n### Creating an IP address that is assigned to a virtual machine interface\n\nStarting with provider version 3.5.0, you can use the `virtual_machine_interface_id` attribute to assign an IP address to a virtual machine interface.\nYou can also use the `interface_id` and `object_type` attributes instead.\n\nWith `virtual_machine_interface_id`:\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumiverse/netbox\";\n\n// Assuming a virtual machine with the id `123` exists\nconst thisInterface = new netbox.Interface(\"thisInterface\", {virtualMachineId: 123});\nconst thisAddress = new netbox.ip.Address(\"thisAddress\", {\n    ipAddress: \"10.0.0.60/24\",\n    status: \"active\",\n    virtualMachineInterfaceId: thisInterface.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_netbox as netbox\n\n# Assuming a virtual machine with the id `123` exists\nthis_interface = netbox.Interface(\"thisInterface\", virtual_machine_id=123)\nthis_address = netbox.ip.Address(\"thisAddress\",\n    ip_address=\"10.0.0.60/24\",\n    status=\"active\",\n    virtual_machine_interface_id=this_interface.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Netbox = Pulumiverse.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Assuming a virtual machine with the id `123` exists\n    var thisInterface = new Netbox.Interface(\"thisInterface\", new()\n    {\n        VirtualMachineId = 123,\n    });\n\n    var thisAddress = new Netbox.Ip.Address(\"thisAddress\", new()\n    {\n        IpAddress = \"10.0.0.60/24\",\n        Status = \"active\",\n        VirtualMachineInterfaceId = thisInterface.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox\"\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox/ip\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Assuming a virtual machine with the id `123` exists\n\t\tthisInterface, err := netbox.NewInterface(ctx, \"thisInterface\", \u0026netbox.InterfaceArgs{\n\t\t\tVirtualMachineId: pulumi.Int(123),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = ip.NewAddress(ctx, \"thisAddress\", \u0026ip.AddressArgs{\n\t\t\tIpAddress:                 pulumi.String(\"10.0.0.60/24\"),\n\t\t\tStatus:                    pulumi.String(\"active\"),\n\t\t\tVirtualMachineInterfaceId: thisInterface.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.Interface;\nimport com.pulumi.netbox.InterfaceArgs;\nimport com.pulumi.netbox.ip.Address;\nimport com.pulumi.netbox.ip.AddressArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Assuming a virtual machine with the id `123` exists\n        var thisInterface = new Interface(\"thisInterface\", InterfaceArgs.builder()\n            .virtualMachineId(123)\n            .build());\n\n        var thisAddress = new Address(\"thisAddress\", AddressArgs.builder()\n            .ipAddress(\"10.0.0.60/24\")\n            .status(\"active\")\n            .virtualMachineInterfaceId(thisInterface.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Assuming a virtual machine with the id `123` exists\n  thisInterface:\n    type: netbox:Interface\n    properties:\n      virtualMachineId: 123\n  thisAddress:\n    type: netbox:ip:Address\n    properties:\n      ipAddress: 10.0.0.60/24\n      status: active\n      virtualMachineInterfaceId: ${thisInterface.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\nWith `object_type` and `interface_id`:\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumiverse/netbox\";\n\n// Assuming a virtual machine with the id `123` exists\nconst thisInterface = new netbox.Interface(\"thisInterface\", {virtualMachineId: 123});\nconst thisAddress = new netbox.ip.Address(\"thisAddress\", {\n    ipAddress: \"10.0.0.60/24\",\n    status: \"active\",\n    interfaceId: thisInterface.id,\n    objectType: \"virtualization.vminterface\",\n});\n```\n```python\nimport pulumi\nimport pulumi_netbox as netbox\n\n# Assuming a virtual machine with the id `123` exists\nthis_interface = netbox.Interface(\"thisInterface\", virtual_machine_id=123)\nthis_address = netbox.ip.Address(\"thisAddress\",\n    ip_address=\"10.0.0.60/24\",\n    status=\"active\",\n    interface_id=this_interface.id,\n    object_type=\"virtualization.vminterface\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Netbox = Pulumiverse.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Assuming a virtual machine with the id `123` exists\n    var thisInterface = new Netbox.Interface(\"thisInterface\", new()\n    {\n        VirtualMachineId = 123,\n    });\n\n    var thisAddress = new Netbox.Ip.Address(\"thisAddress\", new()\n    {\n        IpAddress = \"10.0.0.60/24\",\n        Status = \"active\",\n        InterfaceId = thisInterface.Id,\n        ObjectType = \"virtualization.vminterface\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox\"\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox/ip\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Assuming a virtual machine with the id `123` exists\n\t\tthisInterface, err := netbox.NewInterface(ctx, \"thisInterface\", \u0026netbox.InterfaceArgs{\n\t\t\tVirtualMachineId: pulumi.Int(123),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = ip.NewAddress(ctx, \"thisAddress\", \u0026ip.AddressArgs{\n\t\t\tIpAddress:   pulumi.String(\"10.0.0.60/24\"),\n\t\t\tStatus:      pulumi.String(\"active\"),\n\t\t\tInterfaceId: thisInterface.ID(),\n\t\t\tObjectType:  pulumi.String(\"virtualization.vminterface\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.Interface;\nimport com.pulumi.netbox.InterfaceArgs;\nimport com.pulumi.netbox.ip.Address;\nimport com.pulumi.netbox.ip.AddressArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Assuming a virtual machine with the id `123` exists\n        var thisInterface = new Interface(\"thisInterface\", InterfaceArgs.builder()\n            .virtualMachineId(123)\n            .build());\n\n        var thisAddress = new Address(\"thisAddress\", AddressArgs.builder()\n            .ipAddress(\"10.0.0.60/24\")\n            .status(\"active\")\n            .interfaceId(thisInterface.id())\n            .objectType(\"virtualization.vminterface\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Assuming a virtual machine with the id `123` exists\n  thisInterface:\n    type: netbox:Interface\n    properties:\n      virtualMachineId: 123\n  thisAddress:\n    type: netbox:ip:Address\n    properties:\n      ipAddress: 10.0.0.60/24\n      status: active\n      interfaceId: ${thisInterface.id}\n      objectType: virtualization.vminterface\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Creating an IP address that is assigned to a device interface\n\nStarting with provider version 3.5.0, you can use the `device_interface_id` attribute to assign an IP address to a device interface.\nYou can also use the `interface_id` and `object_type` attributes instead.\n\nWith `device_interface_id`:\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumiverse/netbox\";\n\n// Assuming a device with the id `123` exists\nconst thisInterface = new netbox.device.Interface(\"thisInterface\", {\n    deviceId: 123,\n    type: \"1000base-t\",\n});\nconst thisAddress = new netbox.ip.Address(\"thisAddress\", {\n    ipAddress: \"10.0.0.60/24\",\n    status: \"active\",\n    deviceInterfaceId: thisInterface.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_netbox as netbox\n\n# Assuming a device with the id `123` exists\nthis_interface = netbox.device.Interface(\"thisInterface\",\n    device_id=123,\n    type=\"1000base-t\")\nthis_address = netbox.ip.Address(\"thisAddress\",\n    ip_address=\"10.0.0.60/24\",\n    status=\"active\",\n    device_interface_id=this_interface.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Netbox = Pulumiverse.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Assuming a device with the id `123` exists\n    var thisInterface = new Netbox.Device.Interface(\"thisInterface\", new()\n    {\n        DeviceId = 123,\n        Type = \"1000base-t\",\n    });\n\n    var thisAddress = new Netbox.Ip.Address(\"thisAddress\", new()\n    {\n        IpAddress = \"10.0.0.60/24\",\n        Status = \"active\",\n        DeviceInterfaceId = thisInterface.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox/device\"\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox/ip\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Assuming a device with the id `123` exists\n\t\tthisInterface, err := device.NewInterface(ctx, \"thisInterface\", \u0026device.InterfaceArgs{\n\t\t\tDeviceId: pulumi.Int(123),\n\t\t\tType:     pulumi.String(\"1000base-t\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = ip.NewAddress(ctx, \"thisAddress\", \u0026ip.AddressArgs{\n\t\t\tIpAddress:         pulumi.String(\"10.0.0.60/24\"),\n\t\t\tStatus:            pulumi.String(\"active\"),\n\t\t\tDeviceInterfaceId: thisInterface.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.device.Interface;\nimport com.pulumi.netbox.device.InterfaceArgs;\nimport com.pulumi.netbox.ip.Address;\nimport com.pulumi.netbox.ip.AddressArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Assuming a device with the id `123` exists\n        var thisInterface = new Interface(\"thisInterface\", InterfaceArgs.builder()\n            .deviceId(123)\n            .type(\"1000base-t\")\n            .build());\n\n        var thisAddress = new Address(\"thisAddress\", AddressArgs.builder()\n            .ipAddress(\"10.0.0.60/24\")\n            .status(\"active\")\n            .deviceInterfaceId(thisInterface.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Assuming a device with the id `123` exists\n  thisInterface:\n    type: netbox:device:Interface\n    properties:\n      deviceId: 123\n      type: 1000base-t\n  thisAddress:\n    type: netbox:ip:Address\n    properties:\n      ipAddress: 10.0.0.60/24\n      status: active\n      deviceInterfaceId: ${thisInterface.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\nWith `object_type` and `interface_id`:\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumiverse/netbox\";\n\n// Assuming a device with the id `123` exists\nconst thisInterface = new netbox.device.Interface(\"thisInterface\", {\n    deviceId: 123,\n    type: \"1000base-t\",\n});\nconst thisAddress = new netbox.ip.Address(\"thisAddress\", {\n    ipAddress: \"10.0.0.60/24\",\n    status: \"active\",\n    interfaceId: thisInterface.id,\n    objectType: \"dcim.interface\",\n});\n```\n```python\nimport pulumi\nimport pulumi_netbox as netbox\n\n# Assuming a device with the id `123` exists\nthis_interface = netbox.device.Interface(\"thisInterface\",\n    device_id=123,\n    type=\"1000base-t\")\nthis_address = netbox.ip.Address(\"thisAddress\",\n    ip_address=\"10.0.0.60/24\",\n    status=\"active\",\n    interface_id=this_interface.id,\n    object_type=\"dcim.interface\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Netbox = Pulumiverse.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Assuming a device with the id `123` exists\n    var thisInterface = new Netbox.Device.Interface(\"thisInterface\", new()\n    {\n        DeviceId = 123,\n        Type = \"1000base-t\",\n    });\n\n    var thisAddress = new Netbox.Ip.Address(\"thisAddress\", new()\n    {\n        IpAddress = \"10.0.0.60/24\",\n        Status = \"active\",\n        InterfaceId = thisInterface.Id,\n        ObjectType = \"dcim.interface\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox/device\"\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox/ip\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Assuming a device with the id `123` exists\n\t\tthisInterface, err := device.NewInterface(ctx, \"thisInterface\", \u0026device.InterfaceArgs{\n\t\t\tDeviceId: pulumi.Int(123),\n\t\t\tType:     pulumi.String(\"1000base-t\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = ip.NewAddress(ctx, \"thisAddress\", \u0026ip.AddressArgs{\n\t\t\tIpAddress:   pulumi.String(\"10.0.0.60/24\"),\n\t\t\tStatus:      pulumi.String(\"active\"),\n\t\t\tInterfaceId: thisInterface.ID(),\n\t\t\tObjectType:  pulumi.String(\"dcim.interface\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.device.Interface;\nimport com.pulumi.netbox.device.InterfaceArgs;\nimport com.pulumi.netbox.ip.Address;\nimport com.pulumi.netbox.ip.AddressArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Assuming a device with the id `123` exists\n        var thisInterface = new Interface(\"thisInterface\", InterfaceArgs.builder()\n            .deviceId(123)\n            .type(\"1000base-t\")\n            .build());\n\n        var thisAddress = new Address(\"thisAddress\", AddressArgs.builder()\n            .ipAddress(\"10.0.0.60/24\")\n            .status(\"active\")\n            .interfaceId(thisInterface.id())\n            .objectType(\"dcim.interface\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Assuming a device with the id `123` exists\n  thisInterface:\n    type: netbox:device:Interface\n    properties:\n      deviceId: 123\n      type: 1000base-t\n  thisAddress:\n    type: netbox:ip:Address\n    properties:\n      ipAddress: 10.0.0.60/24\n      status: active\n      interfaceId: ${thisInterface.id}\n      objectType: dcim.interface\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Creating an IP address that is not assigned to anything\n\nYou can create an IP address that is not assigend to anything by omitting the attributes mentioned above.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumiverse/netbox\";\n\nconst _this = new netbox.ip.Address(\"this\", {\n    ipAddress: \"10.0.0.50/24\",\n    status: \"reserved\",\n});\n```\n```python\nimport pulumi\nimport pulumi_netbox as netbox\n\nthis = netbox.ip.Address(\"this\",\n    ip_address=\"10.0.0.50/24\",\n    status=\"reserved\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Netbox = Pulumiverse.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = new Netbox.Ip.Address(\"this\", new()\n    {\n        IpAddress = \"10.0.0.50/24\",\n        Status = \"reserved\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox/ip\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ip.NewAddress(ctx, \"this\", \u0026ip.AddressArgs{\n\t\t\tIpAddress: pulumi.String(\"10.0.0.50/24\"),\n\t\t\tStatus:    pulumi.String(\"reserved\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.ip.Address;\nimport com.pulumi.netbox.ip.AddressArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var this_ = new Address(\"this\", AddressArgs.builder()\n            .ipAddress(\"10.0.0.50/24\")\n            .status(\"reserved\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  this:\n    type: netbox:ip:Address\n    properties:\n      ipAddress: 10.0.0.50/24\n      status: reserved\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "description": {
                    "type": "string"
                },
                "deviceInterfaceId": {
                    "type": "integer",
                    "description": "Conflicts with `interface_id` and `virtual_machine_interface_id`.\n"
                },
                "dnsName": {
                    "type": "string"
                },
                "interfaceId": {
                    "type": "integer",
                    "description": "Required when `object_type` is set.\n"
                },
                "ipAddress": {
                    "type": "string"
                },
                "natInsideAddressId": {
                    "type": "integer"
                },
                "natOutsideAddresses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/netbox:ip/AddressNatOutsideAddress:AddressNatOutsideAddress"
                    }
                },
                "objectType": {
                    "type": "string",
                    "description": "Valid values are `virtualization.vminterface` and `dcim.interface`. Required when `interface_id` is set.\n"
                },
                "role": {
                    "type": "string",
                    "description": "Valid values are `loopback`, `secondary`, `anycast`, `vip`, `vrrp`, `hsrp`, `glbp` and `carp`.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Valid values are `active`, `reserved`, `deprecated`, `dhcp` and `slaac`.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tenantId": {
                    "type": "integer"
                },
                "virtualMachineInterfaceId": {
                    "type": "integer",
                    "description": "Conflicts with `interface_id` and `device_interface_id`.\n"
                },
                "vrfId": {
                    "type": "integer"
                }
            },
            "required": [
                "ipAddress",
                "natOutsideAddresses",
                "status"
            ],
            "inputProperties": {
                "description": {
                    "type": "string"
                },
                "deviceInterfaceId": {
                    "type": "integer",
                    "description": "Conflicts with `interface_id` and `virtual_machine_interface_id`.\n"
                },
                "dnsName": {
                    "type": "string"
                },
                "interfaceId": {
                    "type": "integer",
                    "description": "Required when `object_type` is set.\n"
                },
                "ipAddress": {
                    "type": "string"
                },
                "natInsideAddressId": {
                    "type": "integer"
                },
                "objectType": {
                    "type": "string",
                    "description": "Valid values are `virtualization.vminterface` and `dcim.interface`. Required when `interface_id` is set.\n"
                },
                "role": {
                    "type": "string",
                    "description": "Valid values are `loopback`, `secondary`, `anycast`, `vip`, `vrrp`, `hsrp`, `glbp` and `carp`.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Valid values are `active`, `reserved`, `deprecated`, `dhcp` and `slaac`.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tenantId": {
                    "type": "integer"
                },
                "virtualMachineInterfaceId": {
                    "type": "integer",
                    "description": "Conflicts with `interface_id` and `device_interface_id`.\n"
                },
                "vrfId": {
                    "type": "integer"
                }
            },
            "requiredInputs": [
                "ipAddress",
                "status"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Address resources.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "deviceInterfaceId": {
                        "type": "integer",
                        "description": "Conflicts with `interface_id` and `virtual_machine_interface_id`.\n"
                    },
                    "dnsName": {
                        "type": "string"
                    },
                    "interfaceId": {
                        "type": "integer",
                        "description": "Required when `object_type` is set.\n"
                    },
                    "ipAddress": {
                        "type": "string"
                    },
                    "natInsideAddressId": {
                        "type": "integer"
                    },
                    "natOutsideAddresses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/netbox:ip/AddressNatOutsideAddress:AddressNatOutsideAddress"
                        }
                    },
                    "objectType": {
                        "type": "string",
                        "description": "Valid values are `virtualization.vminterface` and `dcim.interface`. Required when `interface_id` is set.\n"
                    },
                    "role": {
                        "type": "string",
                        "description": "Valid values are `loopback`, `secondary`, `anycast`, `vip`, `vrrp`, `hsrp`, `glbp` and `carp`.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Valid values are `active`, `reserved`, `deprecated`, `dhcp` and `slaac`.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "tenantId": {
                        "type": "integer"
                    },
                    "virtualMachineInterfaceId": {
                        "type": "integer",
                        "description": "Conflicts with `interface_id` and `device_interface_id`.\n"
                    },
                    "vrfId": {
                        "type": "integer"
                    }
                },
                "type": "object"
            }
        },
        "netbox:ip/range:Range": {
            "description": "From the [official documentation](https://docs.netbox.dev/en/stable/features/ipam/#ip-ranges):\n\n\u003e This model represents an arbitrary range of individual IPv4 or IPv6 addresses, inclusive of its starting and ending addresses. For instance, the range 192.0.2.10 to 192.0.2.20 has eleven members. (The total member count is available as the size property on an IPRange instance.) Like prefixes and IP addresses, each IP range may optionally be assigned to a VRF and/or tenant.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumiverse/netbox\";\n\nconst custAProd = new netbox.ip.Range(\"custAProd\", {\n    endAddress: \"10.0.0.50/24\",\n    startAddress: \"10.0.0.1/24\",\n    tags: [\n        \"customer-a\",\n        \"prod\",\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_netbox as netbox\n\ncust_a_prod = netbox.ip.Range(\"custAProd\",\n    end_address=\"10.0.0.50/24\",\n    start_address=\"10.0.0.1/24\",\n    tags=[\n        \"customer-a\",\n        \"prod\",\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Netbox = Pulumiverse.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var custAProd = new Netbox.Ip.Range(\"custAProd\", new()\n    {\n        EndAddress = \"10.0.0.50/24\",\n        StartAddress = \"10.0.0.1/24\",\n        Tags = new[]\n        {\n            \"customer-a\",\n            \"prod\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox/ip\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ip.NewRange(ctx, \"custAProd\", \u0026ip.RangeArgs{\n\t\t\tEndAddress:   pulumi.String(\"10.0.0.50/24\"),\n\t\t\tStartAddress: pulumi.String(\"10.0.0.1/24\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"customer-a\"),\n\t\t\t\tpulumi.String(\"prod\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.ip.Range;\nimport com.pulumi.netbox.ip.RangeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var custAProd = new Range(\"custAProd\", RangeArgs.builder()\n            .endAddress(\"10.0.0.50/24\")\n            .startAddress(\"10.0.0.1/24\")\n            .tags(            \n                \"customer-a\",\n                \"prod\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  custAProd:\n    type: netbox:ip:Range\n    properties:\n      endAddress: 10.0.0.50/24\n      startAddress: 10.0.0.1/24\n      tags:\n        - customer-a\n        - prod\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "description": {
                    "type": "string"
                },
                "endAddress": {
                    "type": "string"
                },
                "roleId": {
                    "type": "integer"
                },
                "startAddress": {
                    "type": "string"
                },
                "status": {
                    "type": "string",
                    "description": "Valid values are `active`, `reserved` and `deprecated`. Defaults to `active`.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tenantId": {
                    "type": "integer"
                },
                "vrfId": {
                    "type": "integer"
                }
            },
            "required": [
                "endAddress",
                "startAddress"
            ],
            "inputProperties": {
                "description": {
                    "type": "string"
                },
                "endAddress": {
                    "type": "string"
                },
                "roleId": {
                    "type": "integer"
                },
                "startAddress": {
                    "type": "string"
                },
                "status": {
                    "type": "string",
                    "description": "Valid values are `active`, `reserved` and `deprecated`. Defaults to `active`.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tenantId": {
                    "type": "integer"
                },
                "vrfId": {
                    "type": "integer"
                }
            },
            "requiredInputs": [
                "endAddress",
                "startAddress"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Range resources.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "endAddress": {
                        "type": "string"
                    },
                    "roleId": {
                        "type": "integer"
                    },
                    "startAddress": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string",
                        "description": "Valid values are `active`, `reserved` and `deprecated`. Defaults to `active`.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "tenantId": {
                        "type": "integer"
                    },
                    "vrfId": {
                        "type": "integer"
                    }
                },
                "type": "object"
            }
        },
        "netbox:ipam/role:Role": {
            "description": "From the [official documentation](https://docs.netbox.dev/en/stable/features/ipam/#prefixvlan-roles):\n\n\u003e A role indicates the function of a prefix or VLAN. For example, you might define Data, Voice, and Security roles. Generally, a prefix will be assigned the same functional role as the VLAN to which it is assigned (if any).\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumiverse/netbox\";\n\nconst testBasic = new netbox.ipam.Role(\"testBasic\", {});\n```\n```python\nimport pulumi\nimport pulumi_netbox as netbox\n\ntest_basic = netbox.ipam.Role(\"testBasic\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Netbox = Pulumiverse.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var testBasic = new Netbox.Ipam.Role(\"testBasic\");\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox/ipam\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ipam.NewRole(ctx, \"testBasic\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.ipam.Role;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var testBasic = new Role(\"testBasic\");\n\n    }\n}\n```\n```yaml\nresources:\n  testBasic:\n    type: netbox:ipam:Role\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                },
                "weight": {
                    "type": "integer"
                }
            },
            "required": [
                "name",
                "slug"
            ],
            "inputProperties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                },
                "weight": {
                    "type": "integer"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Role resources.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    },
                    "weight": {
                        "type": "integer"
                    }
                },
                "type": "object"
            }
        },
        "netbox:module/type:Type": {
            "description": "From the [official documentation](https://docs.netbox.dev/en/stable/models/dcim/moduletype/):\n\n\u003e A module type represents a specific make and model of hardware component which is installable within a device's module bay and has its own child components. For example, consider a chassis-based switch or router with a number of field-replaceable line cards. Each line card has its own model number and includes a certain set of components such as interfaces. Each module type may have a manufacturer, model number, and part number assigned to it.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumiverse/netbox\";\n\nconst testManufacturer = new netbox.Manufacturer(\"testManufacturer\", {});\nconst testType = new netbox.module.Type(\"testType\", {\n    manufacturerId: testManufacturer.id,\n    model: \"Networking\",\n});\n```\n```python\nimport pulumi\nimport pulumi_netbox as netbox\n\ntest_manufacturer = netbox.Manufacturer(\"testManufacturer\")\ntest_type = netbox.module.Type(\"testType\",\n    manufacturer_id=test_manufacturer.id,\n    model=\"Networking\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Netbox = Pulumiverse.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var testManufacturer = new Netbox.Manufacturer(\"testManufacturer\");\n\n    var testType = new Netbox.Module.Type(\"testType\", new()\n    {\n        ManufacturerId = testManufacturer.Id,\n        Model = \"Networking\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox\"\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox/module\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttestManufacturer, err := netbox.NewManufacturer(ctx, \"testManufacturer\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = module.NewType(ctx, \"testType\", \u0026module.TypeArgs{\n\t\t\tManufacturerId: testManufacturer.ID(),\n\t\t\tModel:          pulumi.String(\"Networking\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.Manufacturer;\nimport com.pulumi.netbox.module.Type;\nimport com.pulumi.netbox.module.TypeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var testManufacturer = new Manufacturer(\"testManufacturer\");\n\n        var testType = new Type(\"testType\", TypeArgs.builder()\n            .manufacturerId(testManufacturer.id())\n            .model(\"Networking\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  testManufacturer:\n    type: netbox:Manufacturer\n  testType:\n    type: netbox:module:Type\n    properties:\n      manufacturerId: ${testManufacturer.id}\n      model: Networking\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "comments": {
                    "type": "string"
                },
                "customFields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "manufacturerId": {
                    "type": "integer"
                },
                "model": {
                    "type": "string"
                },
                "partNumber": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "weight": {
                    "type": "number"
                },
                "weightUnit": {
                    "type": "string",
                    "description": "One of [kg, g, lb, oz]. Required when `weight` is set.\n"
                }
            },
            "required": [
                "manufacturerId",
                "model"
            ],
            "inputProperties": {
                "comments": {
                    "type": "string"
                },
                "customFields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "manufacturerId": {
                    "type": "integer"
                },
                "model": {
                    "type": "string"
                },
                "partNumber": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "weight": {
                    "type": "number"
                },
                "weightUnit": {
                    "type": "string",
                    "description": "One of [kg, g, lb, oz]. Required when `weight` is set.\n"
                }
            },
            "requiredInputs": [
                "manufacturerId",
                "model"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Type resources.\n",
                "properties": {
                    "comments": {
                        "type": "string"
                    },
                    "customFields": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "manufacturerId": {
                        "type": "integer"
                    },
                    "model": {
                        "type": "string"
                    },
                    "partNumber": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "weight": {
                        "type": "number"
                    },
                    "weightUnit": {
                        "type": "string",
                        "description": "One of [kg, g, lb, oz]. Required when `weight` is set.\n"
                    }
                },
                "type": "object"
            }
        },
        "netbox:power/feed:Feed": {
            "description": "From the [official documentation](https://docs.netbox.dev/en/stable/models/dcim/powerfeed/):\n\n\u003e A power feed represents the distribution of power from a power panel to a particular device, typically a power distribution unit (PDU). The power port (inlet) on a device can be connected via a cable to a power feed. A power feed may optionally be assigned to a rack to allow more easily tracking the distribution of power among racks.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumiverse/netbox\";\n\nconst testSite = new netbox.Site(\"testSite\", {status: \"active\"});\nconst testLocation = new netbox.Location(\"testLocation\", {siteId: testSite.id});\nconst testPanel = new netbox.power.Panel(\"testPanel\", {\n    siteId: testSite.id,\n    locationId: testLocation.id,\n});\nconst testFeed = new netbox.power.Feed(\"testFeed\", {\n    powerPanelId: testPanel.id,\n    status: \"active\",\n    type: \"primary\",\n    supply: \"ac\",\n    phase: \"single-phase\",\n    voltage: 250,\n    amperage: 100,\n    maxPercentUtilization: 80,\n});\n```\n```python\nimport pulumi\nimport pulumi_netbox as netbox\n\ntest_site = netbox.Site(\"testSite\", status=\"active\")\ntest_location = netbox.Location(\"testLocation\", site_id=test_site.id)\ntest_panel = netbox.power.Panel(\"testPanel\",\n    site_id=test_site.id,\n    location_id=test_location.id)\ntest_feed = netbox.power.Feed(\"testFeed\",\n    power_panel_id=test_panel.id,\n    status=\"active\",\n    type=\"primary\",\n    supply=\"ac\",\n    phase=\"single-phase\",\n    voltage=250,\n    amperage=100,\n    max_percent_utilization=80)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Netbox = Pulumiverse.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var testSite = new Netbox.Site(\"testSite\", new()\n    {\n        Status = \"active\",\n    });\n\n    var testLocation = new Netbox.Location(\"testLocation\", new()\n    {\n        SiteId = testSite.Id,\n    });\n\n    var testPanel = new Netbox.Power.Panel(\"testPanel\", new()\n    {\n        SiteId = testSite.Id,\n        LocationId = testLocation.Id,\n    });\n\n    var testFeed = new Netbox.Power.Feed(\"testFeed\", new()\n    {\n        PowerPanelId = testPanel.Id,\n        Status = \"active\",\n        Type = \"primary\",\n        Supply = \"ac\",\n        Phase = \"single-phase\",\n        Voltage = 250,\n        Amperage = 100,\n        MaxPercentUtilization = 80,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox\"\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox/power\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttestSite, err := netbox.NewSite(ctx, \"testSite\", \u0026netbox.SiteArgs{\n\t\t\tStatus: pulumi.String(\"active\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttestLocation, err := netbox.NewLocation(ctx, \"testLocation\", \u0026netbox.LocationArgs{\n\t\t\tSiteId: testSite.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttestPanel, err := power.NewPanel(ctx, \"testPanel\", \u0026power.PanelArgs{\n\t\t\tSiteId:     testSite.ID(),\n\t\t\tLocationId: testLocation.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = power.NewFeed(ctx, \"testFeed\", \u0026power.FeedArgs{\n\t\t\tPowerPanelId:          testPanel.ID(),\n\t\t\tStatus:                pulumi.String(\"active\"),\n\t\t\tType:                  pulumi.String(\"primary\"),\n\t\t\tSupply:                pulumi.String(\"ac\"),\n\t\t\tPhase:                 pulumi.String(\"single-phase\"),\n\t\t\tVoltage:               pulumi.Int(250),\n\t\t\tAmperage:              pulumi.Int(100),\n\t\t\tMaxPercentUtilization: pulumi.Int(80),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.Site;\nimport com.pulumi.netbox.SiteArgs;\nimport com.pulumi.netbox.Location;\nimport com.pulumi.netbox.LocationArgs;\nimport com.pulumi.netbox.power.Panel;\nimport com.pulumi.netbox.power.PanelArgs;\nimport com.pulumi.netbox.power.Feed;\nimport com.pulumi.netbox.power.FeedArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var testSite = new Site(\"testSite\", SiteArgs.builder()\n            .status(\"active\")\n            .build());\n\n        var testLocation = new Location(\"testLocation\", LocationArgs.builder()\n            .siteId(testSite.id())\n            .build());\n\n        var testPanel = new Panel(\"testPanel\", PanelArgs.builder()\n            .siteId(testSite.id())\n            .locationId(testLocation.id())\n            .build());\n\n        var testFeed = new Feed(\"testFeed\", FeedArgs.builder()\n            .powerPanelId(testPanel.id())\n            .status(\"active\")\n            .type(\"primary\")\n            .supply(\"ac\")\n            .phase(\"single-phase\")\n            .voltage(250)\n            .amperage(100)\n            .maxPercentUtilization(80)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  testSite:\n    type: netbox:Site\n    properties:\n      status: active\n  testLocation:\n    type: netbox:Location\n    properties:\n      siteId: ${testSite.id}\n  testPanel:\n    type: netbox:power:Panel\n    properties:\n      siteId: ${testSite.id}\n      locationId: ${testLocation.id}\n  testFeed:\n    type: netbox:power:Feed\n    properties:\n      powerPanelId: ${testPanel.id}\n      status: active\n      type: primary\n      supply: ac\n      phase: single-phase\n      voltage: 250\n      amperage: 100\n      maxPercentUtilization: 80\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "amperage": {
                    "type": "integer"
                },
                "comments": {
                    "type": "string"
                },
                "customFields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "markConnected": {
                    "type": "boolean",
                    "description": "Defaults to `false`.\n"
                },
                "maxPercentUtilization": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "phase": {
                    "type": "string",
                    "description": "One of [single-phase, three-phase].\n"
                },
                "powerPanelId": {
                    "type": "integer"
                },
                "rackId": {
                    "type": "integer"
                },
                "status": {
                    "type": "string",
                    "description": "One of [offline, active, planned, failed].\n"
                },
                "supply": {
                    "type": "string",
                    "description": "One of [ac, dc].\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "type": {
                    "type": "string",
                    "description": "One of [primary, redundant].\n"
                },
                "voltage": {
                    "type": "integer"
                }
            },
            "required": [
                "amperage",
                "maxPercentUtilization",
                "name",
                "phase",
                "powerPanelId",
                "status",
                "supply",
                "type",
                "voltage"
            ],
            "inputProperties": {
                "amperage": {
                    "type": "integer"
                },
                "comments": {
                    "type": "string"
                },
                "customFields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "markConnected": {
                    "type": "boolean",
                    "description": "Defaults to `false`.\n"
                },
                "maxPercentUtilization": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "phase": {
                    "type": "string",
                    "description": "One of [single-phase, three-phase].\n"
                },
                "powerPanelId": {
                    "type": "integer"
                },
                "rackId": {
                    "type": "integer"
                },
                "status": {
                    "type": "string",
                    "description": "One of [offline, active, planned, failed].\n"
                },
                "supply": {
                    "type": "string",
                    "description": "One of [ac, dc].\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "type": {
                    "type": "string",
                    "description": "One of [primary, redundant].\n"
                },
                "voltage": {
                    "type": "integer"
                }
            },
            "requiredInputs": [
                "amperage",
                "maxPercentUtilization",
                "phase",
                "powerPanelId",
                "status",
                "supply",
                "type",
                "voltage"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Feed resources.\n",
                "properties": {
                    "amperage": {
                        "type": "integer"
                    },
                    "comments": {
                        "type": "string"
                    },
                    "customFields": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "markConnected": {
                        "type": "boolean",
                        "description": "Defaults to `false`.\n"
                    },
                    "maxPercentUtilization": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "phase": {
                        "type": "string",
                        "description": "One of [single-phase, three-phase].\n"
                    },
                    "powerPanelId": {
                        "type": "integer"
                    },
                    "rackId": {
                        "type": "integer"
                    },
                    "status": {
                        "type": "string",
                        "description": "One of [offline, active, planned, failed].\n"
                    },
                    "supply": {
                        "type": "string",
                        "description": "One of [ac, dc].\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "type": {
                        "type": "string",
                        "description": "One of [primary, redundant].\n"
                    },
                    "voltage": {
                        "type": "integer"
                    }
                },
                "type": "object"
            }
        },
        "netbox:power/panel:Panel": {
            "description": "From the [official documentation](https://docs.netbox.dev/en/stable/models/dcim/powerpanel/):\n\n\u003e A power panel represents the origin point in NetBox for electrical power being disseminated by one or more power feeds. In a data center environment, one power panel often serves a group of racks, with an individual power feed extending to each rack, though this is not always the case. It is common to have two sets of panels and feeds arranged in parallel to provide redundant power to each rack.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumiverse/netbox\";\n\nconst testSite = new netbox.Site(\"testSite\", {status: \"active\"});\nconst testLocation = new netbox.Location(\"testLocation\", {siteId: testSite.id});\nconst testPanel = new netbox.power.Panel(\"testPanel\", {\n    siteId: testSite.id,\n    locationId: testLocation.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_netbox as netbox\n\ntest_site = netbox.Site(\"testSite\", status=\"active\")\ntest_location = netbox.Location(\"testLocation\", site_id=test_site.id)\ntest_panel = netbox.power.Panel(\"testPanel\",\n    site_id=test_site.id,\n    location_id=test_location.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Netbox = Pulumiverse.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var testSite = new Netbox.Site(\"testSite\", new()\n    {\n        Status = \"active\",\n    });\n\n    var testLocation = new Netbox.Location(\"testLocation\", new()\n    {\n        SiteId = testSite.Id,\n    });\n\n    var testPanel = new Netbox.Power.Panel(\"testPanel\", new()\n    {\n        SiteId = testSite.Id,\n        LocationId = testLocation.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox\"\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox/power\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttestSite, err := netbox.NewSite(ctx, \"testSite\", \u0026netbox.SiteArgs{\n\t\t\tStatus: pulumi.String(\"active\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttestLocation, err := netbox.NewLocation(ctx, \"testLocation\", \u0026netbox.LocationArgs{\n\t\t\tSiteId: testSite.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = power.NewPanel(ctx, \"testPanel\", \u0026power.PanelArgs{\n\t\t\tSiteId:     testSite.ID(),\n\t\t\tLocationId: testLocation.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.Site;\nimport com.pulumi.netbox.SiteArgs;\nimport com.pulumi.netbox.Location;\nimport com.pulumi.netbox.LocationArgs;\nimport com.pulumi.netbox.power.Panel;\nimport com.pulumi.netbox.power.PanelArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var testSite = new Site(\"testSite\", SiteArgs.builder()\n            .status(\"active\")\n            .build());\n\n        var testLocation = new Location(\"testLocation\", LocationArgs.builder()\n            .siteId(testSite.id())\n            .build());\n\n        var testPanel = new Panel(\"testPanel\", PanelArgs.builder()\n            .siteId(testSite.id())\n            .locationId(testLocation.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  testSite:\n    type: netbox:Site\n    properties:\n      status: active\n  testLocation:\n    type: netbox:Location\n    properties:\n      siteId: ${testSite.id}\n  testPanel:\n    type: netbox:power:Panel\n    properties:\n      siteId: ${testSite.id}\n      locationId: ${testLocation.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "comments": {
                    "type": "string"
                },
                "customFields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "locationId": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "siteId": {
                    "type": "integer"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": [
                "name",
                "siteId"
            ],
            "inputProperties": {
                "comments": {
                    "type": "string"
                },
                "customFields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "locationId": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "siteId": {
                    "type": "integer"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "requiredInputs": [
                "siteId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Panel resources.\n",
                "properties": {
                    "comments": {
                        "type": "string"
                    },
                    "customFields": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "locationId": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "siteId": {
                        "type": "integer"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object"
            }
        },
        "netbox:primary/ip:Ip": {
            "description": "This resource is used to define the primary IP for a given virtual machine. The primary IP is reflected in the Virtual machine Netbox UI, which identifies the Primary IPv4 and IPv6 addresses.\n\n",
            "properties": {
                "ipAddressId": {
                    "type": "integer"
                },
                "ipAddressVersion": {
                    "type": "integer",
                    "description": "Defaults to `4`.\n"
                },
                "virtualMachineId": {
                    "type": "integer"
                }
            },
            "required": [
                "ipAddressId",
                "virtualMachineId"
            ],
            "inputProperties": {
                "ipAddressId": {
                    "type": "integer"
                },
                "ipAddressVersion": {
                    "type": "integer",
                    "description": "Defaults to `4`.\n"
                },
                "virtualMachineId": {
                    "type": "integer"
                }
            },
            "requiredInputs": [
                "ipAddressId",
                "virtualMachineId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Ip resources.\n",
                "properties": {
                    "ipAddressId": {
                        "type": "integer"
                    },
                    "ipAddressVersion": {
                        "type": "integer",
                        "description": "Defaults to `4`.\n"
                    },
                    "virtualMachineId": {
                        "type": "integer"
                    }
                },
                "type": "object"
            }
        },
        "netbox:rack/reservation:Reservation": {
            "description": "From the [official documentation](https://docs.netbox.dev/en/stable/models/dcim/rackreservation/):\n\n\u003e Users can reserve specific units within a rack for future use. An arbitrary set of units within a rack can be associated with a single reservation, but reservations cannot span multiple racks. A description is required for each reservation, reservations may optionally be associated with a specific tenant.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumiverse/netbox\";\n\nconst testSite = new netbox.Site(\"testSite\", {status: \"active\"});\nconst testRack = new netbox.Rack(\"testRack\", {\n    siteId: testSite.id,\n    status: \"active\",\n    width: 10,\n    uHeight: 40,\n});\nconst testReservation = new netbox.rack.Reservation(\"testReservation\", {\n    rackId: testRack.id,\n    units: [\n        1,\n        2,\n        3,\n        4,\n        5,\n    ],\n    userId: 1,\n    description: \"my description\",\n});\n```\n```python\nimport pulumi\nimport pulumi_netbox as netbox\n\ntest_site = netbox.Site(\"testSite\", status=\"active\")\ntest_rack = netbox.Rack(\"testRack\",\n    site_id=test_site.id,\n    status=\"active\",\n    width=10,\n    u_height=40)\ntest_reservation = netbox.rack.Reservation(\"testReservation\",\n    rack_id=test_rack.id,\n    units=[\n        1,\n        2,\n        3,\n        4,\n        5,\n    ],\n    user_id=1,\n    description=\"my description\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Netbox = Pulumiverse.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var testSite = new Netbox.Site(\"testSite\", new()\n    {\n        Status = \"active\",\n    });\n\n    var testRack = new Netbox.Rack(\"testRack\", new()\n    {\n        SiteId = testSite.Id,\n        Status = \"active\",\n        Width = 10,\n        UHeight = 40,\n    });\n\n    var testReservation = new Netbox.Rack.Reservation(\"testReservation\", new()\n    {\n        RackId = testRack.Id,\n        Units = new[]\n        {\n            1,\n            2,\n            3,\n            4,\n            5,\n        },\n        UserId = 1,\n        Description = \"my description\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox\"\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox/rack\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttestSite, err := netbox.NewSite(ctx, \"testSite\", \u0026netbox.SiteArgs{\n\t\t\tStatus: pulumi.String(\"active\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttestRack, err := netbox.NewRack(ctx, \"testRack\", \u0026netbox.RackArgs{\n\t\t\tSiteId:  testSite.ID(),\n\t\t\tStatus:  pulumi.String(\"active\"),\n\t\t\tWidth:   pulumi.Int(10),\n\t\t\tUHeight: pulumi.Int(40),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = rack.NewReservation(ctx, \"testReservation\", \u0026rack.ReservationArgs{\n\t\t\tRackId: testRack.ID(),\n\t\t\tUnits: pulumi.IntArray{\n\t\t\t\tpulumi.Int(1),\n\t\t\t\tpulumi.Int(2),\n\t\t\t\tpulumi.Int(3),\n\t\t\t\tpulumi.Int(4),\n\t\t\t\tpulumi.Int(5),\n\t\t\t},\n\t\t\tUserId:      pulumi.Int(1),\n\t\t\tDescription: pulumi.String(\"my description\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.Site;\nimport com.pulumi.netbox.SiteArgs;\nimport com.pulumi.netbox.Rack;\nimport com.pulumi.netbox.RackArgs;\nimport com.pulumi.netbox.rack.Reservation;\nimport com.pulumi.netbox.rack.ReservationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var testSite = new Site(\"testSite\", SiteArgs.builder()\n            .status(\"active\")\n            .build());\n\n        var testRack = new Rack(\"testRack\", RackArgs.builder()\n            .siteId(testSite.id())\n            .status(\"active\")\n            .width(10)\n            .uHeight(40)\n            .build());\n\n        var testReservation = new Reservation(\"testReservation\", ReservationArgs.builder()\n            .rackId(testRack.id())\n            .units(            \n                1,\n                2,\n                3,\n                4,\n                5)\n            .userId(1)\n            .description(\"my description\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  testSite:\n    type: netbox:Site\n    properties:\n      status: active\n  testRack:\n    type: netbox:Rack\n    properties:\n      siteId: ${testSite.id}\n      status: active\n      width: 10\n      uHeight: 40\n  testReservation:\n    type: netbox:rack:Reservation\n    properties:\n      rackId: ${testRack.id}\n      units:\n        - 1\n        - 2\n        - 3\n        - 4\n        - 5\n      userId: 1\n      description: my description\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "comments": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "rackId": {
                    "type": "integer"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tenantId": {
                    "type": "integer"
                },
                "units": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "userId": {
                    "type": "integer"
                }
            },
            "required": [
                "description",
                "rackId",
                "units",
                "userId"
            ],
            "inputProperties": {
                "comments": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "rackId": {
                    "type": "integer"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tenantId": {
                    "type": "integer"
                },
                "units": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "userId": {
                    "type": "integer"
                }
            },
            "requiredInputs": [
                "description",
                "rackId",
                "units",
                "userId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Reservation resources.\n",
                "properties": {
                    "comments": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "rackId": {
                        "type": "integer"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "tenantId": {
                        "type": "integer"
                    },
                    "units": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    },
                    "userId": {
                        "type": "integer"
                    }
                },
                "type": "object"
            }
        },
        "netbox:rack/role:Role": {
            "description": "From the [official documentation](https://docs.netbox.dev/en/stable/models/dcim/rackrole/):\n\n\u003e Each rack can optionally be assigned a user-defined functional role. For example, you might designate a rack for compute or storage resources, or to house colocated customer devices.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumiverse/netbox\";\n\nconst test = new netbox.rack.Role(\"test\", {colorHex: \"111111\"});\n```\n```python\nimport pulumi\nimport pulumi_netbox as netbox\n\ntest = netbox.rack.Role(\"test\", color_hex=\"111111\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Netbox = Pulumiverse.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = new Netbox.Rack.Role(\"test\", new()\n    {\n        ColorHex = \"111111\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox/rack\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rack.NewRole(ctx, \"test\", \u0026rack.RoleArgs{\n\t\t\tColorHex: pulumi.String(\"111111\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.rack.Role;\nimport com.pulumi.netbox.rack.RoleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new Role(\"test\", RoleArgs.builder()\n            .colorHex(\"111111\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: netbox:rack:Role\n    properties:\n      colorHex: '111111'\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "colorHex": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": [
                "colorHex",
                "name",
                "slug"
            ],
            "inputProperties": {
                "colorHex": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "requiredInputs": [
                "colorHex"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Role resources.\n",
                "properties": {
                    "colorHex": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object"
            }
        },
        "netbox:route/target:Target": {
            "description": "From the [official documentation](https://docs.netbox.dev/en/stable/models/ipam/routetarget/):\n\n\u003e A route target is a particular type of extended BGP community used to control the redistribution of routes among VRF tables in a network. Route targets can be assigned to individual VRFs in NetBox as import or export targets (or both) to model this exchange in an L3VPN. Each route target must be given a unique name, which should be in a format prescribed by RFC 4364, similar to a VR route distinguisher.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumiverse/netbox\";\n\nconst testTenant = new netbox.Tenant(\"testTenant\", {});\nconst testTarget = new netbox.route.Target(\"testTarget\", {\n    description: \"my description\",\n    tenantId: testTenant.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_netbox as netbox\n\ntest_tenant = netbox.Tenant(\"testTenant\")\ntest_target = netbox.route.Target(\"testTarget\",\n    description=\"my description\",\n    tenant_id=test_tenant.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Netbox = Pulumiverse.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var testTenant = new Netbox.Tenant(\"testTenant\");\n\n    var testTarget = new Netbox.Route.Target(\"testTarget\", new()\n    {\n        Description = \"my description\",\n        TenantId = testTenant.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox\"\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox/route\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttestTenant, err := netbox.NewTenant(ctx, \"testTenant\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = route.NewTarget(ctx, \"testTarget\", \u0026route.TargetArgs{\n\t\t\tDescription: pulumi.String(\"my description\"),\n\t\t\tTenantId:    testTenant.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.Tenant;\nimport com.pulumi.netbox.route.Target;\nimport com.pulumi.netbox.route.TargetArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var testTenant = new Tenant(\"testTenant\");\n\n        var testTarget = new Target(\"testTarget\", TargetArgs.builder()\n            .description(\"my description\")\n            .tenantId(testTenant.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  testTenant:\n    type: netbox:Tenant\n  testTarget:\n    type: netbox:route:Target\n    properties:\n      description: my description\n      tenantId: ${testTenant.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tenantId": {
                    "type": "integer"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tenantId": {
                    "type": "integer"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Target resources.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "tenantId": {
                        "type": "integer"
                    }
                },
                "type": "object"
            }
        },
        "netbox:site/group:Group": {
            "description": "From the [official documentation](https://docs.netbox.dev/en/stable/features/facilities/#site-groups):\n\n\u003e Like regions, site groups can be arranged in a recursive hierarchy for grouping sites. However, whereas regions are intended for geographic organization, site groups may be used for functional grouping. For example, you might classify sites as corporate, branch, or customer sites in addition to where they are physically located.\n\u003e\n\u003e The use of both regions and site groups affords to independent but complementary dimensions across which sites can be organized.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumiverse/netbox\";\n\nconst parent = new netbox.site.Group(\"parent\", {description: \"sample description\"});\nconst child = new netbox.site.Group(\"child\", {\n    description: \"sample description\",\n    parentId: parent.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_netbox as netbox\n\nparent = netbox.site.Group(\"parent\", description=\"sample description\")\nchild = netbox.site.Group(\"child\",\n    description=\"sample description\",\n    parent_id=parent.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Netbox = Pulumiverse.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var parent = new Netbox.Site.Group(\"parent\", new()\n    {\n        Description = \"sample description\",\n    });\n\n    var child = new Netbox.Site.Group(\"child\", new()\n    {\n        Description = \"sample description\",\n        ParentId = parent.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox/site\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tparent, err := site.NewGroup(ctx, \"parent\", \u0026site.GroupArgs{\n\t\t\tDescription: pulumi.String(\"sample description\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = site.NewGroup(ctx, \"child\", \u0026site.GroupArgs{\n\t\t\tDescription: pulumi.String(\"sample description\"),\n\t\t\tParentId:    parent.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.site.Group;\nimport com.pulumi.netbox.site.GroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var parent = new Group(\"parent\", GroupArgs.builder()\n            .description(\"sample description\")\n            .build());\n\n        var child = new Group(\"child\", GroupArgs.builder()\n            .description(\"sample description\")\n            .parentId(parent.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  parent:\n    type: netbox:site:Group\n    properties:\n      description: sample description\n  child:\n    type: netbox:site:Group\n    properties:\n      description: sample description\n      parentId: ${parent.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "parentId": {
                    "type": "integer"
                },
                "slug": {
                    "type": "string"
                }
            },
            "required": [
                "name",
                "slug"
            ],
            "inputProperties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "parentId": {
                    "type": "integer"
                },
                "slug": {
                    "type": "string"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Group resources.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "parentId": {
                        "type": "integer"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "netbox:tenant/group:Group": {
            "description": "From the [official documentation](https://docs.netbox.dev/en/stable/features/tenancy/#tenant-groups):\n\n\u003e Tenants can be organized by custom groups. For instance, you might create one group called \"Customers\" and one called \"Departments.\" The assignment of a tenant to a group is optional.\n\u003e\n\u003e Tenant groups may be nested recursively to achieve a multi-level hierarchy. For example, you might have a group called \"Customers\" containing subgroups of individual tenants grouped by product or account team.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumiverse/netbox\";\n\nconst test = new netbox.tenant.Group(\"test\", {});\n```\n```python\nimport pulumi\nimport pulumi_netbox as netbox\n\ntest = netbox.tenant.Group(\"test\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Netbox = Pulumiverse.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = new Netbox.Tenant.Group(\"test\");\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox/tenant\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := tenant.NewGroup(ctx, \"test\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.tenant.Group;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new Group(\"test\");\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: netbox:tenant:Group\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "parentId": {
                    "type": "integer"
                },
                "slug": {
                    "type": "string"
                }
            },
            "required": [
                "name",
                "slug"
            ],
            "inputProperties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "parentId": {
                    "type": "integer"
                },
                "slug": {
                    "type": "string"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Group resources.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "parentId": {
                        "type": "integer"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "netbox:virtual/chassis:Chassis": {
            "description": "From the [official documentation](https://docs.netbox.dev/en/stable/features/devices-cabling/#virtual-chassis):\n\n\t\t\u003e Sometimes it is necessary to model a set of physical devices as sharing a single management plane. Perhaps the most common example of such a scenario is stackable switches. These can be modeled as virtual chassis in NetBox, with one device acting as the chassis master and the rest as members. All components of member devices will appear on the master.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumiverse/netbox\";\n\nconst example = new netbox.virtual.Chassis(\"example\", {\n    description: \"virtual chassis\",\n    domain: \"domain\",\n});\n```\n```python\nimport pulumi\nimport pulumi_netbox as netbox\n\nexample = netbox.virtual.Chassis(\"example\",\n    description=\"virtual chassis\",\n    domain=\"domain\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Netbox = Pulumiverse.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Netbox.Virtual.Chassis(\"example\", new()\n    {\n        Description = \"virtual chassis\",\n        Domain = \"domain\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox/virtual\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := virtual.NewChassis(ctx, \"example\", \u0026virtual.ChassisArgs{\n\t\t\tDescription: pulumi.String(\"virtual chassis\"),\n\t\t\tDomain:      pulumi.String(\"domain\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.virtual.Chassis;\nimport com.pulumi.netbox.virtual.ChassisArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Chassis(\"example\", ChassisArgs.builder()\n            .description(\"virtual chassis\")\n            .domain(\"domain\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: netbox:virtual:Chassis\n    properties:\n      description: virtual chassis\n      domain: domain\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "comments": {
                    "type": "string"
                },
                "customFields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "domain": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "comments": {
                    "type": "string"
                },
                "customFields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "domain": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Chassis resources.\n",
                "properties": {
                    "comments": {
                        "type": "string"
                    },
                    "customFields": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "domain": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object"
            }
        },
        "netbox:virtual/disk:Disk": {
            "description": "From the [official documentation](https://docs.netbox.dev/en/stable/models/virtualization/virtualdisk/):\n\n\t\t\u003e A virtual disk is used to model discrete virtual hard disks assigned to virtual machines.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```yaml\nresources:\n  baseVm:\n    type: netbox:virtual:Machine\n    properties:\n      clusterId: ${vmwCluster01.id}\n  example:\n    type: netbox:virtual:Disk\n    properties:\n      description: Main disk\n      size: 50\n      virtualMachineId: ${baseVm.id}\nvariables:\n  vmwCluster01:\n    fn::invoke:\n      Function: netbox:getCluster\n      Arguments:\n        name: vmw-cluster-01\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "customFields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "sizeGb": {
                    "type": "integer"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "virtualMachineId": {
                    "type": "integer"
                }
            },
            "required": [
                "name",
                "sizeGb",
                "virtualMachineId"
            ],
            "inputProperties": {
                "customFields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "sizeGb": {
                    "type": "integer"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "virtualMachineId": {
                    "type": "integer"
                }
            },
            "requiredInputs": [
                "sizeGb",
                "virtualMachineId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Disk resources.\n",
                "properties": {
                    "customFields": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "sizeGb": {
                        "type": "integer"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "virtualMachineId": {
                        "type": "integer"
                    }
                },
                "type": "object"
            }
        },
        "netbox:virtual/machine:Machine": {
            "description": "From the [official documentation](https://docs.netbox.dev/en/stable/features/virtualization/#virtual-machines):\n\n\u003e A virtual machine is a virtualized compute instance. These behave in NetBox very similarly to device objects, but without any physical attributes. For example, a VM may have interfaces assigned to it with IP addresses and VLANs, however its interfaces cannot be connected via cables (because they are virtual). Each VM may also define its compute, memory, and storage resources as well.\n\n",
            "properties": {
                "clusterId": {
                    "type": "integer",
                    "description": "At least one of `site_id` or `cluster_id` must be given.\n"
                },
                "comments": {
                    "type": "string"
                },
                "customFields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "deviceId": {
                    "type": "integer"
                },
                "diskSizeGb": {
                    "type": "integer"
                },
                "localContextData": {
                    "type": "string",
                    "description": "This is best managed through the use of `jsonencode` and a map of settings.\n"
                },
                "memoryMb": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "platformId": {
                    "type": "integer"
                },
                "primaryIpv4": {
                    "type": "integer"
                },
                "primaryIpv6": {
                    "type": "integer"
                },
                "roleId": {
                    "type": "integer"
                },
                "siteId": {
                    "type": "integer",
                    "description": "At least one of `site_id` or `cluster_id` must be given.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Valid values are `offline`, `active`, `planned`, `staged`, `failed` and `decommissioning`. Defaults to `active`.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tenantId": {
                    "type": "integer"
                },
                "vcpus": {
                    "type": "number"
                }
            },
            "required": [
                "diskSizeGb",
                "name",
                "primaryIpv4",
                "primaryIpv6"
            ],
            "inputProperties": {
                "clusterId": {
                    "type": "integer",
                    "description": "At least one of `site_id` or `cluster_id` must be given.\n"
                },
                "comments": {
                    "type": "string"
                },
                "customFields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "deviceId": {
                    "type": "integer"
                },
                "diskSizeGb": {
                    "type": "integer"
                },
                "localContextData": {
                    "type": "string",
                    "description": "This is best managed through the use of `jsonencode` and a map of settings.\n"
                },
                "memoryMb": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "platformId": {
                    "type": "integer"
                },
                "roleId": {
                    "type": "integer"
                },
                "siteId": {
                    "type": "integer",
                    "description": "At least one of `site_id` or `cluster_id` must be given.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Valid values are `offline`, `active`, `planned`, `staged`, `failed` and `decommissioning`. Defaults to `active`.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tenantId": {
                    "type": "integer"
                },
                "vcpus": {
                    "type": "number"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Machine resources.\n",
                "properties": {
                    "clusterId": {
                        "type": "integer",
                        "description": "At least one of `site_id` or `cluster_id` must be given.\n"
                    },
                    "comments": {
                        "type": "string"
                    },
                    "customFields": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "deviceId": {
                        "type": "integer"
                    },
                    "diskSizeGb": {
                        "type": "integer"
                    },
                    "localContextData": {
                        "type": "string",
                        "description": "This is best managed through the use of `jsonencode` and a map of settings.\n"
                    },
                    "memoryMb": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "platformId": {
                        "type": "integer"
                    },
                    "primaryIpv4": {
                        "type": "integer"
                    },
                    "primaryIpv6": {
                        "type": "integer"
                    },
                    "roleId": {
                        "type": "integer"
                    },
                    "siteId": {
                        "type": "integer",
                        "description": "At least one of `site_id` or `cluster_id` must be given.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Valid values are `offline`, `active`, `planned`, `staged`, `failed` and `decommissioning`. Defaults to `active`.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "tenantId": {
                        "type": "integer"
                    },
                    "vcpus": {
                        "type": "number"
                    }
                },
                "type": "object"
            }
        },
        "netbox:vlan/group:Group": {
            "description": "\u003e A VLAN Group represents a collection of VLANs. Generally, these are limited by one of a number of scopes such as \"Site\" or \"Virtualization Cluster\".\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumiverse/netbox\";\n\n//Basic VLAN Group example\nconst example1 = new netbox.vlan.Group(\"example1\", {\n    slug: \"example1\",\n    minVid: 1,\n    maxVid: 4094,\n});\n//Full VLAN Group example\nconst example2 = new netbox.vlan.Group(\"example2\", {\n    slug: \"example2\",\n    minVid: 1,\n    maxVid: 4094,\n    scopeType: \"dcim.site\",\n    scopeId: netbox_site.example.id,\n    description: \"Second Example VLAN Group\",\n    tags: [netbox_tag.example.id],\n});\n```\n```python\nimport pulumi\nimport pulumi_netbox as netbox\n\n#Basic VLAN Group example\nexample1 = netbox.vlan.Group(\"example1\",\n    slug=\"example1\",\n    min_vid=1,\n    max_vid=4094)\n#Full VLAN Group example\nexample2 = netbox.vlan.Group(\"example2\",\n    slug=\"example2\",\n    min_vid=1,\n    max_vid=4094,\n    scope_type=\"dcim.site\",\n    scope_id=netbox_site[\"example\"][\"id\"],\n    description=\"Second Example VLAN Group\",\n    tags=[netbox_tag[\"example\"][\"id\"]])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Netbox = Pulumiverse.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    //Basic VLAN Group example\n    var example1 = new Netbox.Vlan.Group(\"example1\", new()\n    {\n        Slug = \"example1\",\n        MinVid = 1,\n        MaxVid = 4094,\n    });\n\n    //Full VLAN Group example\n    var example2 = new Netbox.Vlan.Group(\"example2\", new()\n    {\n        Slug = \"example2\",\n        MinVid = 1,\n        MaxVid = 4094,\n        ScopeType = \"dcim.site\",\n        ScopeId = netbox_site.Example.Id,\n        Description = \"Second Example VLAN Group\",\n        Tags = new[]\n        {\n            netbox_tag.Example.Id,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox/vlan\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Basic VLAN Group example\n\t\t_, err := vlan.NewGroup(ctx, \"example1\", \u0026vlan.GroupArgs{\n\t\t\tSlug:   pulumi.String(\"example1\"),\n\t\t\tMinVid: pulumi.Int(1),\n\t\t\tMaxVid: pulumi.Int(4094),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Full VLAN Group example\n\t\t_, err = vlan.NewGroup(ctx, \"example2\", \u0026vlan.GroupArgs{\n\t\t\tSlug:        pulumi.String(\"example2\"),\n\t\t\tMinVid:      pulumi.Int(1),\n\t\t\tMaxVid:      pulumi.Int(4094),\n\t\t\tScopeType:   pulumi.String(\"dcim.site\"),\n\t\t\tScopeId:     pulumi.Any(netbox_site.Example.Id),\n\t\t\tDescription: pulumi.String(\"Second Example VLAN Group\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tnetbox_tag.Example.Id,\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.vlan.Group;\nimport com.pulumi.netbox.vlan.GroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        //Basic VLAN Group example\n        var example1 = new Group(\"example1\", GroupArgs.builder()\n            .slug(\"example1\")\n            .minVid(1)\n            .maxVid(4094)\n            .build());\n\n        //Full VLAN Group example\n        var example2 = new Group(\"example2\", GroupArgs.builder()\n            .slug(\"example2\")\n            .minVid(1)\n            .maxVid(4094)\n            .scopeType(\"dcim.site\")\n            .scopeId(netbox_site.example().id())\n            .description(\"Second Example VLAN Group\")\n            .tags(netbox_tag.example().id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  #Basic VLAN Group example\n  example1:\n    type: netbox:vlan:Group\n    properties:\n      slug: example1\n      minVid: 1\n      maxVid: 4094\n  #Full VLAN Group example\n  example2:\n    type: netbox:vlan:Group\n    properties:\n      slug: example2\n      minVid: 1\n      maxVid: 4094\n      scopeType: dcim.site\n      scopeId: ${netbox_site.example.id}\n      description: Second Example VLAN Group\n      tags:\n        - ${netbox_tag.example.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Defaults to `\"\"`.\n"
                },
                "maxVid": {
                    "type": "integer"
                },
                "minVid": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "scopeId": {
                    "type": "integer",
                    "description": "Required when `scope_type` is set.\n"
                },
                "scopeType": {
                    "type": "string",
                    "description": "Valid values are `dcim.location`, `dcim.site`, `dcim.sitegroup`, `dcim.region`, `dcim.rack`, `virtualization.cluster` and `virtualization.clustergroup`.\n"
                },
                "slug": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": [
                "maxVid",
                "minVid",
                "name",
                "slug"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Defaults to `\"\"`.\n"
                },
                "maxVid": {
                    "type": "integer"
                },
                "minVid": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "scopeId": {
                    "type": "integer",
                    "description": "Required when `scope_type` is set.\n"
                },
                "scopeType": {
                    "type": "string",
                    "description": "Valid values are `dcim.location`, `dcim.site`, `dcim.sitegroup`, `dcim.region`, `dcim.rack`, `virtualization.cluster` and `virtualization.clustergroup`.\n"
                },
                "slug": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "requiredInputs": [
                "maxVid",
                "minVid",
                "slug"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Group resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Defaults to `\"\"`.\n"
                    },
                    "maxVid": {
                        "type": "integer"
                    },
                    "minVid": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "scopeId": {
                        "type": "integer",
                        "description": "Required when `scope_type` is set.\n"
                    },
                    "scopeType": {
                        "type": "string",
                        "description": "Valid values are `dcim.location`, `dcim.site`, `dcim.sitegroup`, `dcim.region`, `dcim.rack`, `virtualization.cluster` and `virtualization.clustergroup`.\n"
                    },
                    "slug": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object"
            }
        },
        "netbox:vpn/tunnel/group:Group": {
            "description": "From the [official documentation](https://docs.netbox.dev/en/stable/features/vpn-tunnels/):\n\n\u003e NetBox can model private tunnels formed among virtual termination points across your network. Typical tunnel implementations include GRE, IP-in-IP, and IPSec. A tunnel may be terminated to two or more device or virtual machine interfaces. For convenient organization, tunnels may be assigned to user-defined groups.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumiverse/netbox\";\n\nconst test = new netbox.vpn.tunnel.Group(\"test\", {description: \"My description\"});\n```\n```python\nimport pulumi\nimport pulumi_netbox as netbox\n\ntest = netbox.vpn.tunnel.Group(\"test\", description=\"My description\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Netbox = Pulumiverse.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = new Netbox.Vpn.Tunnel.Group(\"test\", new()\n    {\n        Description = \"My description\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox/vpn\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vpn.NewGroup(ctx, \"test\", \u0026vpn.GroupArgs{\n\t\t\tDescription: pulumi.String(\"My description\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.vpn.Group;\nimport com.pulumi.netbox.vpn.GroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new Group(\"test\", GroupArgs.builder()\n            .description(\"My description\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: netbox:vpn/tunnel:Group\n    properties:\n      description: My description\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                }
            },
            "required": [
                "name",
                "slug"
            ],
            "inputProperties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Group resources.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "netbox:vpn/tunnel/termination:Termination": {
            "description": "From the [official documentation](https://docs.netbox.dev/en/stable/features/vpn-tunnels/):\n\n\u003e NetBox can model private tunnels formed among virtual termination points across your network. Typical tunnel implementations include GRE, IP-in-IP, and IPSec. A tunnel may be terminated to two or more device or virtual machine interfaces. For convenient organization, tunnels may be assigned to user-defined groups.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumiverse/netbox\";\n\nconst testGroup = new netbox.vpn.tunnel.Group(\"testGroup\", {description: \"description\"});\nconst testTunnel = new netbox.vpn.Tunnel(\"testTunnel\", {\n    encapsulation: \"ipsec-transport\",\n    status: \"active\",\n    tunnelGroupId: testGroup.id,\n});\nconst device = new netbox.vpn.tunnel.Termination(\"device\", {\n    role: \"peer\",\n    tunnelId: testTunnel.id,\n    deviceInterfaceId: 123,\n});\nconst vm = new netbox.vpn.tunnel.Termination(\"vm\", {\n    role: \"peer\",\n    tunnelId: testTunnel.id,\n    virtualMachineInterfaceId: 234,\n});\n```\n```python\nimport pulumi\nimport pulumi_netbox as netbox\n\ntest_group = netbox.vpn.tunnel.Group(\"testGroup\", description=\"description\")\ntest_tunnel = netbox.vpn.Tunnel(\"testTunnel\",\n    encapsulation=\"ipsec-transport\",\n    status=\"active\",\n    tunnel_group_id=test_group.id)\ndevice = netbox.vpn.tunnel.Termination(\"device\",\n    role=\"peer\",\n    tunnel_id=test_tunnel.id,\n    device_interface_id=123)\nvm = netbox.vpn.tunnel.Termination(\"vm\",\n    role=\"peer\",\n    tunnel_id=test_tunnel.id,\n    virtual_machine_interface_id=234)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Netbox = Pulumiverse.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var testGroup = new Netbox.Vpn.Tunnel.Group(\"testGroup\", new()\n    {\n        Description = \"description\",\n    });\n\n    var testTunnel = new Netbox.Vpn.Tunnel(\"testTunnel\", new()\n    {\n        Encapsulation = \"ipsec-transport\",\n        Status = \"active\",\n        TunnelGroupId = testGroup.Id,\n    });\n\n    var device = new Netbox.Vpn.Tunnel.Termination(\"device\", new()\n    {\n        Role = \"peer\",\n        TunnelId = testTunnel.Id,\n        DeviceInterfaceId = 123,\n    });\n\n    var vm = new Netbox.Vpn.Tunnel.Termination(\"vm\", new()\n    {\n        Role = \"peer\",\n        TunnelId = testTunnel.Id,\n        VirtualMachineInterfaceId = 234,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox/vpn\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttestGroup, err := vpn.NewGroup(ctx, \"testGroup\", \u0026vpn.GroupArgs{\n\t\t\tDescription: pulumi.String(\"description\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttestTunnel, err := vpn.NewTunnel(ctx, \"testTunnel\", \u0026vpn.TunnelArgs{\n\t\t\tEncapsulation: pulumi.String(\"ipsec-transport\"),\n\t\t\tStatus:        pulumi.String(\"active\"),\n\t\t\tTunnelGroupId: testGroup.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = vpn.NewTermination(ctx, \"device\", \u0026vpn.TerminationArgs{\n\t\t\tRole:              pulumi.String(\"peer\"),\n\t\t\tTunnelId:          testTunnel.ID(),\n\t\t\tDeviceInterfaceId: pulumi.Int(123),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = vpn.NewTermination(ctx, \"vm\", \u0026vpn.TerminationArgs{\n\t\t\tRole:                      pulumi.String(\"peer\"),\n\t\t\tTunnelId:                  testTunnel.ID(),\n\t\t\tVirtualMachineInterfaceId: pulumi.Int(234),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.vpn.Group;\nimport com.pulumi.netbox.vpn.GroupArgs;\nimport com.pulumi.netbox.vpn.Tunnel;\nimport com.pulumi.netbox.vpn.TunnelArgs;\nimport com.pulumi.netbox.vpn.Termination;\nimport com.pulumi.netbox.vpn.TerminationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var testGroup = new Group(\"testGroup\", GroupArgs.builder()\n            .description(\"description\")\n            .build());\n\n        var testTunnel = new Tunnel(\"testTunnel\", TunnelArgs.builder()\n            .encapsulation(\"ipsec-transport\")\n            .status(\"active\")\n            .tunnelGroupId(testGroup.id())\n            .build());\n\n        var device = new Termination(\"device\", TerminationArgs.builder()\n            .role(\"peer\")\n            .tunnelId(testTunnel.id())\n            .deviceInterfaceId(123)\n            .build());\n\n        var vm = new Termination(\"vm\", TerminationArgs.builder()\n            .role(\"peer\")\n            .tunnelId(testTunnel.id())\n            .virtualMachineInterfaceId(234)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  testGroup:\n    type: netbox:vpn/tunnel:Group\n    properties:\n      description: description\n  testTunnel:\n    type: netbox:vpn:Tunnel\n    properties:\n      encapsulation: ipsec-transport\n      status: active\n      tunnelGroupId: ${testGroup.id}\n  device:\n    type: netbox:vpn/tunnel:Termination\n    properties:\n      role: peer\n      tunnelId: ${testTunnel.id}\n      deviceInterfaceId: 123\n  vm:\n    type: netbox:vpn/tunnel:Termination\n    properties:\n      role: peer\n      tunnelId: ${testTunnel.id}\n      virtualMachineInterfaceId: 234\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "deviceInterfaceId": {
                    "type": "integer",
                    "description": "Exactly one of `virtual_machine_interface_id` or `device_interface_id` must be given.\n"
                },
                "outsideIpAddressId": {
                    "type": "integer"
                },
                "role": {
                    "type": "string",
                    "description": "Valid values are `peer`, `hub` and `spoke`.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tunnelId": {
                    "type": "integer"
                },
                "virtualMachineInterfaceId": {
                    "type": "integer",
                    "description": "Exactly one of `virtual_machine_interface_id` or `device_interface_id` must be given.\n"
                }
            },
            "required": [
                "role",
                "tunnelId"
            ],
            "inputProperties": {
                "deviceInterfaceId": {
                    "type": "integer",
                    "description": "Exactly one of `virtual_machine_interface_id` or `device_interface_id` must be given.\n"
                },
                "outsideIpAddressId": {
                    "type": "integer"
                },
                "role": {
                    "type": "string",
                    "description": "Valid values are `peer`, `hub` and `spoke`.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tunnelId": {
                    "type": "integer"
                },
                "virtualMachineInterfaceId": {
                    "type": "integer",
                    "description": "Exactly one of `virtual_machine_interface_id` or `device_interface_id` must be given.\n"
                }
            },
            "requiredInputs": [
                "role",
                "tunnelId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Termination resources.\n",
                "properties": {
                    "deviceInterfaceId": {
                        "type": "integer",
                        "description": "Exactly one of `virtual_machine_interface_id` or `device_interface_id` must be given.\n"
                    },
                    "outsideIpAddressId": {
                        "type": "integer"
                    },
                    "role": {
                        "type": "string",
                        "description": "Valid values are `peer`, `hub` and `spoke`.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "tunnelId": {
                        "type": "integer"
                    },
                    "virtualMachineInterfaceId": {
                        "type": "integer",
                        "description": "Exactly one of `virtual_machine_interface_id` or `device_interface_id` must be given.\n"
                    }
                },
                "type": "object"
            }
        },
        "netbox:vpn/tunnel:Tunnel": {
            "description": "From the [official documentation](https://docs.netbox.dev/en/stable/features/vpn-tunnels/):\n\n\u003e NetBox can model private tunnels formed among virtual termination points across your network. Typical tunnel implementations include GRE, IP-in-IP, and IPSec. A tunnel may be terminated to two or more device or virtual machine interfaces. For convenient organization, tunnels may be assigned to user-defined groups.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumiverse/netbox\";\n\nconst testGroup = new netbox.vpn.tunnel.Group(\"testGroup\", {});\nconst testTunnel = new netbox.vpn.Tunnel(\"testTunnel\", {\n    encapsulation: \"ipsec-transport\",\n    status: \"active\",\n    tunnelGroupId: testGroup.id,\n    description: \"This is a description.\",\n    tunnelId: 3,\n    tenantId: 2,\n});\n```\n```python\nimport pulumi\nimport pulumi_netbox as netbox\n\ntest_group = netbox.vpn.tunnel.Group(\"testGroup\")\ntest_tunnel = netbox.vpn.Tunnel(\"testTunnel\",\n    encapsulation=\"ipsec-transport\",\n    status=\"active\",\n    tunnel_group_id=test_group.id,\n    description=\"This is a description.\",\n    tunnel_id=3,\n    tenant_id=2)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Netbox = Pulumiverse.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var testGroup = new Netbox.Vpn.Tunnel.Group(\"testGroup\");\n\n    var testTunnel = new Netbox.Vpn.Tunnel(\"testTunnel\", new()\n    {\n        Encapsulation = \"ipsec-transport\",\n        Status = \"active\",\n        TunnelGroupId = testGroup.Id,\n        Description = \"This is a description.\",\n        TunnelId = 3,\n        TenantId = 2,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox/vpn\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttestGroup, err := vpn.NewGroup(ctx, \"testGroup\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = vpn.NewTunnel(ctx, \"testTunnel\", \u0026vpn.TunnelArgs{\n\t\t\tEncapsulation: pulumi.String(\"ipsec-transport\"),\n\t\t\tStatus:        pulumi.String(\"active\"),\n\t\t\tTunnelGroupId: testGroup.ID(),\n\t\t\tDescription:   pulumi.String(\"This is a description.\"),\n\t\t\tTunnelId:      pulumi.Int(3),\n\t\t\tTenantId:      pulumi.Int(2),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.vpn.Group;\nimport com.pulumi.netbox.vpn.Tunnel;\nimport com.pulumi.netbox.vpn.TunnelArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var testGroup = new Group(\"testGroup\");\n\n        var testTunnel = new Tunnel(\"testTunnel\", TunnelArgs.builder()\n            .encapsulation(\"ipsec-transport\")\n            .status(\"active\")\n            .tunnelGroupId(testGroup.id())\n            .description(\"This is a description.\")\n            .tunnelId(3)\n            .tenantId(2)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  testGroup:\n    type: netbox:vpn/tunnel:Group\n  testTunnel:\n    type: netbox:vpn:Tunnel\n    properties:\n      encapsulation: ipsec-transport\n      status: active\n      tunnelGroupId: ${testGroup.id}\n      description: This is a description.\n      tunnelId: 3\n      tenantId: 2\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "description": {
                    "type": "string"
                },
                "encapsulation": {
                    "type": "string",
                    "description": "Valid values are `ipsec-transport`, `ipsec-tunnel`, `ip-ip` and `gre`.\n"
                },
                "name": {
                    "type": "string"
                },
                "status": {
                    "type": "string",
                    "description": "Valid values are `planned`, `active` and `disabled`.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tenantId": {
                    "type": "integer"
                },
                "tunnelGroupId": {
                    "type": "integer"
                },
                "tunnelId": {
                    "type": "integer"
                }
            },
            "required": [
                "encapsulation",
                "name",
                "status",
                "tunnelGroupId"
            ],
            "inputProperties": {
                "description": {
                    "type": "string"
                },
                "encapsulation": {
                    "type": "string",
                    "description": "Valid values are `ipsec-transport`, `ipsec-tunnel`, `ip-ip` and `gre`.\n"
                },
                "name": {
                    "type": "string"
                },
                "status": {
                    "type": "string",
                    "description": "Valid values are `planned`, `active` and `disabled`.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tenantId": {
                    "type": "integer"
                },
                "tunnelGroupId": {
                    "type": "integer"
                },
                "tunnelId": {
                    "type": "integer"
                }
            },
            "requiredInputs": [
                "encapsulation",
                "status",
                "tunnelGroupId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Tunnel resources.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "encapsulation": {
                        "type": "string",
                        "description": "Valid values are `ipsec-transport`, `ipsec-tunnel`, `ip-ip` and `gre`.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string",
                        "description": "Valid values are `planned`, `active` and `disabled`.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "tenantId": {
                        "type": "integer"
                    },
                    "tunnelGroupId": {
                        "type": "integer"
                    },
                    "tunnelId": {
                        "type": "integer"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "netbox:available/getPrefix:getPrefix": {
            "inputs": {
                "description": "A collection of arguments for invoking getPrefix.\n",
                "properties": {
                    "prefixId": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "prefixId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPrefix.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "prefixId": {
                        "type": "integer"
                    },
                    "prefixesAvailables": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/netbox:available/getPrefixPrefixesAvailable:getPrefixPrefixesAvailable"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "prefixId",
                    "prefixesAvailables",
                    "id"
                ]
            }
        },
        "netbox:cluster/getGroup:getGroup": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumi/netbox\";\n\nconst dcWest = netbox.cluster.getGroup({\n    name: \"dc-west\",\n});\n```\n```python\nimport pulumi\nimport pulumi_netbox as netbox\n\ndc_west = netbox.cluster.get_group(name=\"dc-west\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Netbox = Pulumi.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var dcWest = Netbox.Cluster.GetGroup.Invoke(new()\n    {\n        Name = \"dc-west\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox/cluster\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := cluster.LookupGroup(ctx, \u0026cluster.LookupGroupArgs{\n\t\t\tName: \"dc-west\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.cluster.ClusterFunctions;\nimport com.pulumi.netbox.cluster.inputs.GetGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var dcWest = ClusterFunctions.getGroup(GetGroupArgs.builder()\n            .name(\"dc-west\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  dcWest:\n    fn::invoke:\n      Function: netbox:cluster:getGroup\n      Arguments:\n        name: dc-west\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getGroup.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGroup.\n",
                "properties": {
                    "clusterGroupId": {
                        "type": "integer"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "clusterGroupId",
                    "name",
                    "id"
                ]
            }
        },
        "netbox:cluster/getType:getType": {
            "inputs": {
                "description": "A collection of arguments for invoking getType.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getType.\n",
                "properties": {
                    "clusterTypeId": {
                        "type": "integer"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "clusterTypeId",
                    "name",
                    "id"
                ]
            }
        },
        "netbox:config/getContext:getContext": {
            "inputs": {
                "description": "A collection of arguments for invoking getContext.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getContext.\n",
                "properties": {
                    "clusterGroups": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    },
                    "clusterTypes": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    },
                    "clusters": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    },
                    "data": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "deviceTypes": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "locations": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "platforms": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    },
                    "regions": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    },
                    "roles": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    },
                    "siteGroups": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    },
                    "sites": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "tenantGroups": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    },
                    "tenants": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    },
                    "weight": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "clusterGroups",
                    "clusterTypes",
                    "clusters",
                    "data",
                    "description",
                    "deviceTypes",
                    "locations",
                    "name",
                    "platforms",
                    "regions",
                    "roles",
                    "siteGroups",
                    "sites",
                    "tags",
                    "tenantGroups",
                    "tenants",
                    "weight",
                    "id"
                ]
            }
        },
        "netbox:contact/getGroup:getGroup": {
            "inputs": {
                "description": "A collection of arguments for invoking getGroup.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGroup.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "parentId": {
                        "type": "integer"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "name",
                    "parentId",
                    "slug",
                    "id"
                ]
            }
        },
        "netbox:contact/getRole:getRole": {
            "inputs": {
                "description": "A collection of arguments for invoking getRole.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "At least one of `name` or `slug` must be given.\n"
                    },
                    "slug": {
                        "type": "string",
                        "description": "At least one of `name` or `slug` must be given.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getRole.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "At least one of `name` or `slug` must be given.\n"
                    },
                    "slug": {
                        "type": "string",
                        "description": "At least one of `name` or `slug` must be given.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "slug",
                    "id"
                ]
            }
        },
        "netbox:device/getInterfaces:getInterfaces": {
            "inputs": {
                "description": "A collection of arguments for invoking getInterfaces.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/netbox:device/getInterfacesFilter:getInterfacesFilter"
                        }
                    },
                    "nameRegex": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getInterfaces.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/netbox:device/getInterfacesFilter:getInterfacesFilter"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "interfaces": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/netbox:device/getInterfacesInterface:getInterfacesInterface"
                        }
                    },
                    "nameRegex": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "interfaces",
                    "id"
                ]
            }
        },
        "netbox:device/getRole:getRole": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumi/netbox\";\n\nconst coreSw = netbox.device.getRole({\n    name: \"core-sw\",\n});\n```\n```python\nimport pulumi\nimport pulumi_netbox as netbox\n\ncore_sw = netbox.device.get_role(name=\"core-sw\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Netbox = Pulumi.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var coreSw = Netbox.Device.GetRole.Invoke(new()\n    {\n        Name = \"core-sw\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox/device\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := device.LookupRole(ctx, \u0026device.LookupRoleArgs{\n\t\t\tName: \"core-sw\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.device.DeviceFunctions;\nimport com.pulumi.netbox.device.inputs.GetRoleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var coreSw = DeviceFunctions.getRole(GetRoleArgs.builder()\n            .name(\"core-sw\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  coreSw:\n    fn::invoke:\n      Function: netbox:device:getRole\n      Arguments:\n        name: core-sw\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getRole.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getRole.\n",
                "properties": {
                    "colorHex": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "colorHex",
                    "name",
                    "slug",
                    "tags",
                    "id"
                ]
            }
        },
        "netbox:device/getType:getType": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumi/netbox\";\n\nconst ex1 = netbox.device.getType({\n    model: \"7210 SAS-Sx 10/100GE\",\n});\nconst ex2 = netbox.device.getType({\n    slug: \"7210-sas-sx-10-100GE\",\n});\nconst ex3 = netbox.device.getType({\n    manufacturer: \"Nokia\",\n    partNumber: \"3HE11597AARB01\",\n});\n```\n```python\nimport pulumi\nimport pulumi_netbox as netbox\n\nex1 = netbox.device.get_type(model=\"7210 SAS-Sx 10/100GE\")\nex2 = netbox.device.get_type(slug=\"7210-sas-sx-10-100GE\")\nex3 = netbox.device.get_type(manufacturer=\"Nokia\",\n    part_number=\"3HE11597AARB01\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Netbox = Pulumi.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var ex1 = Netbox.Device.GetType.Invoke(new()\n    {\n        Model = \"7210 SAS-Sx 10/100GE\",\n    });\n\n    var ex2 = Netbox.Device.GetType.Invoke(new()\n    {\n        Slug = \"7210-sas-sx-10-100GE\",\n    });\n\n    var ex3 = Netbox.Device.GetType.Invoke(new()\n    {\n        Manufacturer = \"Nokia\",\n        PartNumber = \"3HE11597AARB01\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox/device\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := device.LookupType(ctx, \u0026device.LookupTypeArgs{\n\t\t\tModel: pulumi.StringRef(\"7210 SAS-Sx 10/100GE\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = device.LookupType(ctx, \u0026device.LookupTypeArgs{\n\t\t\tSlug: pulumi.StringRef(\"7210-sas-sx-10-100GE\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = device.LookupType(ctx, \u0026device.LookupTypeArgs{\n\t\t\tManufacturer: pulumi.StringRef(\"Nokia\"),\n\t\t\tPartNumber:   pulumi.StringRef(\"3HE11597AARB01\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.device.DeviceFunctions;\nimport com.pulumi.netbox.device.inputs.GetTypeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var ex1 = DeviceFunctions.getType(GetTypeArgs.builder()\n            .model(\"7210 SAS-Sx 10/100GE\")\n            .build());\n\n        final var ex2 = DeviceFunctions.getType(GetTypeArgs.builder()\n            .slug(\"7210-sas-sx-10-100GE\")\n            .build());\n\n        final var ex3 = DeviceFunctions.getType(GetTypeArgs.builder()\n            .manufacturer(\"Nokia\")\n            .partNumber(\"3HE11597AARB01\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  ex1:\n    fn::invoke:\n      Function: netbox:device:getType\n      Arguments:\n        model: 7210 SAS-Sx 10/100GE\n  ex2:\n    fn::invoke:\n      Function: netbox:device:getType\n      Arguments:\n        slug: 7210-sas-sx-10-100GE\n  ex3:\n    fn::invoke:\n      Function: netbox:device:getType\n      Arguments:\n        manufacturer: Nokia\n        partNumber: 3HE11597AARB01\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getType.\n",
                "properties": {
                    "manufacturer": {
                        "type": "string"
                    },
                    "model": {
                        "type": "string"
                    },
                    "partNumber": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getType.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "isFullDepth": {
                        "type": "boolean"
                    },
                    "manufacturer": {
                        "type": "string"
                    },
                    "manufacturerId": {
                        "type": "integer"
                    },
                    "model": {
                        "type": "string"
                    },
                    "partNumber": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    },
                    "uHeight": {
                        "type": "number"
                    }
                },
                "type": "object",
                "required": [
                    "isFullDepth",
                    "manufacturerId",
                    "uHeight",
                    "id"
                ]
            }
        },
        "netbox:index/getAsn:getAsn": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumi/netbox\";\n\nconst asn1 = netbox.getAsn({\n    asn: \"1111\",\n    tag: \"tag-1\",\n});\nconst asn2 = netbox.getAsn({\n    tag: \"tag-1\",\n    tagN: \"tag-2\",\n});\n```\n```python\nimport pulumi\nimport pulumi_netbox as netbox\n\nasn1 = netbox.get_asn(asn=\"1111\",\n    tag=\"tag-1\")\nasn2 = netbox.get_asn(tag=\"tag-1\",\n    tag_n=\"tag-2\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Netbox = Pulumi.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var asn1 = Netbox.GetAsn.Invoke(new()\n    {\n        Asn = \"1111\",\n        Tag = \"tag-1\",\n    });\n\n    var asn2 = Netbox.GetAsn.Invoke(new()\n    {\n        Tag = \"tag-1\",\n        TagN = \"tag-2\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := netbox.LookupAsn(ctx, \u0026netbox.LookupAsnArgs{\n\t\t\tAsn: pulumi.StringRef(\"1111\"),\n\t\t\tTag: pulumi.StringRef(\"tag-1\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = netbox.LookupAsn(ctx, \u0026netbox.LookupAsnArgs{\n\t\t\tTag:  pulumi.StringRef(\"tag-1\"),\n\t\t\tTagN: pulumi.StringRef(\"tag-2\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.NetboxFunctions;\nimport com.pulumi.netbox.inputs.GetAsnArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var asn1 = NetboxFunctions.getAsn(GetAsnArgs.builder()\n            .asn(\"1111\")\n            .tag(\"tag-1\")\n            .build());\n\n        final var asn2 = NetboxFunctions.getAsn(GetAsnArgs.builder()\n            .tag(\"tag-1\")\n            .tagN(\"tag-2\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  asn1:\n    fn::invoke:\n      Function: netbox:getAsn\n      Arguments:\n        asn: '1111'\n        tag: tag-1\n  asn2:\n    fn::invoke:\n      Function: netbox:getAsn\n      Arguments:\n        tag: tag-1\n        tagN: tag-2\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getAsn.\n",
                "properties": {
                    "asn": {
                        "type": "string",
                        "description": "At least one of `asn` or `tag` must be given.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Tag to include in the data source filter (must match the tag's slug). At least one of `asn` or `tag` must be given.\n"
                    },
                    "tagN": {
                        "type": "string",
                        "description": "Tag to exclude from the data source filter (must match the tag's slug).\nRefer to [Netbox's documentation](https://demo.netbox.dev/static/docs/rest-api/filtering/#lookup-expressions)\nfor more information on available lookup expressions.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getAsn.\n",
                "properties": {
                    "asn": {
                        "type": "string",
                        "description": "At least one of `asn` or `tag` must be given.\n"
                    },
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "integer",
                        "description": "The ID of this resource.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Tag to include in the data source filter (must match the tag's slug). At least one of `asn` or `tag` must be given.\n"
                    },
                    "tagN": {
                        "type": "string",
                        "description": "Tag to exclude from the data source filter (must match the tag's slug).\nRefer to [Netbox's documentation](https://demo.netbox.dev/static/docs/rest-api/filtering/#lookup-expressions)\nfor more information on available lookup expressions.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "id",
                    "tags"
                ]
            }
        },
        "netbox:index/getAsns:getAsns": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumi/netbox\";\n\nconst asns = netbox.getAsns({\n    filters: [\n        {\n            name: \"asn__gte\",\n            value: \"1000\",\n        },\n        {\n            name: \"asn__lte\",\n            value: \"2000\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_netbox as netbox\n\nasns = netbox.get_asns(filters=[\n    {\n        \"name\": \"asn__gte\",\n        \"value\": \"1000\",\n    },\n    {\n        \"name\": \"asn__lte\",\n        \"value\": \"2000\",\n    },\n])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Netbox = Pulumi.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var asns = Netbox.GetAsns.Invoke(new()\n    {\n        Filters = new[]\n        {\n            new Netbox.Inputs.GetAsnsFilterInputArgs\n            {\n                Name = \"asn__gte\",\n                Value = \"1000\",\n            },\n            new Netbox.Inputs.GetAsnsFilterInputArgs\n            {\n                Name = \"asn__lte\",\n                Value = \"2000\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := netbox.GetAsns(ctx, \u0026netbox.GetAsnsArgs{\n\t\t\tFilters: []netbox.GetAsnsFilter{\n\t\t\t\t{\n\t\t\t\t\tName:  \"asn__gte\",\n\t\t\t\t\tValue: \"1000\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tName:  \"asn__lte\",\n\t\t\t\t\tValue: \"2000\",\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.NetboxFunctions;\nimport com.pulumi.netbox.inputs.GetAsnsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var asns = NetboxFunctions.getAsns(GetAsnsArgs.builder()\n            .filters(            \n                GetAsnsFilterArgs.builder()\n                    .name(\"asn__gte\")\n                    .value(\"1000\")\n                    .build(),\n                GetAsnsFilterArgs.builder()\n                    .name(\"asn__lte\")\n                    .value(\"2000\")\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  asns:\n    fn::invoke:\n      Function: netbox:getAsns\n      Arguments:\n        filters:\n          - name: asn__gte\n            value: '1000'\n          - name: asn__lte\n            value: '2000'\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getAsns.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/netbox:index/getAsnsFilter:getAsnsFilter"
                        }
                    },
                    "limit": {
                        "type": "integer",
                        "description": "Defaults to `0`.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getAsns.\n",
                "properties": {
                    "asns": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/netbox:index/getAsnsAsn:getAsnsAsn"
                        }
                    },
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/netbox:index/getAsnsFilter:getAsnsFilter"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "limit": {
                        "type": "integer",
                        "description": "Defaults to `0`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "asns",
                    "id"
                ]
            }
        },
        "netbox:index/getCluster:getCluster": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumi/netbox\";\n\nconst vmwCluster01 = netbox.getCluster({\n    name: \"vmw-cluster-01\",\n});\n```\n```python\nimport pulumi\nimport pulumi_netbox as netbox\n\nvmw_cluster01 = netbox.get_cluster(name=\"vmw-cluster-01\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Netbox = Pulumi.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var vmwCluster01 = Netbox.GetCluster.Invoke(new()\n    {\n        Name = \"vmw-cluster-01\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := netbox.LookupCluster(ctx, \u0026netbox.LookupClusterArgs{\n\t\t\tName: pulumi.StringRef(\"vmw-cluster-01\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.NetboxFunctions;\nimport com.pulumi.netbox.inputs.GetClusterArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var vmwCluster01 = NetboxFunctions.getCluster(GetClusterArgs.builder()\n            .name(\"vmw-cluster-01\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  vmwCluster01:\n    fn::invoke:\n      Function: netbox:getCluster\n      Arguments:\n        name: vmw-cluster-01\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getCluster.\n",
                "properties": {
                    "clusterGroupId": {
                        "type": "integer"
                    },
                    "id": {
                        "type": "string",
                        "description": "At least one of `name`, `site_id` or `id` must be given.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "At least one of `name`, `site_id` or `id` must be given.\n"
                    },
                    "siteId": {
                        "type": "integer",
                        "description": "At least one of `name`, `site_id` or `id` must be given.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getCluster.\n",
                "properties": {
                    "clusterGroupId": {
                        "type": "integer"
                    },
                    "clusterId": {
                        "type": "integer"
                    },
                    "clusterTypeId": {
                        "type": "integer"
                    },
                    "comments": {
                        "type": "string"
                    },
                    "customFields": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "At least one of `name`, `site_id` or `id` must be given.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "At least one of `name`, `site_id` or `id` must be given.\n"
                    },
                    "siteId": {
                        "type": "integer",
                        "description": "At least one of `name`, `site_id` or `id` must be given.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "clusterGroupId",
                    "clusterId",
                    "clusterTypeId",
                    "comments",
                    "customFields",
                    "description",
                    "id",
                    "siteId",
                    "tags"
                ]
            }
        },
        "netbox:index/getContact:getContact": {
            "inputs": {
                "description": "A collection of arguments for invoking getContact.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "At least one of `name` or `slug` must be given.\n"
                    },
                    "slug": {
                        "type": "string",
                        "description": "At least one of `name` or `slug` must be given.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getContact.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "groupId": {
                        "type": "integer"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "At least one of `name` or `slug` must be given.\n"
                    },
                    "slug": {
                        "type": "string",
                        "description": "At least one of `name` or `slug` must be given.\n"
                    }
                },
                "type": "object",
                "required": [
                    "groupId",
                    "name",
                    "slug",
                    "id"
                ]
            }
        },
        "netbox:index/getDevices:getDevices": {
            "inputs": {
                "description": "A collection of arguments for invoking getDevices.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/netbox:index/getDevicesFilter:getDevicesFilter"
                        }
                    },
                    "limit": {
                        "type": "integer"
                    },
                    "nameRegex": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getDevices.\n",
                "properties": {
                    "devices": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/netbox:index/getDevicesDevice:getDevicesDevice"
                        }
                    },
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/netbox:index/getDevicesFilter:getDevicesFilter"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "limit": {
                        "type": "integer"
                    },
                    "nameRegex": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "devices",
                    "id"
                ]
            }
        },
        "netbox:index/getInterfaces:getInterfaces": {
            "description": "## Example Usage\n\n",
            "inputs": {
                "description": "A collection of arguments for invoking getInterfaces.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/netbox:index/getInterfacesFilter:getInterfacesFilter"
                        }
                    },
                    "limit": {
                        "type": "integer",
                        "description": "The limit of objects to return from the API lookup. Defaults to `0`.\n"
                    },
                    "nameRegex": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getInterfaces.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/netbox:index/getInterfacesFilter:getInterfacesFilter"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "interfaces": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/netbox:index/getInterfacesInterface:getInterfacesInterface"
                        }
                    },
                    "limit": {
                        "type": "integer",
                        "description": "The limit of objects to return from the API lookup. Defaults to `0`.\n"
                    },
                    "nameRegex": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "interfaces",
                    "id"
                ]
            }
        },
        "netbox:index/getLocation:getLocation": {
            "inputs": {
                "description": "A collection of arguments for invoking getLocation.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "parentId": {
                        "type": "integer"
                    },
                    "siteId": {
                        "type": "integer"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getLocation.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "parentId": {
                        "type": "integer"
                    },
                    "siteId": {
                        "type": "integer"
                    },
                    "slug": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string"
                    },
                    "tenantId": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "id",
                    "parentId",
                    "siteId",
                    "status",
                    "tenantId"
                ]
            }
        },
        "netbox:index/getLocations:getLocations": {
            "inputs": {
                "description": "A collection of arguments for invoking getLocations.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/netbox:index/getLocationsFilter:getLocationsFilter"
                        },
                        "description": "A list of filter to apply to the API query when requesting locations.\n"
                    },
                    "limit": {
                        "type": "integer",
                        "description": "The limit of objects to return from the API lookup. Defaults to `0`.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of tags to filter on.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getLocations.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/netbox:index/getLocationsFilter:getLocationsFilter"
                        },
                        "description": "A list of filter to apply to the API query when requesting locations.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "limit": {
                        "type": "integer",
                        "description": "The limit of objects to return from the API lookup. Defaults to `0`.\n"
                    },
                    "locations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/netbox:index/getLocationsLocation:getLocationsLocation"
                        }
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of tags to filter on.\n"
                    }
                },
                "type": "object",
                "required": [
                    "locations",
                    "id"
                ]
            }
        },
        "netbox:index/getPlatform:getPlatform": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumi/netbox\";\n\nconst pANOS = netbox.getPlatform({\n    name: \"PANOS\",\n});\n```\n```python\nimport pulumi\nimport pulumi_netbox as netbox\n\np_anos = netbox.get_platform(name=\"PANOS\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Netbox = Pulumi.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var pANOS = Netbox.GetPlatform.Invoke(new()\n    {\n        Name = \"PANOS\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := netbox.LookupPlatform(ctx, \u0026netbox.LookupPlatformArgs{\n\t\t\tName: \"PANOS\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.NetboxFunctions;\nimport com.pulumi.netbox.inputs.GetPlatformArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var pANOS = NetboxFunctions.getPlatform(GetPlatformArgs.builder()\n            .name(\"PANOS\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  pANOS:\n    fn::invoke:\n      Function: netbox:getPlatform\n      Arguments:\n        name: PANOS\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getPlatform.\n",
                "properties": {
                    "manufacturerId": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPlatform.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "manufacturerId": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "slug",
                    "id"
                ]
            }
        },
        "netbox:index/getPrefix:getPrefix": {
            "inputs": {
                "description": "A collection of arguments for invoking getPrefix.\n",
                "properties": {
                    "cidr": {
                        "type": "string",
                        "description": "At least one of `description`, `family`, `prefix`, `vlan_vid`, `vrf_id`, `vlan_id`, `site_id`, `role_id`, `cidr` or `tag` must be given. Conflicts with `prefix`.\n",
                        "deprecationMessage": "The `cidr` parameter is deprecated in favor of the canonical `prefix` attribute."
                    },
                    "customFields": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "description": {
                        "type": "string",
                        "description": "Description to include in the data source filter. At least one of `description`, `family`, `prefix`, `vlan_vid`, `vrf_id`, `vlan_id`, `site_id`, `role_id`, `cidr` or `tag` must be given.\n"
                    },
                    "family": {
                        "type": "integer",
                        "description": "The IP family of the prefix. One of 4 or 6. At least one of `description`, `family`, `prefix`, `vlan_vid`, `vrf_id`, `vlan_id`, `site_id`, `role_id`, `cidr` or `tag` must be given.\n"
                    },
                    "prefix": {
                        "type": "string",
                        "description": "At least one of `description`, `family`, `prefix`, `vlan_vid`, `vrf_id`, `vlan_id`, `site_id`, `role_id`, `cidr` or `tag` must be given. Conflicts with `cidr`.\n"
                    },
                    "roleId": {
                        "type": "integer",
                        "description": "At least one of `description`, `family`, `prefix`, `vlan_vid`, `vrf_id`, `vlan_id`, `site_id`, `role_id`, `cidr` or `tag` must be given.\n"
                    },
                    "siteId": {
                        "type": "integer",
                        "description": "At least one of `description`, `family`, `prefix`, `vlan_vid`, `vrf_id`, `vlan_id`, `site_id`, `role_id`, `cidr` or `tag` must be given.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Tag to include in the data source filter (must match the tag's slug). At least one of `description`, `family`, `prefix`, `vlan_vid`, `vrf_id`, `vlan_id`, `site_id`, `role_id`, `cidr` or `tag` must be given.\n"
                    },
                    "tagN": {
                        "type": "string",
                        "description": "Tag to exclude from the data source filter (must match the tag's slug).\nRefer to [Netbox's documentation](https://demo.netbox.dev/static/docs/rest-api/filtering/#lookup-expressions)\nfor more information on available lookup expressions.\n"
                    },
                    "vlanId": {
                        "type": "integer",
                        "description": "At least one of `description`, `family`, `prefix`, `vlan_vid`, `vrf_id`, `vlan_id`, `site_id`, `role_id`, `cidr` or `tag` must be given.\n"
                    },
                    "vlanVid": {
                        "type": "number",
                        "description": "At least one of `description`, `family`, `prefix`, `vlan_vid`, `vrf_id`, `vlan_id`, `site_id`, `role_id`, `cidr` or `tag` must be given.\n"
                    },
                    "vrfId": {
                        "type": "integer",
                        "description": "At least one of `description`, `family`, `prefix`, `vlan_vid`, `vrf_id`, `vlan_id`, `site_id`, `role_id`, `cidr` or `tag` must be given.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getPrefix.\n",
                "properties": {
                    "cidr": {
                        "type": "string",
                        "description": "At least one of `description`, `family`, `prefix`, `vlan_vid`, `vrf_id`, `vlan_id`, `site_id`, `role_id`, `cidr` or `tag` must be given. Conflicts with `prefix`.\n",
                        "deprecationMessage": "The `cidr` parameter is deprecated in favor of the canonical `prefix` attribute."
                    },
                    "customFields": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "description": {
                        "type": "string",
                        "description": "Description to include in the data source filter. At least one of `description`, `family`, `prefix`, `vlan_vid`, `vrf_id`, `vlan_id`, `site_id`, `role_id`, `cidr` or `tag` must be given.\n"
                    },
                    "family": {
                        "type": "integer",
                        "description": "The IP family of the prefix. One of 4 or 6. At least one of `description`, `family`, `prefix`, `vlan_vid`, `vrf_id`, `vlan_id`, `site_id`, `role_id`, `cidr` or `tag` must be given.\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "The ID of this resource.\n"
                    },
                    "prefix": {
                        "type": "string",
                        "description": "At least one of `description`, `family`, `prefix`, `vlan_vid`, `vrf_id`, `vlan_id`, `site_id`, `role_id`, `cidr` or `tag` must be given. Conflicts with `cidr`.\n"
                    },
                    "roleId": {
                        "type": "integer",
                        "description": "At least one of `description`, `family`, `prefix`, `vlan_vid`, `vrf_id`, `vlan_id`, `site_id`, `role_id`, `cidr` or `tag` must be given.\n"
                    },
                    "siteId": {
                        "type": "integer",
                        "description": "At least one of `description`, `family`, `prefix`, `vlan_vid`, `vrf_id`, `vlan_id`, `site_id`, `role_id`, `cidr` or `tag` must be given.\n"
                    },
                    "status": {
                        "type": "string"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Tag to include in the data source filter (must match the tag's slug). At least one of `description`, `family`, `prefix`, `vlan_vid`, `vrf_id`, `vlan_id`, `site_id`, `role_id`, `cidr` or `tag` must be given.\n"
                    },
                    "tagN": {
                        "type": "string",
                        "description": "Tag to exclude from the data source filter (must match the tag's slug).\nRefer to [Netbox's documentation](https://demo.netbox.dev/static/docs/rest-api/filtering/#lookup-expressions)\nfor more information on available lookup expressions.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "vlanId": {
                        "type": "integer",
                        "description": "At least one of `description`, `family`, `prefix`, `vlan_vid`, `vrf_id`, `vlan_id`, `site_id`, `role_id`, `cidr` or `tag` must be given.\n"
                    },
                    "vlanVid": {
                        "type": "number",
                        "description": "At least one of `description`, `family`, `prefix`, `vlan_vid`, `vrf_id`, `vlan_id`, `site_id`, `role_id`, `cidr` or `tag` must be given.\n"
                    },
                    "vrfId": {
                        "type": "integer",
                        "description": "At least one of `description`, `family`, `prefix`, `vlan_vid`, `vrf_id`, `vlan_id`, `site_id`, `role_id`, `cidr` or `tag` must be given.\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "family",
                    "id",
                    "roleId",
                    "status",
                    "tags"
                ]
            }
        },
        "netbox:index/getPrefixes:getPrefixes": {
            "inputs": {
                "description": "A collection of arguments for invoking getPrefixes.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/netbox:index/getPrefixesFilter:getPrefixesFilter"
                        },
                        "description": "A list of filters to apply to the API query when requesting prefixes.\n"
                    },
                    "limit": {
                        "type": "integer",
                        "description": "The limit of objects to return from the API lookup. Defaults to `0`.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getPrefixes.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/netbox:index/getPrefixesFilter:getPrefixesFilter"
                        },
                        "description": "A list of filters to apply to the API query when requesting prefixes.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "limit": {
                        "type": "integer",
                        "description": "The limit of objects to return from the API lookup. Defaults to `0`.\n"
                    },
                    "prefixes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/netbox:index/getPrefixesPrefix:getPrefixesPrefix"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "prefixes",
                    "id"
                ]
            }
        },
        "netbox:index/getRacks:getRacks": {
            "inputs": {
                "description": "A collection of arguments for invoking getRacks.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/netbox:index/getRacksFilter:getRacksFilter"
                        }
                    },
                    "limit": {
                        "type": "integer",
                        "description": "Defaults to `0`.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getRacks.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/netbox:index/getRacksFilter:getRacksFilter"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "limit": {
                        "type": "integer",
                        "description": "Defaults to `0`.\n"
                    },
                    "racks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/netbox:index/getRacksRack:getRacksRack"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "racks",
                    "id"
                ]
            }
        },
        "netbox:index/getRegion:getRegion": {
            "inputs": {
                "description": "A collection of arguments for invoking getRegion.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/netbox:index/getRegionFilter:getRegionFilter"
                        }
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getRegion.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/netbox:index/getRegionFilter:getRegionFilter"
                        }
                    },
                    "id": {
                        "type": "integer",
                        "description": "The ID of this resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "parentRegionId": {
                        "type": "integer"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "id",
                    "name",
                    "parentRegionId",
                    "slug"
                ]
            }
        },
        "netbox:index/getSite:getSite": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumi/netbox\";\n\nconst getByName = netbox.getSite({\n    name: \"Example Site 1\",\n});\nconst getBySlug = netbox.getSite({\n    slug: \"example-site-1\",\n});\n```\n```python\nimport pulumi\nimport pulumi_netbox as netbox\n\nget_by_name = netbox.get_site(name=\"Example Site 1\")\nget_by_slug = netbox.get_site(slug=\"example-site-1\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Netbox = Pulumi.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var getByName = Netbox.GetSite.Invoke(new()\n    {\n        Name = \"Example Site 1\",\n    });\n\n    var getBySlug = Netbox.GetSite.Invoke(new()\n    {\n        Slug = \"example-site-1\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := netbox.LookupSite(ctx, \u0026netbox.LookupSiteArgs{\n\t\t\tName: pulumi.StringRef(\"Example Site 1\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = netbox.LookupSite(ctx, \u0026netbox.LookupSiteArgs{\n\t\t\tSlug: pulumi.StringRef(\"example-site-1\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.NetboxFunctions;\nimport com.pulumi.netbox.inputs.GetSiteArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var getByName = NetboxFunctions.getSite(GetSiteArgs.builder()\n            .name(\"Example Site 1\")\n            .build());\n\n        final var getBySlug = NetboxFunctions.getSite(GetSiteArgs.builder()\n            .slug(\"example-site-1\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  getByName:\n    fn::invoke:\n      Function: netbox:getSite\n      Arguments:\n        name: Example Site 1\n  getBySlug:\n    fn::invoke:\n      Function: netbox:getSite\n      Arguments:\n        slug: example-site-1\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getSite.\n",
                "properties": {
                    "facility": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getSite.\n",
                "properties": {
                    "asnIds": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    },
                    "comments": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "facility": {
                        "type": "string"
                    },
                    "groupId": {
                        "type": "integer"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "regionId": {
                        "type": "integer"
                    },
                    "siteId": {
                        "type": "integer"
                    },
                    "slug": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string"
                    },
                    "tenantId": {
                        "type": "integer"
                    },
                    "timeZone": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "asnIds",
                    "comments",
                    "description",
                    "facility",
                    "groupId",
                    "id",
                    "name",
                    "regionId",
                    "siteId",
                    "slug",
                    "status",
                    "tenantId",
                    "timeZone"
                ]
            }
        },
        "netbox:index/getTag:getTag": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumi/netbox\";\n\nconst dmz = netbox.getTag({\n    name: \"DMZ\",\n});\n```\n```python\nimport pulumi\nimport pulumi_netbox as netbox\n\ndmz = netbox.get_tag(name=\"DMZ\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Netbox = Pulumi.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var dmz = Netbox.GetTag.Invoke(new()\n    {\n        Name = \"DMZ\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := netbox.LookupTag(ctx, \u0026netbox.LookupTagArgs{\n\t\t\tName: \"DMZ\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.NetboxFunctions;\nimport com.pulumi.netbox.inputs.GetTagArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var dmz = NetboxFunctions.getTag(GetTagArgs.builder()\n            .name(\"DMZ\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  dmz:\n    fn::invoke:\n      Function: netbox:getTag\n      Arguments:\n        name: DMZ\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getTag.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getTag.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "slug",
                    "id"
                ]
            }
        },
        "netbox:index/getTags:getTags": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumi/netbox\";\n\nconst allTags = netbox.getTags({});\nconst ansibleTags = netbox.getTags({\n    filters: [{\n        name: \"name__isw\",\n        value: \"ansible_\",\n    }],\n});\nconst notAnsibleTags = netbox.getTags({\n    filters: [{\n        name: \"name__nisw\",\n        value: \"ansible_\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_netbox as netbox\n\nall_tags = netbox.get_tags()\nansible_tags = netbox.get_tags(filters=[{\n    \"name\": \"name__isw\",\n    \"value\": \"ansible_\",\n}])\nnot_ansible_tags = netbox.get_tags(filters=[{\n    \"name\": \"name__nisw\",\n    \"value\": \"ansible_\",\n}])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Netbox = Pulumi.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var allTags = Netbox.GetTags.Invoke();\n\n    var ansibleTags = Netbox.GetTags.Invoke(new()\n    {\n        Filters = new[]\n        {\n            new Netbox.Inputs.GetTagsFilterInputArgs\n            {\n                Name = \"name__isw\",\n                Value = \"ansible_\",\n            },\n        },\n    });\n\n    var notAnsibleTags = Netbox.GetTags.Invoke(new()\n    {\n        Filters = new[]\n        {\n            new Netbox.Inputs.GetTagsFilterInputArgs\n            {\n                Name = \"name__nisw\",\n                Value = \"ansible_\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := netbox.GetTags(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = netbox.GetTags(ctx, \u0026netbox.GetTagsArgs{\n\t\t\tFilters: []netbox.GetTagsFilter{\n\t\t\t\t{\n\t\t\t\t\tName:  \"name__isw\",\n\t\t\t\t\tValue: \"ansible_\",\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = netbox.GetTags(ctx, \u0026netbox.GetTagsArgs{\n\t\t\tFilters: []netbox.GetTagsFilter{\n\t\t\t\t{\n\t\t\t\t\tName:  \"name__nisw\",\n\t\t\t\t\tValue: \"ansible_\",\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.NetboxFunctions;\nimport com.pulumi.netbox.inputs.GetTagsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var allTags = NetboxFunctions.getTags();\n\n        final var ansibleTags = NetboxFunctions.getTags(GetTagsArgs.builder()\n            .filters(GetTagsFilterArgs.builder()\n                .name(\"name__isw\")\n                .value(\"ansible_\")\n                .build())\n            .build());\n\n        final var notAnsibleTags = NetboxFunctions.getTags(GetTagsArgs.builder()\n            .filters(GetTagsFilterArgs.builder()\n                .name(\"name__nisw\")\n                .value(\"ansible_\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  allTags:\n    fn::invoke:\n      Function: netbox:getTags\n      Arguments: {}\n  ansibleTags:\n    fn::invoke:\n      Function: netbox:getTags\n      Arguments:\n        filters:\n          - name: name__isw\n            value: ansible_\n  notAnsibleTags:\n    fn::invoke:\n      Function: netbox:getTags\n      Arguments:\n        filters:\n          - name: name__nisw\n            value: ansible_\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getTags.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/netbox:index/getTagsFilter:getTagsFilter"
                        }
                    },
                    "limit": {
                        "type": "integer",
                        "description": "Defaults to `0`.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getTags.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/netbox:index/getTagsFilter:getTagsFilter"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "limit": {
                        "type": "integer",
                        "description": "Defaults to `0`.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/netbox:index/getTagsTag:getTagsTag"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "tags",
                    "id"
                ]
            }
        },
        "netbox:index/getTenant:getTenant": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumi/netbox\";\n\nconst customerA = netbox.getTenant({\n    name: \"Customer A\",\n});\n```\n```python\nimport pulumi\nimport pulumi_netbox as netbox\n\ncustomer_a = netbox.get_tenant(name=\"Customer A\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Netbox = Pulumi.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var customerA = Netbox.GetTenant.Invoke(new()\n    {\n        Name = \"Customer A\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := netbox.LookupTenant(ctx, \u0026netbox.LookupTenantArgs{\n\t\t\tName: pulumi.StringRef(\"Customer A\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.NetboxFunctions;\nimport com.pulumi.netbox.inputs.GetTenantArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var customerA = NetboxFunctions.getTenant(GetTenantArgs.builder()\n            .name(\"Customer A\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  customerA:\n    fn::invoke:\n      Function: netbox:getTenant\n      Arguments:\n        name: Customer A\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getTenant.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "At least one of `name` or `slug` must be given.\n"
                    },
                    "slug": {
                        "type": "string",
                        "description": "At least one of `name` or `slug` must be given.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getTenant.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "groupId": {
                        "type": "integer"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "At least one of `name` or `slug` must be given.\n"
                    },
                    "slug": {
                        "type": "string",
                        "description": "At least one of `name` or `slug` must be given.\n"
                    }
                },
                "type": "object",
                "required": [
                    "groupId",
                    "name",
                    "slug",
                    "id"
                ]
            }
        },
        "netbox:index/getTenants:getTenants": {
            "inputs": {
                "description": "A collection of arguments for invoking getTenants.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/netbox:index/getTenantsFilter:getTenantsFilter"
                        }
                    },
                    "limit": {
                        "type": "integer",
                        "description": "Defaults to `1000`.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getTenants.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/netbox:index/getTenantsFilter:getTenantsFilter"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "limit": {
                        "type": "integer",
                        "description": "Defaults to `1000`.\n"
                    },
                    "tenants": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/netbox:index/getTenantsTenant:getTenantsTenant"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "tenants",
                    "id"
                ]
            }
        },
        "netbox:index/getVlan:getVlan": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumi/netbox\";\n\nconst vlan1 = netbox.getVlan({\n    name: \"vlan-1\",\n});\nconst vlan2 = netbox.getVlan({\n    vid: 1234,\n    role: netbox_ipam_role.example.id,\n});\nconst vlan3 = netbox.getVlan({\n    name: \"vlan-3\",\n    tenant: netbox_tenant.example.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_netbox as netbox\n\nvlan1 = netbox.get_vlan(name=\"vlan-1\")\nvlan2 = netbox.get_vlan(vid=1234,\n    role=netbox_ipam_role[\"example\"][\"id\"])\nvlan3 = netbox.get_vlan(name=\"vlan-3\",\n    tenant=netbox_tenant[\"example\"][\"id\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Netbox = Pulumi.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var vlan1 = Netbox.GetVlan.Invoke(new()\n    {\n        Name = \"vlan-1\",\n    });\n\n    var vlan2 = Netbox.GetVlan.Invoke(new()\n    {\n        Vid = 1234,\n        Role = netbox_ipam_role.Example.Id,\n    });\n\n    var vlan3 = Netbox.GetVlan.Invoke(new()\n    {\n        Name = \"vlan-3\",\n        Tenant = netbox_tenant.Example.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := netbox.LookupVlan(ctx, \u0026netbox.LookupVlanArgs{\n\t\t\tName: pulumi.StringRef(\"vlan-1\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = netbox.LookupVlan(ctx, \u0026netbox.LookupVlanArgs{\n\t\t\tVid:  pulumi.IntRef(1234),\n\t\t\tRole: pulumi.IntRef(netbox_ipam_role.Example.Id),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = netbox.LookupVlan(ctx, \u0026netbox.LookupVlanArgs{\n\t\t\tName:   pulumi.StringRef(\"vlan-3\"),\n\t\t\tTenant: pulumi.IntRef(netbox_tenant.Example.Id),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.NetboxFunctions;\nimport com.pulumi.netbox.inputs.GetVlanArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var vlan1 = NetboxFunctions.getVlan(GetVlanArgs.builder()\n            .name(\"vlan-1\")\n            .build());\n\n        final var vlan2 = NetboxFunctions.getVlan(GetVlanArgs.builder()\n            .vid(1234)\n            .role(netbox_ipam_role.example().id())\n            .build());\n\n        final var vlan3 = NetboxFunctions.getVlan(GetVlanArgs.builder()\n            .name(\"vlan-3\")\n            .tenant(netbox_tenant.example().id())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  vlan1:\n    fn::invoke:\n      Function: netbox:getVlan\n      Arguments:\n        name: vlan-1\n  vlan2:\n    fn::invoke:\n      Function: netbox:getVlan\n      Arguments:\n        vid: 1234\n        role: ${netbox_ipam_role.example.id}\n  vlan3:\n    fn::invoke:\n      Function: netbox:getVlan\n      Arguments:\n        name: vlan-3\n        tenant: ${netbox_tenant.example.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getVlan.\n",
                "properties": {
                    "groupId": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "role": {
                        "type": "integer"
                    },
                    "tenant": {
                        "type": "integer"
                    },
                    "vid": {
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getVlan.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "groupId": {
                        "type": "integer"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "role": {
                        "type": "integer"
                    },
                    "site": {
                        "type": "integer"
                    },
                    "status": {
                        "type": "string"
                    },
                    "tenant": {
                        "type": "integer"
                    },
                    "vid": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "groupId",
                    "role",
                    "site",
                    "status",
                    "tenant",
                    "id"
                ]
            }
        },
        "netbox:index/getVlans:getVlans": {
            "inputs": {
                "description": "A collection of arguments for invoking getVlans.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/netbox:index/getVlansFilter:getVlansFilter"
                        }
                    },
                    "limit": {
                        "type": "integer",
                        "description": "Defaults to `0`.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getVlans.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/netbox:index/getVlansFilter:getVlansFilter"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "limit": {
                        "type": "integer",
                        "description": "Defaults to `0`.\n"
                    },
                    "vlans": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/netbox:index/getVlansVlan:getVlansVlan"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "vlans",
                    "id"
                ]
            }
        },
        "netbox:index/getVrf:getVrf": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumi/netbox\";\n\nconst custAProd = netbox.getVrf({\n    name: \"cust-a-prod\",\n});\n```\n```python\nimport pulumi\nimport pulumi_netbox as netbox\n\ncust_a_prod = netbox.get_vrf(name=\"cust-a-prod\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Netbox = Pulumi.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var custAProd = Netbox.GetVrf.Invoke(new()\n    {\n        Name = \"cust-a-prod\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := netbox.LookupVrf(ctx, \u0026netbox.LookupVrfArgs{\n\t\t\tName: \"cust-a-prod\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.NetboxFunctions;\nimport com.pulumi.netbox.inputs.GetVrfArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var custAProd = NetboxFunctions.getVrf(GetVrfArgs.builder()\n            .name(\"cust-a-prod\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  custAProd:\n    fn::invoke:\n      Function: netbox:getVrf\n      Arguments:\n        name: cust-a-prod\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getVrf.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "tenantId": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getVrf.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "tenantId": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "id"
                ]
            }
        },
        "netbox:index/getVrfs:getVrfs": {
            "inputs": {
                "description": "A collection of arguments for invoking getVrfs.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/netbox:index/getVrfsFilter:getVrfsFilter"
                        }
                    },
                    "limit": {
                        "type": "integer",
                        "description": "Defaults to `0`.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getVrfs.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/netbox:index/getVrfsFilter:getVrfsFilter"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "limit": {
                        "type": "integer",
                        "description": "Defaults to `0`.\n"
                    },
                    "vrfs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/netbox:index/getVrfsVrf:getVrfsVrf"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "vrfs",
                    "id"
                ]
            }
        },
        "netbox:ip/getAddresses:getAddresses": {
            "inputs": {
                "description": "A collection of arguments for invoking getAddresses.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/netbox:ip/getAddressesFilter:getAddressesFilter"
                        }
                    },
                    "limit": {
                        "type": "integer",
                        "description": "Defaults to `1000`.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getAddresses.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/netbox:ip/getAddressesFilter:getAddressesFilter"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ipAddresses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/netbox:ip/getAddressesIpAddress:getAddressesIpAddress"
                        }
                    },
                    "limit": {
                        "type": "integer",
                        "description": "Defaults to `1000`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "ipAddresses",
                    "id"
                ]
            }
        },
        "netbox:ip/getRange:getRange": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumi/netbox\";\n\nconst custAProd = netbox.ip.getRange({\n    contains: \"10.0.0.1/24\",\n});\n```\n```python\nimport pulumi\nimport pulumi_netbox as netbox\n\ncust_a_prod = netbox.ip.get_range(contains=\"10.0.0.1/24\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Netbox = Pulumi.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var custAProd = Netbox.Ip.GetRange.Invoke(new()\n    {\n        Contains = \"10.0.0.1/24\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox/ip\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ip.LookupRange(ctx, \u0026ip.LookupRangeArgs{\n\t\t\tContains: \"10.0.0.1/24\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.ip.IpFunctions;\nimport com.pulumi.netbox.ip.inputs.GetRangeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var custAProd = IpFunctions.getRange(GetRangeArgs.builder()\n            .contains(\"10.0.0.1/24\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  custAProd:\n    fn::invoke:\n      Function: netbox:ip:getRange\n      Arguments:\n        contains: 10.0.0.1/24\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getRange.\n",
                "properties": {
                    "contains": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "contains"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getRange.\n",
                "properties": {
                    "contains": {
                        "type": "string"
                    },
                    "id": {
                        "type": "integer",
                        "description": "The ID of this resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "contains",
                    "id"
                ]
            }
        },
        "netbox:ipam/getRole:getRole": {
            "inputs": {
                "description": "A collection of arguments for invoking getRole.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getRole.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    },
                    "weight": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "name",
                    "slug",
                    "weight",
                    "id"
                ]
            }
        },
        "netbox:rack/getRole:getRole": {
            "inputs": {
                "description": "A collection of arguments for invoking getRole.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getRole.\n",
                "properties": {
                    "colorHex": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "colorHex",
                    "description",
                    "name",
                    "slug",
                    "tags",
                    "id"
                ]
            }
        },
        "netbox:route/getTarget:getTarget": {
            "inputs": {
                "description": "A collection of arguments for invoking getTarget.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getTarget.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "tenantId": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "name",
                    "tenantId",
                    "id"
                ]
            }
        },
        "netbox:site/getGroup:getGroup": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumi/netbox\";\n\nconst getByName = netbox.site.getGroup({\n    name: \"example-sitegroup-1\",\n});\nconst getBySlug = netbox.site.getGroup({\n    slug: \"sitegrp\",\n});\n```\n```python\nimport pulumi\nimport pulumi_netbox as netbox\n\nget_by_name = netbox.site.get_group(name=\"example-sitegroup-1\")\nget_by_slug = netbox.site.get_group(slug=\"sitegrp\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Netbox = Pulumi.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var getByName = Netbox.Site.GetGroup.Invoke(new()\n    {\n        Name = \"example-sitegroup-1\",\n    });\n\n    var getBySlug = Netbox.Site.GetGroup.Invoke(new()\n    {\n        Slug = \"sitegrp\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox/site\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := site.LookupGroup(ctx, \u0026site.LookupGroupArgs{\n\t\t\tName: pulumi.StringRef(\"example-sitegroup-1\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = site.LookupGroup(ctx, \u0026site.LookupGroupArgs{\n\t\t\tSlug: pulumi.StringRef(\"sitegrp\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.site.SiteFunctions;\nimport com.pulumi.netbox.site.inputs.GetGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var getByName = SiteFunctions.getGroup(GetGroupArgs.builder()\n            .name(\"example-sitegroup-1\")\n            .build());\n\n        final var getBySlug = SiteFunctions.getGroup(GetGroupArgs.builder()\n            .slug(\"sitegrp\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  getByName:\n    fn::invoke:\n      Function: netbox:site:getGroup\n      Arguments:\n        name: example-sitegroup-1\n  getBySlug:\n    fn::invoke:\n      Function: netbox:site:getGroup\n      Arguments:\n        slug: sitegrp\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getGroup.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "At least one of `name` or `slug` must be given.\n"
                    },
                    "slug": {
                        "type": "string",
                        "description": "At least one of `name` or `slug` must be given.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getGroup.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "At least one of `name` or `slug` must be given.\n"
                    },
                    "slug": {
                        "type": "string",
                        "description": "At least one of `name` or `slug` must be given.\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "name",
                    "slug",
                    "id"
                ]
            }
        },
        "netbox:tenant/getGroup:getGroup": {
            "inputs": {
                "description": "A collection of arguments for invoking getGroup.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGroup.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "parentId": {
                        "type": "integer"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "name",
                    "parentId",
                    "slug",
                    "id"
                ]
            }
        },
        "netbox:virtual/getMachines:getMachines": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumi/netbox\";\n\nconst vmwCluster01 = netbox.getCluster({\n    name: \"vmw-cluster-01\",\n});\nconst baseVm = vmwCluster01.then(vmwCluster01 =\u003e netbox.virtual.getMachines({\n    nameRegex: \"myvm-1\",\n    filters: [{\n        name: \"cluster_id\",\n        value: vmwCluster01.id,\n    }],\n}));\n```\n```python\nimport pulumi\nimport pulumi_netbox as netbox\n\nvmw_cluster01 = netbox.get_cluster(name=\"vmw-cluster-01\")\nbase_vm = netbox.virtual.get_machines(name_regex=\"myvm-1\",\n    filters=[{\n        \"name\": \"cluster_id\",\n        \"value\": vmw_cluster01.id,\n    }])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Netbox = Pulumi.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var vmwCluster01 = Netbox.GetCluster.Invoke(new()\n    {\n        Name = \"vmw-cluster-01\",\n    });\n\n    var baseVm = Netbox.Virtual.GetMachines.Invoke(new()\n    {\n        NameRegex = \"myvm-1\",\n        Filters = new[]\n        {\n            new Netbox.Virtual.Inputs.GetMachinesFilterInputArgs\n            {\n                Name = \"cluster_id\",\n                Value = vmwCluster01.Apply(getClusterResult =\u003e getClusterResult.Id),\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox\"\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox/virtual\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tvmwCluster01, err := netbox.LookupCluster(ctx, \u0026netbox.LookupClusterArgs{\n\t\t\tName: pulumi.StringRef(\"vmw-cluster-01\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = virtual.GetMachines(ctx, \u0026virtual.GetMachinesArgs{\n\t\t\tNameRegex: pulumi.StringRef(\"myvm-1\"),\n\t\t\tFilters: []virtual.GetMachinesFilter{\n\t\t\t\t{\n\t\t\t\t\tName:  \"cluster_id\",\n\t\t\t\t\tValue: vmwCluster01.Id,\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.NetboxFunctions;\nimport com.pulumi.netbox.inputs.GetClusterArgs;\nimport com.pulumi.netbox.virtual.VirtualFunctions;\nimport com.pulumi.netbox.virtual.inputs.GetMachinesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var vmwCluster01 = NetboxFunctions.getCluster(GetClusterArgs.builder()\n            .name(\"vmw-cluster-01\")\n            .build());\n\n        final var baseVm = VirtualFunctions.getMachines(GetMachinesArgs.builder()\n            .nameRegex(\"myvm-1\")\n            .filters(GetMachinesFilterArgs.builder()\n                .name(\"cluster_id\")\n                .value(vmwCluster01.applyValue(getClusterResult -\u003e getClusterResult.id()))\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  vmwCluster01:\n    fn::invoke:\n      Function: netbox:getCluster\n      Arguments:\n        name: vmw-cluster-01\n  baseVm:\n    fn::invoke:\n      Function: netbox:virtual:getMachines\n      Arguments:\n        nameRegex: myvm-1\n        filters:\n          - name: cluster_id\n            value: ${vmwCluster01.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getMachines.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/netbox:virtual/getMachinesFilter:getMachinesFilter"
                        }
                    },
                    "limit": {
                        "type": "integer"
                    },
                    "nameRegex": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getMachines.\n",
                "properties": {
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/netbox:virtual/getMachinesFilter:getMachinesFilter"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "limit": {
                        "type": "integer"
                    },
                    "nameRegex": {
                        "type": "string"
                    },
                    "vms": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/netbox:virtual/getMachinesVm:getMachinesVm"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "vms",
                    "id"
                ]
            }
        },
        "netbox:vlan/getGroup:getGroup": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as netbox from \"@pulumi/netbox\";\n\nconst example1 = netbox.vlan.getGroup({\n    name: \"example1\",\n});\nconst example2 = netbox.vlan.getGroup({\n    slug: \"example2\",\n});\nconst example3 = netbox.vlan.getGroup({\n    name: \"example\",\n    scopeType: \"dcim.site\",\n    scopeId: netbox_site.example.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_netbox as netbox\n\nexample1 = netbox.vlan.get_group(name=\"example1\")\nexample2 = netbox.vlan.get_group(slug=\"example2\")\nexample3 = netbox.vlan.get_group(name=\"example\",\n    scope_type=\"dcim.site\",\n    scope_id=netbox_site[\"example\"][\"id\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Netbox = Pulumi.Netbox;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example1 = Netbox.Vlan.GetGroup.Invoke(new()\n    {\n        Name = \"example1\",\n    });\n\n    var example2 = Netbox.Vlan.GetGroup.Invoke(new()\n    {\n        Slug = \"example2\",\n    });\n\n    var example3 = Netbox.Vlan.GetGroup.Invoke(new()\n    {\n        Name = \"example\",\n        ScopeType = \"dcim.site\",\n        ScopeId = netbox_site.Example.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/BenjaminDebotte/pulumi-netbox/sdk/go/netbox/vlan\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := vlan.LookupGroup(ctx, \u0026vlan.LookupGroupArgs{\n\t\t\tName: pulumi.StringRef(\"example1\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = vlan.LookupGroup(ctx, \u0026vlan.LookupGroupArgs{\n\t\t\tSlug: pulumi.StringRef(\"example2\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = vlan.LookupGroup(ctx, \u0026vlan.LookupGroupArgs{\n\t\t\tName:      pulumi.StringRef(\"example\"),\n\t\t\tScopeType: pulumi.StringRef(\"dcim.site\"),\n\t\t\tScopeId:   pulumi.IntRef(netbox_site.Example.Id),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.netbox.vlan.VlanFunctions;\nimport com.pulumi.netbox.vlan.inputs.GetGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example1 = VlanFunctions.getGroup(GetGroupArgs.builder()\n            .name(\"example1\")\n            .build());\n\n        final var example2 = VlanFunctions.getGroup(GetGroupArgs.builder()\n            .slug(\"example2\")\n            .build());\n\n        final var example3 = VlanFunctions.getGroup(GetGroupArgs.builder()\n            .name(\"example\")\n            .scopeType(\"dcim.site\")\n            .scopeId(netbox_site.example().id())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example1:\n    fn::invoke:\n      Function: netbox:vlan:getGroup\n      Arguments:\n        name: example1\n  example2:\n    fn::invoke:\n      Function: netbox:vlan:getGroup\n      Arguments:\n        slug: example2\n  example3:\n    fn::invoke:\n      Function: netbox:vlan:getGroup\n      Arguments:\n        name: example\n        scopeType: dcim.site\n        scopeId: ${netbox_site.example.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getGroup.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "At least one of `name` or `slug` must be given.\n"
                    },
                    "scopeId": {
                        "type": "integer",
                        "description": "Required when `scope_type` is set.\n"
                    },
                    "scopeType": {
                        "type": "string",
                        "description": "Valid values are `dcim.location`, `dcim.site`, `dcim.sitegroup`, `dcim.region`, `dcim.rack`, `virtualization.cluster` and `virtualization.clustergroup`.\n"
                    },
                    "slug": {
                        "type": "string",
                        "description": "At least one of `name` or `slug` must be given.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getGroup.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "maxVid": {
                        "type": "integer"
                    },
                    "minVid": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string",
                        "description": "At least one of `name` or `slug` must be given.\n"
                    },
                    "scopeId": {
                        "type": "integer",
                        "description": "Required when `scope_type` is set.\n"
                    },
                    "scopeType": {
                        "type": "string",
                        "description": "Valid values are `dcim.location`, `dcim.site`, `dcim.sitegroup`, `dcim.region`, `dcim.rack`, `virtualization.cluster` and `virtualization.clustergroup`.\n"
                    },
                    "slug": {
                        "type": "string",
                        "description": "At least one of `name` or `slug` must be given.\n"
                    },
                    "vlanCount": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "maxVid",
                    "minVid",
                    "name",
                    "slug",
                    "vlanCount",
                    "id"
                ]
            }
        }
    }
}